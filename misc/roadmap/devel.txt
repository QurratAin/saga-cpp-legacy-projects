
SAGA-C++ Development Roadmap
----------------------------

 This document tries to lay the basis of a coordinated evolution
 of the SAGA-C++ implementation (including, and limited to,
 saga-core, its python bindings and C++ adaptors).  The document
 ignores several issues which are closely related to the code
 development, such as deployment, documentation, standardization
 and higher level tools -- those are discussed in separate
 documents.


 Status Oct 2011
 ---------------

  The SAGA C++ implementation has reached some maturity, and
  seems to be usable for real world projects.  It is in the
  process of getting globally deployed on several major DCIs,
  which will likely increase uptake.  The SAGA-C++ usage has
  focused on a relatively small subset of adaptors (globus, ssh,
  default, condor, pbs), with a small number of additional ones
  expected growth (gLite, BES).  Those adaptors seem to
  stabilize, most other adaptors have to be classified as
  experimental or dead.  The Python bindings over C++ have seen
  significant usage.

  The used IT infrastructure (repository, devel list, web site
  and ticketing system) are all hosted at CCT/LSU, but are
  expected to get migrated to Rutgers or elsewhere within the
  next couple of months.  That infrastructure seems to work
  reliable, but has some annoyances and deficiencies.

  The development team at the moment consists of 2.x core
  developers (Ole, Andre, Hartmut), and a relatively large set
  of adaptor developers (Students, Naregi, Steve, Hans).  The
  team is slowly but surely growing, but people outside of the
  core team tend to focus on specific modules.  Hartmut is
  slowly drifting off, development-wise.

  

 Potential for Evolution
 -----------------------

  Up to now, the SAGA evolution has been driven by releases,
  which, in general, targetet specific use cases or
  environments.  Long-term evolution has been somewhat neglected
  though, as the procedure only allowed to plan from
  release to release -- many tickets have been moved from one
  release to the next, even if marked 'Urgent', because they did
  not fit the specific release targets.  As a result, parts of
  the code base are very well maintained, and others fell behind
  for years.

  The SAGA-C++ implementation can, in general, evolve in several
  aspects:

    - functional evolution:
      - additional API packages
      - additional adaptors
      - added engine functionality
      - API evolution (fix C++ API, evolve Python API)
    - non-functional 
      - code quality / stability / reliability / documentation
      - development tooling, build and packaging support
      - code and backend testing

  As the size of the devel team is restricted, a prioritization
  of those options (and on more fine grained sub-items) is
  required, to have any chance of a coordinated evolution.  It
  is difficult to see how that prioritization can be decoupled
  from the currently reigning release schedule, but that attempt
  must be made to allow for a motre balanced code base
  evolution.


 Prioritization
 --------------

  [AM: Now, this is where my bias will show, so please feel free
       to shoot! ;-)]

  SAGA-C++ is the one and only C++ implementation of the SAGA
  API, and as such defines the C++ language bindings.  Several
  features of the API have not yet been (fully) implemented, due
  to the lack of prioritization.  One could argue that those
  features have then obviously not been missed, but (a) the set
  of long-standing open API level tickets suggests otherwise,
  and (b) it is a chicken-and-egg problem: users will rarely
  complain about missing specifica if they do not know those
  specifica could exist.  
  
  What we *do* see is that several important groups stop using
  SAGA (most importantly BigJob), and one needs to understand
  the reason for that.  It can be claimed that the reasons are

    - lacking / support of asynchro


