#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble
%% LyX 1.5.3 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.



\makeatletter

\makeatother
\end_preamble
\options a4paper,onecolumn
\language english
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize 11
\spacing single
\papersize default
\use_geometry false
\use_amsmath 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title

\size larger
Specification and Implementation of a Python to SAGA Language Binding
\size normal

\newline
 Computer Science Master Thesis
\size larger
 
\end_layout

\begin_layout Author
P.F.A.
 van Zoolingen
\size normal

\newline
 1284657, pzn400@few.vu.nl
\end_layout

\begin_layout Section
Abstract
\end_layout

\begin_layout Standard
This thesis describes the effort to create a Python language binding for
 SAGA, the Simple Api for Grid Applications, and its efforts to implement
 the language binding on top of the Java reference implementation.
 Using this functionality, Python programmers can use SAGA to program grid
 aware applications and to shield themselves from all the details which
 come with grids.
 This adds to the adopting of SAGA in a world of with many different APIs
 and middleware layers.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Introduction English
\end_layout

\begin_layout Standard
SAGA stands for Simple API for Grid Applications and was developed to offer
 users a simple tool to program applications for of heterogeneous grids.
 These grids often consist of different types of hardware, operating systems
 and middleware software and are hard to program.
 This API is developed to be independent of any underlying hardware or software
 and to shield the user from all the details and to let him focus on programming
 grid aware applications.
\end_layout

\begin_layout Standard
To use this API, the functionality described by SAGA has to be implemented
 by another piece of software.
 This is called the Saga reference implementation.
 At this point there are three different reference implementations which
 are programmed in the programming languages Java and C++.
 Which in a general sense means that only Java and C++ applications can
 easily use SAGA to access the grid in an easy way.
 This thesis describes the efforts to add another language to that list,
 namely Python.
 Python is partially supported by the C++ reference implementation, but
 there is no specific Python language binding available which describes
 the SAGA functionality in Python specific way, independent of the chosen
 reference implementation.
 During the course of my master project I have specified the Python language
 binding and have implemented the language binding for the Java reference
 implementation.
\end_layout

\begin_layout Standard
This thesis is divided into different pieces.
 First I will describe and explain what SAGA is, where it comes from and
 how it is implemented.
 Then I will continue with a description of Python and a special implementation
 of Python called Jython, followed by the specification of the language
 binding and its implementation.
 After that I will conclude with the testing, discussion, future work and
 the conclusion.
\end_layout

\begin_layout Subsection
Introduction Dutch
\end_layout

\begin_layout Standard
SAGA staat voor Simpele API voor Grid Applicaties en is ontwikkeld als een
 simpel stuk gereedschap om het programmeren op hetrogene grids te vergemakkelij
ken.
 Dit soort grids bestaan vaak uit verschillende hardware, besturingssystemen
 en middleware software en het is vaak lastig om hier grid applicaties voor
 te programmeren.
 De API is ontwikkeld als een aanspreekpunt voor de grid, onafhankelijk
 van de onderliggende hard- en software.
 Tevens houdt de API de programmeur weg bij de onderliggende details, die
 per platform zeer kunnen verschillen, en laat de programmeur zich bezighouden
 met het programmeren van een hogere abstractie niveau voor zijn applicatie.
\end_layout

\begin_layout Standard
Om de API te kunnen gebruiken moet de functionaliteit beschreven door SAGA
 ge
\begin_inset ERT
status inlined

\begin_layout Standard


\backslash
"i
\end_layout

\end_inset

mplementeerd worden door andere software.
 De algemene term voor deze software is de Referentie Implementatie.
 Momenteel bestaan drie verschillende referentie implementaties die gemaakt
 zijn in de programmeertalen Java en C++.
 Dit houdt globaal in de talen C++ en Java redelijk eenvoudig is om een
 applicatie te programmeren en de achterliggende referentie implementatie
 en daarmee het grid te gebruiken.
 Deze Master these beschrijft de inspanning om daar een derde taal aan toe
 te voegen, namelijk Python.
 Python word op dit moment al deels ondersteund door de C++ referentie implement
atie maar er is geen algemene specificatie, ofwel een 'language binding',
 beschikbaar die de SAGA functionaliteit beschrijft in een Python specifieke
 manier, onafhankelijk van de onderliggende referentie implementatie.
 Tijdens mijn Master project heb ik een Python language binding voor SAGA
 gespecificeerd en daarnaast ge
\begin_inset ERT
status inlined

\begin_layout Standard


\backslash
"i
\end_layout

\end_inset

mplementeerd bovenop de Java referentie implementatie.
 Deze implementatie zou in theorie moeten werken op elke Java referentie
 implementatie.
 
\end_layout

\begin_layout Standard
Deze these is onderverdeeld in verschillende delen.
 Eerst zal ik uitleggen wat SAGA is, waar het vandaan komt en hoe het geimplemen
teerd is.
 Ik zal doorgaan met een beschrijving van Python en een specifieke implementatie
 van Python genaamd Jython, gevolgd door de specificatie van de language
 binding en zijn implementatie.
 Ik zal besluiten met het test gedeelte, de discussie, het vooruitzicht
 en de conclusie.
\end_layout

\begin_layout Section
SAGA
\end_layout

\begin_layout Subsection
SAGA
\end_layout

\begin_layout Standard
As mentioned in the introduction, SAGA stands for Simple API for Grid Applicatio
ns.
 SAGA came as an idea in a time when multiple middleware projects and applicatio
ns groups were looking for higher-level programming abstractions and the
 simplification of programming for the grid 
\begin_inset LatexCommand \cite{SAGA}

\end_inset

.
 A SAGA research group (SAGA-RG) was founded within the Global Grid Forum
 (GGF), which later merged into the Open Grid Forum (OGF).
 The aim of the group has been to identify a set of basic grid operations
 and derive a simple consistent API, which eases the development of applications
 that make use of grid technologies.
 
\end_layout

\begin_layout Subsection
Use Cases
\end_layout

\begin_layout Standard
To poll the needs of users, the research group sent out a call for use cases.
 In these use cases users described many subjects such as their application
 area, the desired look and feel of the API and resource, performance, security
 considerations.
 The majority of use cases which were returned came from scientific users
 
\begin_inset LatexCommand \cite{UseCases}

\end_inset

, which probably biased SAGA in the analysis of the use cases towards scientific
 applications.
 In this analysis, the research group focused on the identification of the
 SAGA API scope, on the level of abstraction wanted and needed by the applicatio
n programmers.
 Non-functional requirements and requirements from other projects, such
 as GAT 
\begin_inset LatexCommand \cite{GAT}

\end_inset

 and CoG 
\begin_inset LatexCommand \cite{CoG}

\end_inset

 were also considered.
\end_layout

\begin_layout Subsection
The API
\end_layout

\begin_layout Standard
With 24 use cases available, the requirements from the users could be distilled
 
\begin_inset LatexCommand \cite{ReqAnalysis}

\end_inset

.
 A design team was formed to use these requirements to design and develop
 the API.
 A few general design issues were considered and agree upon.
\end_layout

\begin_layout Itemize
The API would be designed and developed in a object-oriented manner using
 a language-neutral representation.
\end_layout

\begin_layout Itemize
Asynchronicity is prefered to be handled by a polling mechanism rather than
 a subscribe/listen mechanism to make implementations in non-multithreaded
 environment easier.
\end_layout

\begin_layout Itemize
Grid subsystems should be specified independent from each other to allow
 independent development and implementation of parts of the API.
\end_layout

\begin_layout Itemize
Sessions and Security should be an essential part of SAGA since applications
 often run accros administrative domains and security boundaries.
\end_layout

\begin_layout Itemize
Data Management like remote file access and replica catalogs are also an
 important part of grid applications and should therefore also be in SAGA.
\end_layout

\begin_layout Itemize
Remote jobs and asynchronous operations are a common requirement for grid
 applications and must be supported in the API.
\end_layout

\begin_layout Itemize
SAGA should support interprocess communication as a stream concept, similar
 to BSD sockets.
\end_layout

\begin_layout Standard
Ultimately, the purpose of SAGA is to provide an simple API that can be
 used with much less effort compared to the vanilla interfaces of existing
 grid middleware.
 A guiding principle for achieving this simplicity is the 80/20 rule: serve
 80% of the use cases with 20% of the effort needed for serving 100 % of
 all possible requirements and to provide a standardized, common interface
 across various grid middleware systems and their versions.
 
\end_layout

\begin_layout Standard
After determining the requirements, a so-called SAGA Strawman API was developed
 to accomodate the requirements and after some iterations SAGA was released
 in January 2008 
\begin_inset LatexCommand \cite{GFD.90}

\end_inset

.
 SAGA is described in a document called 
\emph on

\begin_inset Quotes eld
\end_inset

A Simple API for Grid Applications (SAGA)
\begin_inset Quotes erd
\end_inset

 
\emph default
or GFD.90.
 GFD.90 specifies the core components of SAGA has formed the basis of specificati
on of the Python language-binding, which will be explained in section 
\begin_inset LatexCommand \ref{sec:Specification}

\end_inset

, and the reference implementations.
 It is aimed at implementors of the API and not directly at end-users.
 The end-users can use the documentation and specific language-bindings
 given by the implementors of the reference implentations.
 The document holds much information about the complete SAGA project but
 what is interesting for building a language-binding is stated in section
 3 and 4 of GFD.90.
 These sections consist of a number of interface and class specifications,
 which are divided in multiple packages.
 
\end_layout

\begin_layout Standard
The packages in Look & Feel part consist of:
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Buffer
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Session
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Context
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Permission
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Attributes
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Task
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Monitoring
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab: LF}

\end_inset

Look and Feel packages
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Errors
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard
Url
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Buffer
\end_layout

\end_inset
</cell>
</row>
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Session
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Context 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Permission 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Attributes 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Task
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard
Monitoring
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
The API packages consist of:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Job
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Namespace
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
File
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Replica
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Streams
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
RPC
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
OMII-UK
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \cite{OMII-UK}

\end_inset

 
\end_layout

\begin_layout Subsection
OGF
\end_layout

\begin_layout Subsection
Previous Work
\end_layout

\begin_layout Subsection
Java SAGA Reference Implementation
\end_layout

\begin_layout Subsection
C++ SAGA Reference Implementation
\end_layout

\begin_layout Subsection
Adaptors - JavaGAT
\end_layout

\begin_layout Subsection
Adaptors
\end_layout

\begin_layout Section
Python
\end_layout

\begin_layout Subsection
Explain Python
\end_layout

\begin_layout Subsection
Special Syntax Features
\end_layout

\begin_layout Subsubsection
Named Parameters
\end_layout

\begin_layout Subsubsection
Overloading
\end_layout

\begin_layout Subsubsection
Dynamic Typing
\end_layout

\begin_layout Subsubsection
Extending Python
\end_layout

\begin_layout Subsection
Jython
\end_layout

\begin_layout Subsection
Difference Jython - Python
\end_layout

\begin_layout Section
Specification
\begin_inset LatexCommand \label{sec:Specification}

\end_inset


\end_layout

\begin_layout Subsection
All Modules Specified with Design Decisions
\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
Previous work // Solutions Tested
\end_layout

\begin_layout Subsection
Delegate Object
\end_layout

\begin_layout Subsection
Convert Exception
\end_layout

\begin_layout Subsection
Tasks
\end_layout

\begin_layout Subsection
Inheritance
\end_layout

\begin_layout Subsection
Get_id()
\end_layout

\begin_layout Subsection
All Modules Specified with Design Decisions
\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Subsection
Test Environment
\end_layout

\begin_layout Subsection
scripts
\end_layout

\begin_layout Subsection
Bugs
\end_layout

\begin_layout Subsection
Repository
\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Section
Future Work
\end_layout

\begin_layout Subsection
Synchronize specification with LSU
\end_layout

\begin_layout Subsection
Extending the API
\end_layout

\begin_layout Standard
Extention packages
\end_layout

\begin_layout Subsection
Special Python operators
\end_layout

\begin_layout Subsection
Updating Implementation with new Reference Implementations
\end_layout

\begin_layout Section
List of Frequently Used Terms
\end_layout

\begin_layout Itemize
API: Application Programming Interface.
 A set of variables, methods and classes that is offered by an operating
 system or software library to support requests made by computer programs.
 
\end_layout

\begin_layout Itemize
Grid: A collection of interconnected computers consisting of different hardware,
 placed in different locations and belonging to different organizations.
 
\end_layout

\begin_layout Itemize
Grid Aware: Applications which are grid aware are designed to run on a grid
 and use the possibilities of the grid, such as distributing workload between
 available nodes in the grid.
 
\end_layout

\begin_layout Itemize
Language Binding: An API in a specific programming language which gives
 access to a library or service
\end_layout

\begin_layout Itemize
Reference Implementation: Software which implements the functionality described
 by SAGA.
 New applications can link to this software and call methods described in
 SAGA to use the grid.
 
\end_layout

\begin_layout Itemize
SAGA: Simple API for Grid Applications 
\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Section
Bibliography
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[bibtotoc,plain]{Thesis}

\end_inset


\end_layout

\begin_layout Section
Acknowledgments
\end_layout

\begin_layout Section
Appendix A: Installing and Running JySaga
\end_layout

\begin_layout Section
Appendix B: Proof of a Higgs-boson
\end_layout

\end_body
\end_document
