#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble
%% LyX 1.5.3 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.



\makeatletter

\makeatother
\usepackage{url}
\end_preamble
\language english
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize 11
\spacing single
\papersize a4paper
\use_geometry true
\use_amsmath 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\headheight 1in
\headsep 1in
\footskip 0.5in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 2 0 8 -1
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title

\size larger
Specification and Implementation of the SAGA Python Language Binding
\size normal

\newline
 Computer Science Master Thesis
\size larger
 
\end_layout

\begin_layout Author
P.F.A.
 van Zoolingen
\size normal

\newline
 1284657, pzn400@few.vu.nl
\end_layout

\begin_layout Abstract
This thesis describes how we created a Python language binding for SAGA,
 the Simple API for Grid Applications, and how we implemented the language
 binding on top of the Java reference implementation.
 Using this functionality, Python programmers can use SAGA to program grid-aware
 applications and shield themselves from all the details which come with
 grids.
 The language binding and its implementation add to the adoption of SAGA
 in a world of with many different APIs and middleware layers.
 The specification is a set of classes and methods called PySaga and the
 implementation on top of the Java reference implementation is called JySaga.
 PySaga is available in source code and in HTML documentation.
 JySaga is has been tested and runs on top of the SAGA Java reference implementa
tion.
 JySaga is available as source code, together with the unit tests.
 
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \tableofcontents{}

\end_inset


\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This section contains the introduction to this thesis.
 It is written in both English and Dutch.
\end_layout

\begin_layout Subsection
Introduction English
\end_layout

\begin_layout Standard
SAGA stands for Simple API for Grid Applications 
\begin_inset LatexCommand \cite{SAGA}

\end_inset

, and was developed to offer users a simple tool to program applications
 for heterogeneous grids.
 These grids often consist of different types of hardware, operating systems
 and middleware software and are hard to program.
 SAGA is developed to be independent of any underlying hardware or software
 and it shields the user from all the details, and lets him focus on programming
 grid aware applications themselves.
\end_layout

\begin_layout Standard
To use the SAGA API, the functionality described by SAGA 
\begin_inset LatexCommand \cite{GFD.90}

\end_inset

 has to be implemented by another piece of software: the SAGA implementation.
 Currently, there are two different reference implementations which are
 programmed in the programming languages Java 
\begin_inset LatexCommand \cite{SJava}

\end_inset

 and C++ 
\begin_inset LatexCommand \cite{C++SAGA}

\end_inset

.
 In a general sense, only Java and C++ applications can use the SAGA implementat
ions to access the grid in an easy way.
 This thesis describes how we added another language to that list, namely
 Python 
\begin_inset LatexCommand \cite{python}

\end_inset

.
 Python is partially supported by the C++ reference implementation, but
 there is no specific Python language binding available.
 A language binding is a set of classes and methods which describes the
 SAGA functionality in a Python-specific way, independent of the chosen
 reference implementation.
 During the course of this master project we have specified the Python language
 binding and implemented the language binding for the Java reference implementat
ion.
\end_layout

\begin_layout Standard
This thesis is divided into different parts.
 First we will describe and explain in Section 
\begin_inset LatexCommand \ref{sec:SAGA}

\end_inset

 what SAGA is, where it comes from and how it is implemented.
 Then we will continue in Section 
\begin_inset LatexCommand \ref{sec:Python}

\end_inset

 with a description of Python and a special implementation of Python called
 Jython, followed by the specification of the language binding, Section
 
\begin_inset LatexCommand \ref{sec:Specification}

\end_inset

 and its implementation in Section 
\begin_inset LatexCommand \ref{sec:Implementation}

\end_inset

.
 After that we will describe the testing processes of the language binding
 in Section 
\begin_inset LatexCommand \ref{sec:Testing}

\end_inset

, the discussion of the project in Section 
\begin_inset LatexCommand \ref{sec:Discussion}

\end_inset

, the future work is Section 
\begin_inset LatexCommand \ref{sec:Future-Work}

\end_inset

 and we will conclude with the conclusion in Section 
\begin_inset LatexCommand \ref{sec:Conclusion}

\end_inset

.
\end_layout

\begin_layout Subsection
Introduction Dutch
\end_layout

\begin_layout Standard
SAGA staat voor Simpele API voor Grid Applicaties en is ontwikkeld als een
 simpel stuk gereedschap om het programmeren op heterogene grids te vergemakkeli
jken.
 Dit soort grids bestaan vaak uit verschillende hardware, besturingssystemen
 en middleware software en het is vaak lastig om hier grid applicaties voor
 te programmeren.
 SAGA is ontwikkeld als een aanspreekpunt voor het grid, onafhankelijk van
 de onderliggende hard- en software.
 Tevens houdt de API de programmeur weg bij de onderliggende details, die
 per platform zeer kunnen verschillen.
 De programmeur kan zich hierdoor bezighouden met het programmeren van een
 hogere abstractie niveau voor zijn applicatie.
\end_layout

\begin_layout Standard
Om de API te kunnen gebruiken moet de functionaliteit beschreven door SAGA
 ge
\begin_inset ERT
status inlined

\begin_layout Standard


\backslash
"i
\end_layout

\end_inset

mplementeerd worden door andere software, ook wel de SAGA implementatie
 genoemd.
 Momenteel bestaan twee verschillende referentie implementaties die gemaakt
 zijn in de programmeertalen Java en C++.
 Dit houdt globaal in dat het alleen in de talen C++ en Java mogelijk is
 om een applicatie te programmeren die door middel van SAGA het grid te
 gebruikt.
 Deze master thesis beschrijft hoe daar een derde taal aan toe is gevoegd,
 namelijk Python.
 Python word op dit moment al deels ondersteund door de C++ referentie implement
atie, maar er is nog geen Python 'language binding' gespecificeerd die de
 syntax voor Python applicaties vastlegt.
 De language binding specificeerd een set van klassen en methodes die de
 SAGA functionaliteit beschrijft in een Python specifieke manier, onafhankelijk
 van de onderliggende referentie implementatie.
 Tijdens mijn master project heb ik een Python language binding voor SAGA
 gespecificeerd en ge
\begin_inset ERT
status inlined

\begin_layout Standard


\backslash
"i
\end_layout

\end_inset

mplementeerd bovenop de Java referentie implementatie.
 Deze implementatie zou in theorie moeten werken op elke Java implementatie
 van SAGA.
 
\end_layout

\begin_layout Standard
Deze thesis is onderverdeeld in verschillende delen.
 Eerst zal ik uitleggen wat SAGA is, waar het vandaan komt en hoe het ge
\begin_inset ERT
status inlined

\begin_layout Standard


\backslash
"i
\end_layout

\end_inset

mplementeerd is.
 Ik zal doorgaan met een beschrijving van Python en een specifieke implementatie
 van Python genaamd Jython, gevolgd door de specificatie van de language
 binding en zijn implementatie.
 Daarna zal ik het testen van de language binding bespreken, de discussie
 van het project, het mogelijke vervolg onderzoek na dit project en besluiten
 met de conclusie.
\end_layout

\begin_layout Section
List of Frequently Used Terms
\end_layout

\begin_layout Description
API: Application Programming Interface.
 A set of variables, methods and classes that is offered by an operating
 system or software library to support requests made by computer programs.
 
\end_layout

\begin_layout Description
Grid: A collection of interconnected computers consisting of different hardware,
 placed in different locations and belonging to different organizations.
 
\end_layout

\begin_layout Description
Grid-aware: Applications which are grid aware are designed to run on a grid
 and use the possibilities of the grid, such as distributing workload between
 available nodes in the grid.
 
\end_layout

\begin_layout Description
Language\InsetSpace ~
Binding: An API in a specific programming language which gives access
 to a library or service
\end_layout

\begin_layout Description
SAGA\InsetSpace ~
reference\InsetSpace ~
implementation: First working software that implements the
 functionality described by SAGA.
 New applications can link to this software and call methods described in
 SAGA to use the grid.
\end_layout

\begin_layout Description
SAGA: Simple API for Grid Applications 
\end_layout

\begin_layout Section
SAGA
\begin_inset LatexCommand \label{sec:SAGA}

\end_inset


\end_layout

\begin_layout Standard
In this section we will describe what SAGA is, how it was created and the
 packages it consists of.
 In the last part we will discuss the Java and C++ reference implementations
 and how they work.
\end_layout

\begin_layout Subsection
Short History of SAGA
\end_layout

\begin_layout Standard
SAGA stands for Simple API for Grid Applications.
 SAGA came as an idea in a time when multiple middleware projects and applicatio
n groups were looking for higher-level programming abstractions and the
 simplification of programming for the grid 
\begin_inset LatexCommand \cite{SAGA}

\end_inset

.
 A SAGA research group (SAGA-RG) was founded within the Global Grid Forum
 (GGF), which later merged into the Open Grid Forum (OGF).
 The aim of the group has been to identify a set of basic grid operations
 and derive a simple, consistent API, which eases the development of application
s that make use of grid technologies.
 
\end_layout

\begin_layout Standard
To poll the needs of users, the research group sent out a call for use cases.
 In these use cases users described many subjects such as their application
 area, the desired look and feel of the API, and resource, performance and
 security considerations.
 The majority of use cases which were returned came from scientific users
 
\begin_inset LatexCommand \cite{UseCases}

\end_inset

, which probably biased SAGA in the analysis of the use cases towards scientific
 applications.
 In this analysis, the research group focused on the identification of the
 SAGA API scope, on the level of abstraction wanted and needed by the applicatio
n programmers.
 Non-functional requirements and requirements from other projects, such
 as GAT 
\begin_inset LatexCommand \cite{GAT}

\end_inset

 and CoG 
\begin_inset LatexCommand \cite{CoG}

\end_inset

 were also considered.
\end_layout

\begin_layout Standard
With 24 use cases available, the requirements from the users could be distilled
 
\begin_inset LatexCommand \cite{ReqAnalysis}

\end_inset

.
 A design team was formed to use these requirements to design and develop
 the API.
 A few general design issues were considered and agreed upon.
\end_layout

\begin_layout Itemize
The API would be designed and developed in an object-oriented manner using
 a language-neutral representation.
\end_layout

\begin_layout Itemize
Grid subsystems should be specified independently from each other to allow
 independent development and implementation of parts of the API.
\end_layout

\begin_layout Itemize
Sessions and security should be an essential part of SAGA since applications
 often run across administrative domains and security boundaries.
\end_layout

\begin_layout Itemize
Data management, like remote file access and replica catalogs are an important
 part of grid applications and should therefore be part of SAGA.
\end_layout

\begin_layout Itemize
Remote jobs and asynchronous operations are a common requirement for grid
 applications and must be supported in the API.
\end_layout

\begin_layout Itemize
Asynchronicity is preferred to be handled by a polling mechanism rather
 than a subscribe/listen mechanism to simplify implementations in non multi-thre
aded environments.
\end_layout

\begin_layout Itemize
SAGA should support inter-process communication as a stream concept, similar
 to BSD sockets.
\end_layout

\begin_layout Standard
Ultimately, the purpose of SAGA is to provide an simple API that can be
 used with much less effort compared to the vanilla interfaces of existing
 grid middleware.
 A guiding principle for achieving this simplicity is the 80/20 rule: serve
 80% of the use cases with 20% of the effort needed for serving 100 % of
 all possible requirements and to provide a standardized, common interface
 across various grid middleware systems and their versions.
 
\end_layout

\begin_layout Standard
After determining the requirements, a so-called SAGA Strawman API was developed
 to accommodate the requirements and after some iterations the SAGA API
 was published in January 2008 
\begin_inset LatexCommand \cite{GFD.90}

\end_inset

.
 SAGA is described in a document called 
\emph on

\begin_inset Quotes eld
\end_inset

A Simple API for Grid Applications (SAGA)
\begin_inset Quotes erd
\end_inset

 
\emph default
or GFD.90.
 GFD.90 specifies the core components of SAGA.
 It has formed the basis of specification of the Python language binding,
 which will be explained in Section 
\begin_inset LatexCommand \ref{sec:Specification}

\end_inset

, and the reference implementations.
 It is aimed at implementors of the API and not directly at end users.
 The implementors of the reference implementations can supply the end users
 with the documentation and specific language bindings.
\end_layout

\begin_layout Subsection
SAGA API 
\end_layout

\begin_layout Standard
SAGA is divided into two parts.
 The first part is the Look and Feel part which contains the base classes
 and interfaces.
 The second part is the API part which represents explicit entities and
 actions of some backend system.
\end_layout

\begin_layout Subsubsection
Look and Feel
\end_layout

\begin_layout Standard
The SAGA Look & Feel is defined by a number of classes and interfaces which
 together ensure the non-functional properties of the SAGA API.
 Non-functional requirements are requirements that specify criteria that
 can be used to judge the operation of a system, rather than specific behaviors.
\end_layout

\begin_layout Standard
The interfaces and classes from the Look and Feel are intended to be used
 by the functional SAGA API packages
\end_layout

\begin_layout Description
Error The Error package contains all the exceptions which can raised or
 thrown by SAGA API calls.
 GFD.90 also describes an 
\family typewriter
error_handler
\family default
 which allows a user of the API to query for the latest error associated
 with a SAGA object.
 Error handlers should not be included in language bindings of languages
 which have exception handling capabilities of their own, such as Python.
\end_layout

\begin_layout Description
Object The 
\family typewriter
Object
\family default
 package provides mechanisms which are needed by all SAGA objects, such
 as cloning and getting the type, ID and Session of the object.
 The 
\family typewriter
Object
\family default
 class is also called the 
\emph on
base object
\end_layout

\begin_layout Description
URL The 
\family typewriter
URL
\family default
 object is used to reference local and remote resources.
 Using a separate 
\family typewriter
URL
\family default
 object simplifies the construction, parsing and checking of URLs in application
s and unifies the signatures of SAGA method calls that accept URLs.
\end_layout

\begin_layout Description
Buffer SAGA has a generic buffer object that is designed as a container
 for data.
 
\family typewriter
Buffer
\family default
 is used in combination with a number of SAGA calls that perform byte-level
 I/O operations.
 The data can be either allocated and maintained in application memory or
 be managed by the SAGA implementation.
\end_layout

\begin_layout Description
Session The Session object provides the functionality to interactively exchange
 information between two computers and isolates independent sets of SAGA
 objects from each other.
 Sessions support the management of security information by using contexts.
\end_layout

\begin_layout Description
Context The 
\family typewriter
Context
\family default
 class is a container for security information and is attached to a 
\family typewriter
Session
\family default
 object to make the information available to all objects instantiated in
 that session.
 Multiple contexts can co-exist in one session for different method calls
 and can be shared between sessions.
 
\end_layout

\begin_layout Description
Permission The 
\family typewriter
permission
\family default
 package contains an interface to let applications allow or deny specific
 operations on SAGA objects or grid entities for different types of users.
 Because it is difficult to anticipate how different types of middleware
 handle these permissions, applications using the 
\family typewriter
permission
\family default
 package are not expected to be fully portable between SAGA applications.
 In addition, each implementation must specify which permissions it supports
 and for which operations.
\end_layout

\begin_layout Description
Attributes The 
\family typewriter
attributes
\family default
 package provides an interface for storing and retrieving attributes associated
 with SAGA objects.
 The supported attributes of an object are included in the description of
 the object in the language binding.
 
\end_layout

\begin_layout Description
Monitoring The 
\family typewriter
monitoring
\family default
 package provides a mechanism to monitor certain properties of monitorable
 SAGA objects by exposing metrics to the application.
 These metrics which represent monitorable entities, such as state or CPU
 time used.
 Steerable objects even allow certain metric values to be changed.
 An example of a monitorable object is a 
\family typewriter
Task.
 
\family default
The 
\family typewriter
Task 
\family default
object has a 
\family typewriter
task.state
\family default
 metric which can be monitored.
 If a special object, called a 
\family typewriter
Callback
\family default
, is attached to the task and the state changes, the SAGA implementation
 calls the 
\family typewriter
cb()
\family default
 method of the 
\family typewriter
Callback
\family default
 to respond to the state change of the task.
\end_layout

\begin_layout Description
Task The last package of the Look and Feel is 
\family typewriter
task
\family default
.
 Tasks are representations of asynchronous operations and each SAGA object
 that implements the 
\family typewriter
async
\family default
 interface is obliged to offer synchronous and asynchronous method calls.
 
\end_layout

\begin_layout Subsubsection
API Packages
\end_layout

\begin_layout Standard
The interfaces, classes and methods defined in the API or functional packages
 of GFD.90 are, in general, representing explicit entities and actions of
 some backend system.
 The currently specified packages are shown below, but new packages may
 be added in the future.
\end_layout

\begin_layout Description
Job The 
\family typewriter
job
\family default
 package offers the functionality to submit jobs to grid resources and to
 monitor and control these jobs.
 Job submission can be done in batch mode or interactive mode.
 Jobs are controlled through different method calls such as 
\family typewriter
run()
\family default
 and 
\family typewriter
suspend()
\family default
.
 Status information can be retrieved for both running and completed jobs.
 
\end_layout

\begin_layout Description
Namespace The 
\family typewriter
namespace
\family default
 package describes notions of hierarchical namespace entries and directories.
 These 
\family typewriter
NSEntry
\family default
 and 
\family typewriter
NSDirectory 
\family default
objects allow to navigate through a namespace such as a file system.
 Operations like moving, renaming, copying or removing these namespace entries
 are also supported.
\end_layout

\begin_layout Description
File The 
\family typewriter
file
\family default
 package is an extension of the 
\family typewriter
namespace
\family default
 package and, in addition to all the operations from 
\family typewriter
namespace
\family default
, allows access to the contents of the files regardless of their location.
 It also offers the Scattered, Pattern-Based and Extended I/O paradigms.
\end_layout

\begin_layout Description
Logicalfile The 
\family typewriter
logicalfile
\family default
 package describes the interaction with replica systems, especially logical
 files, logical directories and creating replicas.
 A logical file is a namespace entry with some metadata and associated set
 of physical replica files.
 A replica (or physical file) is a file which is registered on a logical
 file.
 In general, all replicas registered on the same logical file are identical,
 but can be on different machines in the grid.
 
\end_layout

\begin_layout Description
Stream The 
\family typewriter
stream
\family default
 package specifies the functionality to create simple, remote sockets to
 establish connections between components.
 These components can then form a distributed application together.
\end_layout

\begin_layout Description
RPC The Remote Procedure Call (RPC) or 
\family typewriter
rpc
\family default
 package specifies operations to execute code on other machines.
 This is done by invoking methods on different machines.
 A high level API called GridRPC 
\begin_inset LatexCommand \cite{GridRPC}

\end_inset

 is imported into SAGA and adapted to the SAGA look and feel.
 Semantically, GridRPC maps to the RPC package.
\end_layout

\begin_layout Subsection
Reference Implementations
\end_layout

\begin_layout Standard
SAGA currently has two reference implementations, one written in Java and
 one written in C++.
 In this section we will explain what they are and how they work.
\end_layout

\begin_layout Subsubsection
Java SAGA Reference Implementation
\end_layout

\begin_layout Standard
After GFD.90 was released in January 2008, a Java SAGA reference implementation
 was created at the Vrije Universiteit and released in September 2008 
\begin_inset LatexCommand \cite{SJava}

\end_inset

.
 It is largely based on JavaGAT 
\begin_inset LatexCommand \cite{JavaGAT}

\end_inset

, a toolkit which provides a high-level, middleware-independent interface
 to grids.
 JavaGAT is the reference implementation for the GAT API 
\begin_inset LatexCommand \cite{GAT}

\end_inset

, which shares many goals with SAGA.
 Common goals are the aim to make it easier for grid users to create complex
 grid applications and to shield them from the underlying middleware.
 The structure of JavaGAT can be seen in figure 
\begin_inset LatexCommand \ref{fig:JavaGAT structure}

\end_inset

.
\family typewriter

\begin_inset Float figure
placement t
wide true
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Pictures/JavaGATFigure.eps
	scale 50

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:JavaGAT structure}

\end_inset

The structure of the JavaGAT implementation, taken from 
\begin_inset LatexCommand \cite{JavaGAT}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Java SAGA reference implementation consists of different layers which
 all have its own responsibility.
 The top layer is the API that serves as the interface to the user.
 Below the API resides the engine.
 The engine is responsible for delegating the API calls to the correct middlewar
e.
 The Capability Provider Interface is the layer which connects the engine
 to middleware specific software, called 
\emph on
adaptors
\emph default
.
 When the engine receives a request, e.g., to copy a file, it selects the
 right adaptor with help from the CPI.
 The adaptor then delegates the copy request to the actual middleware that
 copies the file.
 
\end_layout

\begin_layout Standard
Principles used from JavaGAT in the SAGA Java reference implementation include
 intelligent dispatching, nested exceptions and the adaptor writing framework.
 Intelligent dispatching is the process where the engine chooses the correct
 adaptor for the requested action and the related preferences.
 First JavaGAT looks at the preferences specified by the user and all the
 adaptors.
 Adaptors that do not match or are unsuitable with these preferences are
 filtered out of the list to execute this specific method call.
 The adaptors that are not filtered out are instantiated by calling their
 constructors.
 Adaptors which threw an exception are then filtered out and the exception
 is added to the nested exception (see below).
 The list with instantiated adaptors is then sorted by using a 
\emph on
adaptor ordering policy 
\emph default
to specify which adaptor should be tried first to execute the method call.
 Each adaptor is then tried until one of them succeeds.
 If none succeeds, the nested exception is thrown.
\end_layout

\begin_layout Standard
Nested exceptions are special aggregations of exceptions which come from
 the different adaptors.
 Adaptors might raise exceptions when they fail at a certain action or do
 not implement the requested action.
 All these exceptions are stored in a nested exception which is only thrown
 to the grid application after every adaptor failed at fulfilling the request.
 
\end_layout

\begin_layout Standard
The adaptor writing framework makes it easy for users to write or change
 adaptors with little effort.
 This is an advantage because there are many middleware systems available
 and they are changing often.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Pictures/JavaSAGAOverview.png
	lyxscale 50
	width 70page%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:JSAGAStructure}

\end_inset

The structure of the Java SAGA reference implementation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Java reference implementation implements SAGA completely since this
 is a requirement in the SAGA specification to be called fully compliant.
 Implementation which do not implement all specified methods are called
 partially compliant.
 There are still some deviations from GFD.90, such as symbolic links and
 permissions.
 Java does not have a notion of symbolic links and permissions so it is
 not possible to include them.
 If methods relating to them are called, the implementation will throw a
 
\family typewriter
NotImplementedException
\family default
.
 The implemented Java language binding also contains small extensions like
 file streams and using RPC with objects instead of using byte arrays.
\end_layout

\begin_layout Standard
Adaptors currently included with the Java reference implementation are XMLRPC
 for RPC, Socket for streams, Gridsam for jobs, and adaptors from JavaGAT.
 There are 39 adaptors available divided in different file, logical file,
 resource broker, monitorable and endpoint adaptors.
 More information can be found at 
\begin_inset LatexCommand \cite{JGATAdaptors}

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
C++ SAGA Reference Implementation
\end_layout

\begin_layout Standard
Before the GFD.90 specification for SAGA was released, a group at the Louisiana
 State University 
\begin_inset LatexCommand \cite{LSU}

\end_inset

 started to build a C++ reference implementation 
\begin_inset LatexCommand \cite{C++SAGA}

\end_inset

.
 People from that group were also involved in the SAGA design process and
 the development of GAT, and pioneered in implementing a SAGA C++ implementation.
 This implementation works in a similar way as the Java implementation.
 It also includes call routing through to the adaptors, the probing of multiple
 adaptors and the variable adaptor strategies.
 In addition, it tries latency hiding strategies such as bulk optimization
 and automatic load distribution over multiple adaptors.
\end_layout

\begin_layout Standard
The C++ reference implementation offers wrappers for C and Python, but they
 are in alpha stage and therefore not fully functional.
 A Python language binding is not available and the wrapper closely follows
 the syntax of the underlying C++ layer.
 The Python language binding described in this thesis is specified top-down
 from the SAGA specification, where as the wrapper to C++ is designed bottom-up
 from the implementation.
 For a discussion, see Section 
\begin_inset LatexCommand \ref{sec:Discussion}

\end_inset

.
\end_layout

\begin_layout Section
Python
\begin_inset LatexCommand \label{sec:Python}

\end_inset


\end_layout

\begin_layout Standard
The Python language binding for SAGA is a specification of the classes and
 methods defined by SAGA in the programming language Python.
 In this section we will explain fundamentals of Python and how it influenced
 the specification.
 
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \label{sub:Introduction-to-Python}

\end_inset

Introduction to Python
\end_layout

\begin_layout Standard
Python was created in 1989 by Guido van Rossum who was working at the Centrum
 voor Wiskunde en Informatica (CWI) in the Netherlands.
 He worked on the programming language ABC, but needed some extra features.
 Not wanting to fall back to C, he created his own language called Python.
 
\end_layout

\begin_layout Standard
Python is a high-level, interpreted scripting language.
 It is object-oriented, but also borrows some features from functional languages.
 Python uses whitespace to define the blocks of code where other languages
 would use brackets.
 Python uses whitespace to improve readability.
 The Python interpreter is written in C, sometimes called CPython, and can
 be extended by writing new modules or by writing and compiling special
 C modules for it.
 Because the interpreter is written in C, it is portable to platforms which
 support the ANSI C compiler.
 Scripts have to be written only once to be run on many platforms.
 Some projects have rewritten the interpreter in different programming languages
 to take advantage of the distinct features of the language.
 These projects include Jython (an interpreter written in Java) and IronPython
 (an interpreter written in C#).
 According to estimations 
\begin_inset LatexCommand \cite{ProgLang}

\end_inset

, Python is the sixth most popular programming language after Java, C, C++,
 VB and PHP.
 This rating is based on information from search engines, engineers and
 companies world-wide.
 Together with Java, C++ and C, support for Python will give users four
 programming languages to choose from to develop applications using SAGA.
\end_layout

\begin_layout Subsection
Syntax Features
\end_layout

\begin_layout Standard
In this section we will explain several Python specific features we used
 in the SAGA Python language binding and how these syntax features influenced
 the language binding.
\end_layout

\begin_layout Subsubsection
Dynamic Typing
\end_layout

\begin_layout Standard
Python uses dynamic typing, which means that the type of a variable is bound
 to the type of the variable value, and can change regularly.
 In static typing, the type is set when the variable is created and cannot
 be changed afterwards.
 Dynamic typing gives new possibilities when dealing with return values
 and parameter types.
 A commonly heard term is that Python uses 'Duck Typing' (
\begin_inset Quotes eld
\end_inset

If it looks like a duck and quacks like a duck, it must be a duck.").
 This means that calling a method of an object is always possible.
 Whether it actually succeeds or results in a runtime error depends on the
 object.
 In this context it means that if you can call 
\family typewriter
quack()
\family default
 and 
\family typewriter
walk()
\family default
 on an object, the type was probably 
\family typewriter
Duck
\family default
.
 If it gave a runtime error, the object was definitely not a 
\family typewriter
Duck
\family default
.
 There are however, ways to check the type of a variable, like 
\family typewriter
type(), isinstance(), issubclass()
\family default
 or 
\family typewriter
variable.__class__
\family default
 .
\end_layout

\begin_layout Subsubsection
Keywords and built-ins
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{sub:Keywords-and-builtins}

\end_inset

Python has reserved keywords just like every programming language.
 Most of these are similar to other languages, but Python has some specific
 ones which are also used in the SAGA specification.
 In SAGA's 
\family typewriter
Permission
\family default
 enum 
\family typewriter
Exec
\family default
 and 
\family typewriter
None
\family default
 are mentioned, but both 
\family typewriter
exec
\family default
 and 
\family typewriter
None
\family default
 are reserved.
 Defining all constants lowercase would give problems with the reserved
 keyword 
\family typewriter
exec
\family default
 while declaring all constants in CapWords gives problems with the keyword
 
\family typewriter
None
\family default
.
 Although Python is case-sensitive, this gives problems when defining a
 consequent naming scheme.
 
\end_layout

\begin_layout Standard
Python also has some standard functions which are available.
 These include functions like 
\family typewriter
list()
\family default
, 
\family typewriter
tuple()
\family default
, 
\family typewriter
dir()
\family default
 and 
\family typewriter
type()
\family default
.
 SAGA has some parameters names which interfere with the built in methods,
 such as 
\family typewriter
type
\family default
 in the 
\family typewriter
Metric 
\family default
constructor.
\end_layout

\begin_layout Subsubsection
Methods
\end_layout

\begin_layout Standard
Methods are defined in Python by using the 
\family typewriter
def
\family default
 keyword followed by the method name and the parameters in brackets.
 
\family typewriter
def
\family default
 defines a method, but can also be used to overwrite a previously defined
 method with the same name.
 This makes it impossible to do overloading.
 Overloading is defining multiple methods with the same name but only differing
 in parameter types.
 The same effect can still be achieved in Python since the parameter type
 is not defined in the method declaration.
 It does give difficulties where the SAGA specification has overloaded methods
 with completely different sets of parameter types.
 An example of an overloaded method is the 
\family typewriter
copy()
\family default
 method from the 
\family typewriter
NSEntry
\family default
 and 
\family typewriter
NSDirectory
\family default
 classes in SAGA's 
\family typewriter
namespace
\family default
 package.
 The method has a slightly different meaning in both classes.
 
\end_layout

\begin_layout Subsubsection*
Multiple Return Values
\end_layout

\begin_layout Standard
Python also supports returning multiple variables from one method call opposed
 to many other languages.
 This removes the need for using special objects that hold multiple variables,
 or special global variables.
 The actual returned type is a special read-only list called a tuple, but
 users can use multiple variables to automatically unpack the tuple among
 the variables.
 See Algorithm 
\begin_inset LatexCommand \ref{alg: multi ret values}

\end_inset

 for an example.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Standard

\family typewriter
def method():
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
variable1 = 'a String'
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
variable2 = 2
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
return variable1, variable2
\newline
 
\end_layout

\begin_layout Standard

\family typewriter
var1, var2 = method()
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{alg: multi ret values}

\end_inset

Example of multiple return values in Python
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since the variables are dynamically typed, the same method can return multiple
 variables of different types.
 This feature is for example used in the 
\family typewriter
JobService.run_job() 
\family default
method, which returns the job and three handles to the standard input, output
 and error.
\end_layout

\begin_layout Subsubsection*
Default Parameter Values
\end_layout

\begin_layout Standard
In Python it is possible to specify default values for parameters in the
 method definition.
 Default values for parameters are optional.
 If a method definition has parameters with default values, those parameters
 need to be placed behind the parameters without default values.
 Python needs this order to determine which given value in the method call
 belongs to which parameter.
 See Algorithm 
\begin_inset LatexCommand \ref{alg:Expl-defparameters}

\end_inset

 for an example.
 In the example, the 
\family typewriter
pass
\family default
 statement does nothing, but leaving the method empty will result in a syntax
 error.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Standard

\family typewriter
def write( buffer, size=3, offset=5):
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
pass
\newline

\end_layout

\begin_layout Standard

\family typewriter
write( buf )
\end_layout

\begin_layout Standard

\family typewriter
write( buf, 3 )
\end_layout

\begin_layout Standard

\family typewriter
write( buf, 3, 5 )
\end_layout

\begin_layout Standard

\family typewriter
write( buf, offset=5 )
\end_layout

\begin_layout Standard

\family typewriter
write( offset=5, size=3, buffer=buf)
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{alg:Expl-defparameters}

\end_inset

Example of default parameters in Python.
 Each 
\family typewriter
write()
\family default
 call has exactly the same parameter values.
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Named Parameters
\end_layout

\begin_layout Standard
In Algorithm 
\begin_inset LatexCommand \ref{alg:Expl-defparameters}

\end_inset

, the last two 
\family typewriter
write()
\family default
 calls explicitly define the parameter names.
 This explicit naming of the parameters allows that, when dealing with a
 large amount of defaulted parameters, programmers can specify which parameters
 they want to change in the method call instead of specifying all the parameters.
 An example is shown in Algorithm 
\begin_inset LatexCommand \ref{alg:Example-of-explicitly}

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Standard

\family typewriter
def method( first=1, second=2, third=3, last = '4'):
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
pass
\newline

\end_layout

\begin_layout Standard

\family typewriter
method ( last = 'final')
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{alg:Example-of-explicitly}

\end_inset

Example of explicitly naming the parameters
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To improve usability in the Python language binding, deciding about the
 order of the defaulted parameters is an interesting issue.
 A 
\family typewriter
File.read()
\family default
 call from the SAGA specification defined as 
\family typewriter
read(size='-1', buffer=None)
\family default
 has a different parameter order than a 
\family typewriter
File.write()
\family default
 call which is defined as 
\family typewriter
write( buffer, size='-1').
 
\family default
This looks inconsistent, but is done because a data buffer is needed for
 writing, but is optional for reading.
\end_layout

\begin_layout Subsubsection*
Data Types
\end_layout

\begin_layout Standard
Although Python supports many data types, it misses some types which are
 standard in other languages and are mentioned in GFD.90.
 These include enum, byte and char.
 Characters are just strings with a length of one.
 The array package does have the notion of a character to store strings
 of length one, but there is no separate data type.
\end_layout

\begin_layout Standard
Python also has no notion of an enum, but this can be solved in different
 ways.
 First of all, a class can be constructed containing all the values from
 the enum, such as the Flag enums in the SAGA specification.
 Another solution is to use dictionaries, which have similarities with hashtable
s in other languages.
 Dictionaries are commonly used in Python, but their syntax is less straightforw
ard than using simple objects filled with variables.
 In addition to that, the dictionary has to be put in the class and gives
 an unnecessary long syntax, like 
\family typewriter
Flags.values['READ']
\family default
 instead of 
\family typewriter
Flags.READ
\family default
.
 The values dictionary could be placed in the package, like 
\family typewriter
saga.file.values
\family default
, but would then conflict with the package or module naming scheme.
\end_layout

\begin_layout Standard
The byte data type is missing from Python.
 This causes some confusion how to specify and implement the mutable Buffer
 defined in SAGA.
 The Buffer encapsulates a sequence of bytes to use in read and write operations
 and is an essential part of SAGA.
 A possibility is to deny users to use application managed buffers and use
 implementation managed buffers only, but this would limit the use of Buffers
 in SAGA and exclude a part of SAGA from the language binding.
 There is no standard to use buffers and they are not available in Python.
 Users could write their own buffer library, but it defeats the platform
 independent principle.
 
\end_layout

\begin_layout Standard
A solution was found in using arrays of chars.
 Arrays are guaranteed to contain only the specified data type, and if character
s are read or written they are immediately visible to users.
 Problems may arise if underlying implementations use different encodings
 for the characters, like Unicode, but that should be solved the programmers
 implementing the language binding.
 Suggestions were made by people on the saga-rg mailing list to completely
 remove the buffers since they would be not 
\emph on
pythonesque
\emph default
 or 
\emph on
pythonic
\emph default

\begin_inset Foot
status collapsed

\begin_layout Standard
Although 
\emph on
pythonic
\emph default
 is an extremely vague term, Python programmers generally assume there is
 only one correct way to do something.
 Other solutions are not 
\emph on
pythonic
\emph default
.
\end_layout

\end_inset

.
 We choose not to remove the buffers because of two reasons.
 The first reason is that the SAGA specification demands buffers in the
 SAGA Python language binding to be fully compliant.
 Removing them would result in a partial compliant language binding, which
 was not our goal.
 The second reason is that buffers like rpc's Parameter and file's IOVec
 are needed for specific functionality.
 Removing them would cause problems while solving no problems.
\end_layout

\begin_layout Standard
Like any other programming language, Python has support for numbers.
 Normally programmers will only need an integer to represent whole numbers.
 If the integer overflows because two very large numbers are multiplied,
 Python will automatically switch to a long.
 Longs can be arbitrarily long in Python.
 Internally, the integer in CPython is implemented as a C long and implemented
 as a BigInteger in Jython.
 Python has no double but only a double-precision float.
\end_layout

\begin_layout Subsubsection
Extending Python
\end_layout

\begin_layout Standard
As mentioned in Section 
\begin_inset LatexCommand \ref{sub:Introduction-to-Python}

\end_inset

, it is possible to write libraries for Python and import them dynamically.
 These libraries can be written in Python but it is also possible to write
 them in C or C++.
 It is possible to program a library which is usable by the CPython interpreter
 by using predefined data types and structs.
 The libraries can be used to speedup performance in certain loops, or to
 add functionality to applications which is not available in standard Python.
 The downside of this mechanism is that the switching between the library
 and the interpreter takes some time, which creates a performance hit for
 simple calls, like adding two numbers, that could also be done in standard
 Python.
 The writing of these libraries is not trivial since it uses and converts
 many Python specific data types and specific syntax.
 Dealing with pointers needs to be precise or the library causes segmentation
 faults.
 Fortunately there are tools available which help in this task, such as
 SWIG 
\begin_inset LatexCommand \cite{SWIG}

\end_inset

 and Boost 
\begin_inset LatexCommand \cite{boost.python}

\end_inset

.
 The Boost tool is used in the SAGA C++ reference implementation to create
 their Python wrapper, which makes the SAGA functionality available to Python
 users.
\end_layout

\begin_layout Standard
During the specification of the Python language binding we have used the
 features which are already available in the language and have avoided using
 features which would mean that extra libraries would have to be added.
 The specification can therefore be implemented by using the standard Python
 distribution or derivatives like Jython (see Section 
\begin_inset LatexCommand \ref{sub:Jython}

\end_inset

).
\end_layout

\begin_layout Subsubsection
\begin_inset LatexCommand \label{sub:Version-of-Python}

\end_inset

Versions of Python
\end_layout

\begin_layout Standard
Our Python language binding conforms to the 2.5 version of Python which was
 released in February 2008.
 This does not say whether the underlying implementations of the language
 binding and Python interpreters like Jython accept the full 2.5 syntax.
 The language binding not expected to change or become invalid in upcoming
 versions of Python.
 
\end_layout

\begin_layout Standard
Version 3.0 of Python was released in December 2008.
 This version is incompatible with the previous versions.
 There are some changes which effect our language binding.
 More information can be found in Section 
\begin_inset LatexCommand \ref{sec:Future-Work}

\end_inset

.
\end_layout

\begin_layout Subsection
Jython
\begin_inset LatexCommand \label{sub:Jython}

\end_inset


\end_layout

\begin_layout Standard
The Python reference implementation is not the only interpreter of Python
 source code as there are multiple implementations available.
 Stackless 
\begin_inset LatexCommand \cite{stackless}

\end_inset

 has all the functions of the reference implementation but is internally
 different to let multi-threaded Python applications perform much better.
 The implementation in .Net is called IronPython 
\begin_inset LatexCommand \cite{ironpython}

\end_inset

 and the implementation in Java is called Jython 
\begin_inset LatexCommand \cite{jython}

\end_inset

.
 These implementations allow users to make use of Python and Java or Python
 and .Net, so they can take advantage of features from these languages and
 all tools and libraries which are written in them.
\end_layout

\begin_layout Standard
Writing a SAGA Python reference implementation would take a significant
 amount of time and resources, so it is better to use an existing SAGA implement
ation.
 To let a Python application use the SAGA C++ reference implementation,
 it can access it through the wrapper.
 To let a Python application access the Java implementation, we have to
 use something different than the Python reference implementation.
 The solution for running Python application on top of the SAGA Java reference
 implementation is to run Python applications on the Jython interpreter
 which can use the underlying SAGA Java reference implementation.
\end_layout

\begin_layout Standard
Jython was first called JPython when it was created in late 1997 by Jim
 Hugunin.
 In 2000 it was moved to SourceForge and renamed to Jython.
 Its current version is 2.2.1.
 The 2.5 release is scheduled around the beginning of 2009, and will probably
 have the same features as the 2.5 release of the Python reference implementation.
 
\end_layout

\begin_layout Subsection
Differences between Jython and Python
\end_layout

\begin_layout Standard
Jython and Python interpret the same language, but there are some differences
 between them.
 An out-dated list of them can be found at 
\begin_inset LatexCommand \cite{diffJyPy}

\end_inset

, which shows that differences are mostly in behavior between the two interprete
rs.
 Jython also lacks some built-in modules and modules like Numeric for scientific
 calculations.
 It will always lag behind the reference implementation since new features
 and changes to the language are designed and implemented there first.
 This could become a problem if programmers write programs using the most
 recent syntax.
 In that case, it is possible that the application will not run on Jython.
 
\end_layout

\begin_layout Standard
Jython is also different from CPython because Jython is bound to the restriction
s of the Java language.
 These restrictions include not being able to with operating system specific
 issues such as links and permissions.
\end_layout

\begin_layout Standard
When taking all the differences into account, it should be possible to create
 applications which run on both the CPython and the Jython interpreter as
 long the programmer remembers to keep the differences into account.
 Python applications developed using Jython should certainly run on a recent
 Python reference implementation.
\end_layout

\begin_layout Section
Specification of the SAGA Python Language Binding
\begin_inset LatexCommand \label{sec:Specification}

\end_inset


\end_layout

\begin_layout Standard
This section describes how the specification of the SAGA Python language
 binding was designed and which choices were made in the process.
 Although the complete specification, including all the notes of the 16
 modules, 55 classes and more than 200 methods, would be too much to be
 included within this thesis, we will describe most design decisions.
 The full specification can be found in a subversion repository accessible
 through the PySaga project website 
\begin_inset LatexCommand \cite{apidoc}

\end_inset

.
\end_layout

\begin_layout Subsection
Global Design Decisions
\end_layout

\begin_layout Standard
The specification for the language binding was inspired by three things;
 The GFD.90 
\begin_inset LatexCommand \cite{GFD.90}

\end_inset

 document, the Python style guide 
\begin_inset LatexCommand \cite{styleGuide}

\end_inset

 and suggestions given on the saga-rg mailinglist.
 Since we did not have much experience with Python the people on the mailinglist
 gave us quite some insight about proper syntax and programming constructs.
 The style guide was a good start to set the rules on how the specification
 should look like.
 GFD.90 contained all specifics on SAGA itself and is the primary source
 of information related to SAGA.
 Most naming was directly taken from the document, just as all the documentation.
\end_layout

\begin_layout Standard
The layout of the packages is simple is can be seen in Algorithm 
\begin_inset LatexCommand \ref{alg:LayoutCode}

\end_inset

.
 The root of the package structure is 
\family typewriter
saga
\family default
.
 This is the name of a directory containing all the modules.
 The modules are files with the 
\family typewriter
.py
\family default
 extension and contain the classes which are related to each other and are
 defined as a package in the GFD.90 document.
 Python recognizes this structure of a directory, module files and a special
 
\family typewriter
__init__.py
\family default
 file as a complete package is able to import them.
 For example the URL class can be imported with the statement
\family typewriter
 from saga.url import URL
\family default
.
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Standard

\family typewriter
- saga
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- __init__.py
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- attributes.py
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- buffer.py
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- context.py
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- error.py
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- file.py
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- job.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- logicalfile.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- monitoring.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- namespace.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- object.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- permissions.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- rpc.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- session.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- stream.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- task.py 
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
- url.py
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{alg:LayoutCode}

\end_inset

Layout of the PySaga source code
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
All the document strings in the specification are complemented with special
 statements used by an application called Epydoc 
\begin_inset LatexCommand \cite{epydoc}

\end_inset

.
 Epydoc can generate a browsable version of the language binding which helps
 application programmers designing Python programs using SAGA.
 Almost all documentation in the document strings comes from GFD.90 and is
 adapted to the language binding.
\end_layout

\begin_layout Standard
There are different naming conventions available.
 The CapitalizedWords convention is the convention to start each word in
 a name with a capital letter and to use no space, dash or underscore between
 words.
 The name of the convention is an example of this.
 The all-lowercase convention consists of creating names without capitals
 and without characters between words.
 The all-lowercase with underscores convention uses names in lowercase and
 uses underscores to separate words in a name, like in 
\family typewriter
saga_object
\family default
.
 Names in the UPPERCASE convention consist of words written in capital letters
 and using no characters between the words.
 We have used the CapitalizedWords convention for the naming of classes,
 the all-lowercase convention for package and module names, the all-lowercase
 with underscores for the method names, the parameter names and variable
 names, and the UPPERCASE convention for constants.
 These conventions come from the style guide with the exception of convention
 for constants.
 Using all-lowercase or CapWords would create clashes between some constants
 and reserved keywords as mentioned in Section 
\begin_inset LatexCommand \ref{sub:Keywords-and-builtins}

\end_inset

.
\end_layout

\begin_layout Standard
Interfaces do not exist in Python, but GFD.90 does define them.
 Interfaces are specified as normal classes, with the specified methods
 in them.
 Implementations of the language binding should make sure that instantiating
 an 'interface' class does not work since it makes no sense to do so.
 
\end_layout

\begin_layout Standard
Since enumerations do not exist in Python but GFD.90 does define them, we
 have specified the enums as normal classes in the specification.
 These classes contain the constants from the enums.
 
\end_layout

\begin_layout Standard
We have mapped the possible return types to their Python counterpart, such
 as strings to strings, numbers to ints and arrays to lists.
\end_layout

\begin_layout Standard
To deal with asynchronous methods and the task creation we have added a
 tasktype parameter to all methods in classes which are subclasses of the
 
\family typewriter
Async
\family default
 class.
 This parameter is the last one of all the defined parameters and defaulted
 to 
\family typewriter
TaskType.NORMAL
\family default
.
 This means that by default the method is executed synchronous and returns
 its specified return value and not a 
\family typewriter
Task
\family default
 object.
 By placing the parameter last and by defaulting it, it the syntax of the
 synchronous and asynchronous calls stay consistent and should not interfere
 with each other.
\end_layout

\begin_layout Standard
Get and set methods are not regarded as 
\emph on
pythonic, 
\emph default
but GFD.90 requires them for the language binding to be fully compliant.
 Therefore many class variables on which the getters and setters operate
 can also be accessed through so-called properties.
 In the description of the packages we shall mention the properties where
 they are defined.
 Another reason why getters and setters are included is that some classes
 are subclasses of the 
\family typewriter
async
\family default
 interface.
 This means that the methods defined in the class can be executed synchronously
 and asynchronously.
 By only having the properties, users cannot easily switch between asynchronous
 and synchronous since the specific method is set when defining the properties.
 Therefore, the get and set methods are still needed.
 In the Python language binding specification, only synchronous versions
 of the methods are used to define the properties.
\begin_inset LatexCommand \label{Get-and-set}

\end_inset


\end_layout

\begin_layout Standard
The complete class and interface hierarchy is shown in Figure\InsetSpace ~

\begin_inset LatexCommand \ref{fig:The-PySaga-hierarchy}

\end_inset

.
 The purple blocks are the packages defined in PySaga.
 In the package blocks, the classes are shown.
 Although Python has no notion of interfaces, the interfaces in the figure
 are the classes that GFD.90 defines as interfaces.
 These classes are not supposed to be instantiated and are therefore different
 from the other classes.
 The arrows mean that a certain class extends or inherits another class.
 An example is that 
\family typewriter
IOVec
\family default
 inherits from 
\family typewriter
Buffer
\family default
.
 The small numbers in the classes mean that the specific class implements
 the interfaces labeled by those numbers.
 An example is that 
\family typewriter
Session
\family default
 implements 
\family typewriter
Object
\family default
, which is labeled by big 1.
 
\family typewriter
Async
\family default
, labeled by a big 4, implements no interface but 
\family typewriter
Async
\family default
 itself is implemented by many classes, such as 
\family typewriter
Permissions
\family default
.
 Although 
\family typewriter
SagaException
\family default
 is the only class shown in the 
\family typewriter
error
\family default
 package block, all subclasses of 
\family typewriter
SagaException
\family default
 are also in the 
\family typewriter
error
\family default
 package, but are not shown in the figure.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\begin_inset Graphics
	filename Pictures/PySagaClassStructure.png
	lyxscale 50
	width 85page%

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:The-PySaga-hierarchy}

\end_inset

The PySaga hierarchy
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Error
\end_layout

\begin_layout Standard
The 
\family typewriter
Error
\family default
 module consists of a 
\family typewriter
SagaException
\family default
 class which features the methods from Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:ErrorMethods}

\end_inset

 and 11 subclasses of the 
\family typewriter
SagaException
\family default
 which are shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:Subclasses-of-SagaException}

\end_inset

.
 We have placed the 
\family typewriter
sagaObject
\family default
 parameter behind the message parameter because not all exceptions contain
 an object and thus the 
\family typewriter
saga_object
\family default
 is optional.
 
\family typewriter
__init__
\family default
 contains both constructors mentioned in GFD.90.
 
\family typewriter
SagaException
\family default
 exposes the properties 
\family typewriter
message
\family default
 and 
\family typewriter
saga_object
\family default
 to directly get the message and the associated base 
\family typewriter
Object
\family default
.
 Python has exception-handling capabilities and does not need the 
\family typewriter
error_handler
\family default
 interface.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, message, saga_object=None) 
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initialize an Exception object.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_message() 
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Returns the message associated with the exception.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_object() 
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Returns the SAGA Object associated with the exception.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:ErrorMethods}

\end_inset

Specified methods in Error module
\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
NotImplemented
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
IncorrectURL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
BadParameter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
AlreadyExists
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
DoesNotExist
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
IncorrectState
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
PermissionDenied
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
AuthorizationFailed
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
AuthenticationFailed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Timeout
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
NoSuccess
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:Subclasses-of-SagaException}

\end_inset

Subclasses of SagaException
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Object
\end_layout

\begin_layout Standard
The Object module contains the 
\family typewriter
ObjectType
\family default
 class and the 
\family typewriter
Object
\family default
 class.
 
\family typewriter
ObjectType
\family default
 was originally designed as an enum but is now a class with constants that
 are returned by objects to describe their type.
 
\family typewriter
Object
\family default
 was an interface, but is now a class with the same methods.
 The methods are shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:ObjectMethods}

\end_inset

, and are not different from the GFD.90 specification.
 
\family typewriter
get_type()
\family default
 returns a value from 
\family typewriter
ObjectType
\family default
 which happen to be integers and 
\family typewriter
clone()
\family default
 returns a deep copy of an object which is an object itself.
\end_layout

\begin_layout Standard

\family typewriter
Object
\family default
 exposes the properties 
\family typewriter
id
\family default
 to get the object ID, 
\family typewriter
type
\family default
 to get the object type and 
\family typewriter
session
\family default
 to get the 
\family typewriter
Session
\family default
 of the object.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_id(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Query the object ID.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
 int 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_type(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Query the object type.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Session
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_session(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Query the objects session.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
clone(self)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Deep copy the object.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:ObjectMethods}

\end_inset

Methods from the Object class
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
URL
\end_layout

\begin_layout Standard
The 
\family typewriter
url
\family default
 package contains only the 
\family typewriter
URL
\family default
 class.
 The methods defined in 
\family typewriter
URL
\family default
, shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:URLMethods}

\end_inset

, are practically the same as defined in GFD.90.
 
\family typewriter
URL
\family default
 is a subclass of 
\family typewriter
Object
\family default
 and thus inherits all its methods and properties.
 Additional properties exposed by 
\family typewriter
URL
\family default
 are 
\family typewriter
string
\family default
, 
\family typewriter
scheme
\family default
, 
\family typewriter
host
\family default
, 
\family typewriter
port
\family default
, 
\family typewriter
fragment
\family default
, 
\family typewriter
path
\family default
, 
\family typewriter
query
\family default
 and 
\family typewriter
userinfo
\family default
.
\begin_inset Float table
wide true
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="36" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, url='')
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initialize an URL instance.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_string(self, url='')
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set a new url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_string(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Retrieve the url as string.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_scheme(self, scheme='')
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the scheme of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_scheme(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the scheme of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_host(self, host='')
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the host of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_host(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the host of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_port(self, port=-1)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the port of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_port(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the port of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_fragment(self, fragment='')
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the fragment of the url.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_fragment(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the fragment of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
set_path(self, path='')
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the path of the url.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_path(self) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the path of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_query(self, query='')
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the query of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_query(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the query of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_userinfo(self, userinfo='')
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the userinfo of the url.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_userinfo(self) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the userinfo of the url.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
translate(self, scheme)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Translate an URL to a new scheme.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

                 
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:URLMethods}

\end_inset

Methods from the URL class
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Buffer 
\end_layout

\begin_layout Standard
The buffer package contains only the Buffer class.
 Buffer contains the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:BufferMethods}

\end_inset

.
 Both constructors are merged into the 
\family typewriter
__init__ 
\family default
method.
 This caused a switch of the parameters.
 With a 
\family typewriter
Buffer(size, data) 
\family default
call the buffer should become application managed and with a 
\family typewriter
Buffer(size) 
\family default
call the buffer should become implementation managed.
 
\family typewriter
get_size() 
\family default
and
\family typewriter
 set_size() 
\family default
are like in GFD.90, but 
\family typewriter
get_data() 
\family default
and
\family typewriter
 set_data() 
\family default
are different.
 
\family typewriter
get_data()
\family default
 returns a char array or list of chars to represent the data if the buffer
 is application managed.
 It returns a string containing the data if the buffer is implementation
 managed.
 Using 
\family typewriter
set_data() 
\family default
switches the buffer to application managed, and accepts a char array or
 list of chars as the data parameter.
 Python does not have a byte data type in version 2.0 and that is why chars
 are used instead of the bytes specified in GFD.90.
 The properties specified in Buffer are data and size.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, size=-1, data=None)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Initialize an I/O buffer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__del__(self) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Destroy a buffer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_size(self, size=-1) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Set size of buffer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_size(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Retrieve the current value for size.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_data(self, data, size=-1) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Set new buffer data.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
char array,  
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_data(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list or string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Retrieve the buffer data.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
close(self, timeout=-0.0)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Closes the object.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

    
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:BufferMethods}

\end_inset

Methods from the Buffer class
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Session 
\end_layout

\begin_layout Standard
The session package contains the 
\family typewriter
Session
\family default
 class.
 
\family typewriter
Session
\family default
 is specified completely like GFD.90 and contains the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:SessionMethods}

\end_inset

.
 
\family typewriter
list_contexts() 
\family default
returns a list of contexts instead of an array.
 The contexts are also available through the property
\family typewriter
 contexts.
\family default

\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, default=True)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initialize the object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
add_context(self, context) 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Attach a security context to a session.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
remove_context(self, context)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Detach a security context from a session.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list_contexts(self)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Retrieve all contexts attached to a session.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

      
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:SessionMethods}

\end_inset

Methods from the Session class
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Context 
\end_layout

\begin_layout Standard
The 
\family typewriter
context
\family default
 package contains only the 
\family typewriter
Context
\family default
 class.
 
\family typewriter
Context
\family default
 inherits all methods and properties from 
\family typewriter
Object
\family default
 and 
\family typewriter
Attribute
\family default
 and has two additional methods as shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:ContextMethods}

\end_inset

.
 The constructor uses 
\family typewriter
name
\family default
 as parameter name since 
\family typewriter
type
\family default
 is already used in Python.
 The known attributes of 
\family typewriter
Context
\family default
 are also defined as properties.
 They are 
\family typewriter
Type
\family default
, 
\family typewriter
Server
\family default
, 
\family typewriter
CertRepository
\family default
, 
\family typewriter
UserProxy
\family default
, 
\family typewriter
UserCert
\family default
, 
\family typewriter
UserKey
\family default
, 
\family typewriter
UserID
\family default
, 
\family typewriter
UserPass
\family default
, 
\family typewriter
UserVO
\family default
, 
\family typewriter
LifeTime
\family default
,
\family typewriter
 RemoteID
\family default
, 
\family typewriter
RemoteHost
\family default
 and 
\family typewriter
RemotePort
\family default
.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="1">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, name='')
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initialize a security context.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_defaults(self)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set default values for specified context type.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:ContextMethods}

\end_inset

Methods from the Context class
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Permissions 
\end_layout

\begin_layout Standard
The Permissions module contains the Permission and the Permissions classes.
 Permission is a class with constants from the permission enum defined in
 GFD.90.
 The values are in capitals since the CapitalizedWord and the lowercase
 conventions cannot apply to none and exec since None and exec are both
 keywords.
\end_layout

\begin_layout Standard
The Permissions class is defined as an interface in GFD.90, but is now a
 class.
 It contains the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:PermissionsMethods}

\end_inset

.
 The methods are much like the methods defined in GFD.90, except for the
 tasktype parameters.
 Permissions implements the async interface and needs to implement synchronous
 and asynchronous versions of all methods.
 The 
\family typewriter
tasktype
\family default
 parameter allows to distinguish between those versions.
 Permissions defines the properties 
\family typewriter
group 
\family default
and to access the directly get the owner and group of the object implementing
 Permissions.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center

\family typewriter
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
permissions_allow(self, id, perm, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Enable permission flags.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
permissions_deny(self, id, perm, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Disable permission flags.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
permissions_check(self, id, perm, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Check permission flags.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_owner(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the owner of the entity.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_group(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the group owning the entity.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

      
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:PermissionsMethods}

\end_inset

Methods from the Permissions class
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Attributes 
\end_layout

\begin_layout Standard

\family typewriter
Attributes
\family default
 is the only class in the 
\family typewriter
attributes
\family default
 package.
 It contains the the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:AttributesMethods}

\end_inset

.
 
\family typewriter
Attributes
\family default
 was designed as an interface in GFD.90 and is class in the language binding.
 The arrays of strings have changed into lists, but all other parameters
 and data types stay the same.
 
\family typewriter
Attributes
\family default
 had a property called 
\family typewriter
attributes
\family default
, which is a dictionary of all the attributes of the entity that is a subclass
 of 
\family typewriter
Attributes
\family default
.
\begin_inset Float table
placement h
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="24" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="50page%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
set_attribute(self, key, value)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set an attribute to a value.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
get_attribute(self, key)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get an attribute value.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
set_vector_attribute(self, key, values)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set an attribute to an array of values.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
get_vector_attribute(self, key)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the tuple of values associated with an attribute.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
remove_attribute(self, key)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Removes an attribute.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
list_attributes(self)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the list of attribute keys.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
find_attributes(self, pattern)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Find matching attributes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
attribute_exists(self, key)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Check the attribute's existence.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
attribute_is_readonly(self, key)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Check if the attribute is read only.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
attribute_is_writable(self, key)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Check if the attribute is writable.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
attribute_is_removable(self, key)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Check if the attribute is removable.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
attribute_is_vector(self, key)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Check whether the attribute is a vector or a scalar.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:AttributesMethods}

\end_inset

Methods from the Attributes class
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Monitoring
\end_layout

\begin_layout Standard
The 
\family typewriter
monitoring
\family default
 package contains four classes: 
\family typewriter
Callback
\family default
, 
\family typewriter
Metric
\family default
, 
\family typewriter
Monitorable
\family default
 and 
\family typewriter
Steerable
\family default
.
 
\family typewriter
Callback
\family default
 is a class that users must subclass to have any meaning for their application.
 They also have to implement the 
\family typewriter
cb()
\family default
 method to specify the correct behavior.
 A 
\family typewriter
Callback
\family default
 object, together with a name of a metric, can be added to various objects
 through the 
\family typewriter
add_callback()
\family default
 method.
 If the metric changes, the SAGA implementation will call the 
\family typewriter
cb()
\family default
 method of 
\family typewriter
Callback
\family default
 object.
 The 
\family typewriter
cb()
\family default
 method, see Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:CallbackMethods}

\end_inset

, uses different names than GFD.90, but has the same order and meaning.
 The names are different to make them clearer and consistent.
 For example, the 
\family typewriter
context 
\family default
parameter is also used in 
\family typewriter
Session.add_context()
\family default
.
\begin_inset Float table
placement h
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="50page%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
cb(self, monitorable, metric, context)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Asynchronous handles for metric changes
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:CallbackMethods}

\end_inset

Method from the Callback class
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Metric
\family default
 class specifies the methods, shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:MetricMethods}

\end_inset

, almost exactly like GFD.90.
 The differences are the renaming of the 
\family typewriter
type
\family default
 parameter from the constructor to 
\family typewriter
mtype
\family default
 and the addition of properties.
 These properties are 
\family typewriter
Name
\family default
, 
\family typewriter
Description
\family default
, 
\family typewriter
Mode
\family default
, 
\family typewriter
Unit
\family default
, 
\family typewriter
Type
\family default
 and 
\family typewriter
Value.
\family default

\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0col%">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="50page%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, name, desc, mode, unit, mtype, value)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initializes the Metric object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
add_callback(self, cb)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Add asynchronous notifier callback to watch metric changes.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
remove_callback(self, cookie)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remove a callback from a metric.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
fire(self)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Push a new metric value to the backend.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:MetricMethods}

\end_inset

Methods from the Metric class
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Monitorable
\family default
 class is contains the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:MonitorableMethods}

\end_inset

.
 The string array has been replaced by a list of strings and a 
\family typewriter
metrics
\family default
 property has been added.
 Other than that, the methods are the same as in GFD.90.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="50page%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list_metrics(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
List all metrics associated with the object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Metric
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_metric(self, name)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Returns a metric instance, identified by name.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
add_callback(self, name, cb)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Add a callback to the specified metric.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
remove_callback(self, name, cookie)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remove a callback from the specified metric.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

         
\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:MonitorableMethods}

\end_inset

Methods from the Monitorable class
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Steerable
\family default
 class contains the methods defined in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:SteerableMethods}

\end_inset

.
 The methods do not differ from GFD.90.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="50page%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
add_metric(self, metric)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Add a metric instance to the application instance.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
remove_metric(self, name)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remove a metric instance.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
fire_metric(self, name)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Push a new metric value to the backend.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:SteerableMethods}

\end_inset

Methods from the Steerable class
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Task
\end_layout

\begin_layout Standard
The 
\family typewriter
task
\family default
 package consists of six classes: 
\family typewriter
State
\family default
, 
\family typewriter
WaitMode
\family default
, 
\family typewriter
Async
\family default
, 
\family typewriter
TaskType
\family default
, 
\family typewriter
Task
\family default
, 
\family typewriter
TaskContainer
\family default
.
 
\family typewriter
State
\family default
 and 
\family typewriter
WaitMode
\family default
 are defined as enums in GFD.90 and are now classes with constants.
 
\family typewriter
Async
\family default
 is an empty class since it is only used for tagging classes that implement
 the task model.
 
\family typewriter
TaskType
\family default
 defines the possible values used in combination with asynchronous methods.
 
\family typewriter
NORMAL
\family default
 means that the method returns its specified return values like a normal
 synchronous method, 
\family typewriter
SYNC
\family default
 means that the method returns a 
\family typewriter
Task
\family default
 object in a final state, 
\family typewriter
ASYNC
\family default
 means that the method returns a 
\family typewriter
Task
\family default
 object in the 
\family typewriter
RUNNING
\family default
 state and 
\family typewriter
TASK
\family default
 means that the method returns a 
\family typewriter
Task
\family default
 object in the 
\family typewriter
NEW
\family default
 state.
\end_layout

\begin_layout Standard
The 
\family typewriter
Task
\family default
 class contains the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:TaskMethods}

\end_inset

.
 
\family typewriter
Task
\family default
 does not specify a constructor because 
\family typewriter
Tasks
\family default
 can only be created through asynchronous method calls.
 
\family typewriter
get_result()
\family default
 returns the result of the asynchronous call and can return any data type.
 
\family typewriter
get_object()
\family default
 is used to get the originating object of the 
\family typewriter
Task
\family default
 and can also return any SAGA object that subclasses the 
\family typewriter
Async
\family default
 class.
 
\family typewriter
get_state()
\family default
 returns a constant from the 
\family typewriter
State
\family default
 class.
 Those constants are defined as ints.
 Task defines three properties; 
\family typewriter
state
\family default
, 
\family typewriter
result
\family default
 and 
\family typewriter
object
\family default
.
 
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__del__(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Destroy the object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
run(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Start the asynchronous operation.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
cancel(self, timeout=0.0)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Cancel the asynchronous operation.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
wait(self, timeout=-1.0)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Wait for the Task to finish.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_state(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the state of the Task.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
<return value>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_result(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the result of the async operation.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
<object>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_object(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the object from which this Task was created.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
rethrow(self)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Re-raise any exception a failed Task caught.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:TaskMethods}

\end_inset

Methods from the Task class
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TaskContainer has the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:TaskContainerMethods}

\end_inset

 and has the properties 
\family typewriter
cookies
\family default
 and 
\family typewriter
tasks.

\family default
 The parameter 
\family typewriter
mode
\family default
 in 
\family typewriter
wait()
\family default
 must be a value from 
\family typewriter
WaitMode
\family default
.
 Overall, 
\family typewriter
TaskContainer
\family default
 looks look the 
\family typewriter
TaskContainer
\family default
 defined in GFD.90.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="24" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initialize the TaskContainer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__del__(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Destroy the TaskContainer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
add(self, task)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Add a Task to a TaskContainer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Task
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
remove(self, cookie)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remove a Task from a TaskContainer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
run(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Start all asynchronous operations in the TaskContainer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Task
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
wait(self, mode=0, timeout=-1.0)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Wait for one or more of the Tasks to finish.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
cancel(self, timeout=0.0)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Cancel all the asynchronous operations in the container.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
size(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the number of Tasks in the TaskContainer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list_tasks(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
List the cookies of the Tasks in the TaskContainer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Task
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_task(self, cookie)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get a single Task from the TaskContainer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_tasks(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the Tasks in the TaskContainer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_states(self)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the states of all Tasks in the TaskContainer.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:TaskContainerMethods}

\end_inset

Methods from the TaskContainer class
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Job 
\end_layout

\begin_layout Standard
The 
\family typewriter
job
\family default
 package consists of six classes; 
\family typewriter
State
\family default
, 
\family typewriter
JobDescription
\family default
, 
\family typewriter
JobService
\family default
, 
\family typewriter
StdIO
\family default
,
\family typewriter
 Job
\family default
 and 
\family typewriter
JobSelf
\family default
.
 
\family typewriter
State
\family default
 is defined like the 
\family typewriter
State
\family default
 class in the 
\family typewriter
task
\family default
 package, but it adds the 
\family typewriter
SUSPENDED
\family default
 state for job.
 
\end_layout

\begin_layout Standard

\family typewriter
JobDescription
\family default
 has no methods of its own, but has a lot of attributes exposed as properties.
 These properties are 
\family typewriter
Executable
\family default
, 
\family typewriter
Arguments
\family default
, 
\family typewriter
SPMDVariation
\family default
, 
\family typewriter
TotalCPUCount
\family default
, 
\family typewriter
NumberOfProcesses
\family default
, 
\family typewriter
ProcessesPerHost
\family default
, 
\family typewriter
ThreadsPerProcess
\family default
, 
\family typewriter
Environment
\family default
, 
\family typewriter
WorkingDirectory
\family default
, 
\family typewriter
Interactive
\family default
, 
\family typewriter
Input
\family default
, 
\family typewriter
Output
\family default
, 
\family typewriter
Error
\family default
, 
\family typewriter
FileTransfer
\family default
, 
\family typewriter
Cleanup
\family default
, 
\family typewriter
JobStartTime
\family default
, 
\family typewriter
TotalCPUTime
\family default
, 
\family typewriter
TotalPhysicalMemory
\family default
, 
\family typewriter
CPUArchitecture
\family default
, 
\family typewriter
OperatingSystemType
\family default
, 
\family typewriter
CandidateHosts
\family default
, 
\family typewriter
Queue
\family default
 and 
\family typewriter
JobContact
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
JobService
\family default
 implements 
\family typewriter
Async
\family default
, therefore all methods have the 
\family typewriter
tasktype
\family default
 parameter.
 The 
\family typewriter
url
\family default
 and
\family typewriter
 session
\family default
 parameters in the
\family typewriter
 __init__()
\family default
 methods are switched because this allows 
\family typewriter
session
\family default
 to be defaulted to the default session when only the 
\family typewriter
url
\family default
 parameter is given when creating the 
\family typewriter
JobService
\family default
.
 
\family typewriter
run_job()
\family default
 now returns 
\family typewriter
StdIO
\family default
 objects to represent the standard input, standard output and standard error.
 
\family typewriter
list()
\family default
 returns a list of strings instead of an array of strings.
 The list of methods can be seen in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:JobServiceMethods}

\end_inset

.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="middle" leftline="true" rightline="true" width="50page%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, url='', session=Session(),
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
tasktype=Tasktype.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initialize the object
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Job
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
create_job(self, jd, tasktype=Tasktype.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Create a job instance
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Job, StdIO,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
run_job(self, commandline, host='',Tasktype.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
StdIO and StdIO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Run a command synchronously.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list(self,Tasktype.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get a list of jobs which are currently known by the resource manager.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Job
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_job(self, job_id,Tasktype.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Given a job identifier, this method returns a Job object representing this
 job.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
JobSelf
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_self(self, Tasktype.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
This method returns a Job object representing this job, i.e.
 the calling application.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:JobServiceMethods}

\end_inset

Methods from JobService
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
StdIO
\family default
 class is a class that represents the standard input, standard output and
 standard error of a 
\family typewriter
Job
\family default
.
 It is modeled after the stdio objects in Python, which are actually special
 files.
 The methods of 
\family typewriter
StdIO
\family default
 are shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:StdIOMethods}

\end_inset

.
 
\family typewriter
StdIO
\family default
 has the properties name and mode.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="20" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initializes the StdIO object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
close(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Closes the stream from reading or writing (if applicable)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
f
\family typewriter
lush(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Forces the data stream to flush the data
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_name(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Returns the name of the StdIO object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_mode(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Returns the mode of the StdIO object
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
write(self, data)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Write data to the stdin of the job.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
writelines(self, data)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Write a sequence of strings to the stdin of the job.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
read(self, size=-1, blocking=True)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Read at most size bytes from stdout/stderr.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
readline(self, size=-1, blocking=True)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Read the next line from the stdout or stderr of the job.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
readlines(self, size=-1, blocking=True)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Read multiple lines from the stdout or stderr.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:StdIOMethods}

\end_inset

Methods from StdIO
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Job
\family default
 objects can only be created through the 
\family typewriter
Jobservice
\family default
 and have the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:JobMethods}

\end_inset

.
 These methods do not differ from GFD.90 except for the discussed 
\family typewriter
StdIO
\family default
 objects.
 
\family typewriter
Job
\family default
 has attributes that are also exposed as properties.
 These properties are 
\family typewriter
JobID
\family default
, 
\family typewriter
ExecutionHosts
\family default
, 
\family typewriter
Created
\family default
, 
\family typewriter
Started
\family default
, 
\family typewriter
WorkingDirectory
\family default
, 
\family typewriter
ExitCode
\family default
 and 
\family typewriter
Termsig
\family default
.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="18" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
JobDescription
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_job_description(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Retrieve the job_description which was used to submit this job instance.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
StdIO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_stdin(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Retrieve input stream for a job.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
StdIO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_stdout(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Retrieve output stream of job
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
StdIO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_stderr(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Retrieve error stream of job
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
suspend(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ask the resource manager to perform a suspend operation on the running job.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
resume(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ask the resource manager to perform a resume operation on a suspended job.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
checkpoint(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ask the resource manager to initiate a checkpoint operation on a running
 job.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
migrate(self, jd)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ask the resource manager to migrate a job.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
signal(self, signum)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ask the resource manager to deliver an arbitrary signal to a dispatched
 job.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:JobMethods}

\end_inset

Methods from Job class
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
JobSelf
\family default
 class has the same methods as defined in 
\family typewriter
Job
\family default
.
\end_layout

\begin_layout Subsection
Namespace 
\end_layout

\begin_layout Standard
The 
\family typewriter
namespace
\family default
 package consists out of the 
\family typewriter
Flags
\family default
, 
\family typewriter
NSEntry
\family default
 and 
\family typewriter
NSDirectory
\family default
 classes.
 
\family typewriter
Flags
\family default
 is now defined as a class of integer constants.
 
\family typewriter
NSEntry
\family default
, with the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:NSEntryMethods}

\end_inset

, is a class with some changes.
 The constructor has 
\family typewriter
session
\family default
 and 
\family typewriter
name
\family default
 parameters switched, each method has a 
\family typewriter
tasktype
\family default
 parameter because 
\family typewriter
NSEntry
\family default
 and 
\family typewriter
NSDirectory
\family default
 subclass 
\family typewriter
Async
\family default
 and a number of methods have a 
\family typewriter
\emph on
_self
\family default
\emph default
 suffix added to the method name.
 The reason for this is that the same methods exist in 
\family typewriter
NSDirectory
\family default
, but with slightly different meaning.
 Since overloading is not available and keeping the same name would result
 in complicated and user unfriendly implementations, the method names were
 changed.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="32" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, name, session=Session(), flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialize the the object
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__del__(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
destroy the object
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_url(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
obtain the complete url pointing to the entry
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_cwd(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
obtain the current working directory for the entry
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_name(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
obtain the name part of the url path element
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
is_dir_self(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
tests the entry for being a directory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
is_entry_self(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
tests the entry for being an NSEntry
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
is_link_self(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
tests the entry for being a link
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
read_link_self(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
get the name of the link target
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
copy_self(self, target, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
copy the entry to another part of the name space
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
link_self(self, target, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
create a symbolic link
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
move_self(self, target, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
rename or move target
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
remove_self(self, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
removes this entry, and closes it
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
close(self, timeout=0.0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
closes the NSEntry 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
permissions_allow_self(self, id, perm, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
enable a permission
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
permissions_deny_self(self, id, perm, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
disable a permission flag
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:NSEntryMethods}

\end_inset

Methods from NSEntry
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The differences in 
\family typewriter
NSDirectory
\family default
, shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:NSDirectoryMethods}

\end_inset

, are the 
\family typewriter
tasktype
\family default
 parameter, switched
\family typewriter
 name
\family default
 and 
\family typewriter
session
\family default
 parameters and merging of the normal management methods with their wildcard
 versions.
 The merging of the methods 
\family typewriter
copy
\family default
, 
\family typewriter
link
\family default
, 
\family typewriter
move
\family default
 and 
\family typewriter
remove
\family default
 means that the same method accepts both 
\family typewriter
URL
\family default
 objects as strings for the 
\family typewriter
source
\family default
 parameter.
 This merging also happened for the 
\family typewriter
permission_allow
\family default
 and 
\family typewriter
permission_deny
\family default
 methods.
 
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="40" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="middle" leftline="true" rightline="true" width="60page%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, name, session=Session(),
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
flags=0,
\family default
 
\family typewriter
tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialize the object
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
change_dir(self, url, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
change the working directory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list(self, name_pattern='.', flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
list entries in this directory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
find(self, name_pattern, flags=2, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
find entries in the current directory and below
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
exists(self, name, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
checks if entry exists
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
is_dir(self, name, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
tests name for being a directory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
is_entry(self, name, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
tests name for being an NSEntry
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
is_link(self, name, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
tests name for being a symbolic link
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
read_link(self, name, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns the name of the link target
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_num_entries(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gives the number of entries in the directory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_entry(self, entry, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gives the name of an entry in the directory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
copy(self, source, target, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
copy the entry to another part of the name space
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
link(self, source, target, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
create a symbolic link from the target entry.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
move(self, source, target, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
rename or move target
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
remove(self, target, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
removes the entry
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
make_dir(self, target, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
creates a new directory
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
NSEntry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
open(self, name, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
creates a new NSEntry instance
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
NSDirectory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
open_dir(self, name, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
creates a new NSDirectory instance
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
permissions_allow(self, target, id, perm, flags=0,
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
enable a permission
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
permissions_deny(self, target, id, perm, flags=0,
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
disable a permission flag
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:NSDirectoryMethods}

\end_inset

Methods from NSDirectory
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
File 
\end_layout

\begin_layout Standard
The 
\family typewriter
file
\family default
 package contains the classes 
\family typewriter
Flags
\family default
, 
\family typewriter
SeekMode
\family default
, 
\family typewriter
IOVec
\family default
, 
\family typewriter
File
\family default
 and 
\family typewriter
Directory
\family default
.
 
\family typewriter
Flags
\family default
 and 
\family typewriter
SeekMode
\family default
 are classes with integer constants.
 We decided to keep the 
\family typewriter
SeekMode
\family default
 constants like they are in GFD.90 (1, 2 and 3) and not change them to the
 variables Python uses to indicate the seek mode (0, 1 and 2).
 This should not create confusion between different SAGA implementations
 and encourages users to use the defined constants, like 
\family typewriter
SeekMode.START
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
IOVec
\family default
 is a subclass of 
\family typewriter
Buffer
\family default
 and uses similar constructor using a char array or a list of chars.
 
\family typewriter
IOVec
\family default
 contains the methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:IOVecMethods}

\end_inset

.
 
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, size=-1, data=None, len_in=-1, offset=0)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialize an IOVec instance
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_offset(self, offset)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
set the offset
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_offset(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
retrieve the current value for offset
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_len_in(self, len_in)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set len_in
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
 get_len_in(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
retrieve the current value for len_in
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_len_out(self)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Retrieve the value for len_out
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:IOVecMethods}

\end_inset

Methods from IOVec
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
File
\family default
, methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:FileMethods}

\end_inset

, is a subclass of 
\family typewriter
NSEntry
\family default
 and also has the 
\family typewriter
session
\family default
 and 
\family typewriter
name
\family default
 parameters switched in the constructor.
 The 
\family typewriter
read()
\family default
 method allows the omission of the 
\family typewriter
data
\family default
 parameter to return a string and the 
\family typewriter
write()
\family default
 method allows a string to be used as 
\family typewriter
data
\family default
.
 This lies close to the way 
\family typewriter
read()
\family default
 and 
\family typewriter
write()
\family default
 for files is implemented in Python.
 Any array defined in GFD.90 for the File class is replaced by a list.
 The 
\family typewriter
tasktype
\family default
 parameter is added because 
\family typewriter
File
\family default
 and 
\family typewriter
Directory
\family default
 are both subclasses of 
\family typewriter
Async
\family default
.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="28" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="60page%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, name, session=Session(),
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
flags=512,
\family default
 
\family typewriter
tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialize the File object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_size(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
returns the number of bytes in the file.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int or 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
read(self, size=-1, buf=None, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
reads up to size bytes from the file into a buffer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
write(self, buf, size=-1, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
writes up to size from buffer into the file at the current file position.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
seek(self, offset, whence=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
reposition the file pointer.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
read_v(self, iovecs, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gather/scatter read.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
write_v(self, iovecs, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
gather/scatter write.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
size_p(self, pattern, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
determine the storage size required for a pattern I/O operation.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
read_p(self, pattern, buf, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
pattern-based read.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
write_p(self, pattern, buf, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
pattern-based write.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
modes_e(self), tasktype=TaskType.NORMAL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
list the extended modes available in this implementation, and/or on server
 side.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
size_e(self, emode, spec, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
determine the storage size required for an extended I/O operation.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
read_e(self, emode, spec, buf, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
extended read.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
write_e(self, emode, spec, buf, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
extended write.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:FileMethods}

\end_inset

Methods from File
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Directory
\family default
, methods shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:DirectoryMethods}

\end_inset

, also has the switched parameters in the 
\family typewriter
__init__()
\family default
 method and has added the 
\family typewriter
tasktype
\family default
 parameters.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, name, session='default', flags=512)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
initialize the Directory object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_size(self, name, flags=None)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Returns the size of the file.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
is_file(self, name)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
alias for 
\family typewriter
NSDirectory.is_entry()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Directory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
open_dir(self, name, flags=512)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Creates a directory object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
File
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
open(self, name, flags=512)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Creates a new file instance.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:DirectoryMethods}

\end_inset

Methods from Directory
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Logicalfile 
\end_layout

\begin_layout Standard
The 
\family typewriter
logicalfile
\family default
 package contains the 
\family typewriter
Flags
\family default
, 
\family typewriter
LogicalFile
\family default
 and 
\family typewriter
LogicalDirectory
\family default
 classes.
 
\family typewriter
LogicalFile
\family default
 has a switched session parameter in the __init__() method and had the array
 replaced by a list.
 The methods for 
\family typewriter
LogicalFile
\family default
 are shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:LogicalFilemethods}

\end_inset

.
 
\family typewriter
LogicalDirectory 
\family default
has the same changes as 
\family typewriter
LogicalFile
\family default
.
 The methods of 
\family typewriter
LogicalDirectory
\family default
 are shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:LogicalDirectoryMethods}

\end_inset

.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, name, session=Session(), flags=512, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initialize the LogicalFile.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
add_location(self, name, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Add a replica location to the replica set
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
remove_location(self, name, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remove a replica location from the replica set
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
update_location(self, old, new, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Change a replica location in replica set.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list_locations(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
List the locations in the location set
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
replicate(self, name, flags=0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Replicate a file from a location to a new location.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:LogicalFilemethods}

\end_inset

Methods from LogicalFile
\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="middle" leftline="true" rightline="true" width="60page%">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, name, session=Session(), flags=512
\family default
,
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initialize the object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
is_file(self, name, flags, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
alias for 
\family typewriter
NSDirectory.is_entry()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
LogicalDirectory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
open_dir(self, name, flags=512, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Creates a new 
\family typewriter
LogicalDirectory
\family default
 instance
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
LogicalFile
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
open(self, name, flags=512, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Create a new 
\family typewriter
LogicalFile
\family default
 instance.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
list
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
find(self, name_pattern, attr_pattern, flags=2
\family default
,
\end_layout

\begin_layout Standard

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Find entries in directory and below.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:LogicalDirectoryMethods}

\end_inset

Methods from LogicalDirectory
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Stream 
\end_layout

\begin_layout Standard
The 
\family typewriter
stream
\family default
 package contains the 
\family typewriter
State
\family default
, 
\family typewriter
Activity
\family default
, 
\family typewriter
StreamService
\family default
 and 
\family typewriter
Stream
\family default
 classes.
 
\family typewriter
State
\family default
 and 
\family typewriter
Activity
\family default
 are two classes with integer constants.
 
\family typewriter
StreamService
\family default
 is a subclass of 
\family typewriter
Async
\family default
 and has the tasktype parameter in all methods, shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:StreamServiceMethods}

\end_inset

.
 Stream also has a switched session parameter and tasktype parameters.
 The methods of 
\family typewriter
Stream
\family default
 are shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:StreamMethods}

\end_inset

.
 Stream exposes the properties 
\family typewriter
Bufsize
\family default
, 
\family typewriter
Timeout
\family default
, 
\family typewriter
Blocking
\family default
, 
\family typewriter
Compression
\family default
, 
\family typewriter
Nodelay
\family default
 and 
\family typewriter
Reliable
\family default
.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, url='', session=Session(), tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initializes a new 
\family typewriter
StreamService
\family default
 object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_url(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the URL to be used to connect to this server.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Stream
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
serve(self, timeout=-1.0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Wait for incoming client connections.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
close(self, timeout=0.0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
closes a stream service
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:StreamServiceMethods}

\end_inset

Methods from StreamService
\end_layout

\end_inset


\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="18" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, url='', session=Session(), tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initializes a client stream for later connection to a server.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__def__(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Destroy a Stream object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_url(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get the URL used for creating the stream.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Context
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_context(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return remote authorization info.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
connect(self, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Establishes a connection to the target defined during the construction of
 the stream.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
wait(self, what, timeout=-1.0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Check if stream is ready for reading/writing, or if it has entered an error
 state.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
close(self, timeout=0.0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Closes an active connection.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
int or
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
read(self, size=-1, buf=None, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Read a data from a stream.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
write(self, buf, size=-1, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Write a data buffer to stream.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:StreamMethods}

\end_inset

Methods from Stream
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
RPC 
\end_layout

\begin_layout Standard
The rpc package contains the IOMode, Parameter and RPC classes.
 IOMode is a class with integer constants.
 Parameter, see Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:ParameterMethods}

\end_inset

, is a subclass of Buffer but also allows normal data types as data parameter.
 These normal data types can be integers, floats, booleans or strings or
 lists of them.
 This lies close to using these data types for the XMLRPC middleware that
 also accepts normal data types in addition to plain byte arrays.
 Parameter exposes the property 
\family typewriter
mode
\family default
.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, size, mode, data=None)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initialize an parameter instance.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
set_io_mode(self, mode)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
set io mode
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
Value from
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
get_io_mode(self)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
IOMode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Retrieve the current value for io mode
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:ParameterMethods}

\end_inset

Methods from Parameter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
RPC also has the switched session parameter, tasktype parameters and arrays
 replaced by lists.
 See Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:RPCMethods}

\end_inset

 for the methods.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="1">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__init__(self, session, funcname, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Initializes a remote function handle
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
__del__(self)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Destroys the RPC object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
call(self, parameters, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Call the remote procedure.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
close(self, timeout=0.0, tasktype=TaskType.NORMAL)
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Closes the rpc handle instance.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:RPCMethods}

\end_inset

Methods from RPC
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation of the SAGA Python Language Binding
\begin_inset LatexCommand \label{sec:Implementation}

\end_inset


\end_layout

\begin_layout Standard
This section discusses the details of the implementation of the SAGA Python
 language binding.
 It gives some insight how JySaga, the implementation on top of the SAGA
 Java reference implementation, is implemented and how it works.
\end_layout

\begin_layout Subsection
Previous Solution
\end_layout

\begin_layout Standard
The first idea of implementing the language binding involved creating a
 library that could switch between both SAGA reference implementations.
 The first outlines of the library could import the modules that targeted
 a specific SAGA reference implementation.
 The actual switching was done based on a environment variable.
 This structure was rejected because of multiple reasons.
 The first reason was the realization that Python applications were never
 able to switch between SAGA reference implementations, because they both
 run on different Python interpreters.
 The advantage of the switching between both SAGA implementations and Python
 interpreters would be minimal.
 The second reason is that the importing would clutter the namespace in
 the library module.
 That would not be a simple, clean and Python-like solution.
\end_layout

\begin_layout Standard
Another issue was that there is no way to enforce that implementations exactly
 follow the specification.
 Abstract methods are not available and Python does not have interfaces.
 We then decided that the structure and the source code of the Python language
 binding specification should be as simple as possible.
 Implementations of the SAGA Python language binding can just take the source
 code and fill in all the blanks.
 Programmers should make sure not to change any method declaration since
 there is no way to enforce the correctness of the implementation of the
 SAGA Python language binding other than passing the unit tests.
\end_layout

\begin_layout Subsection
Structure of the SAGA Python Language Binding Implementation
\end_layout

\begin_layout Standard
The goal of our SAGA Python language binding implementation is to offer
 a Python look and feel while hiding the fact that the user is working on
 a non-Python SAGA implementation.
 This can be achieved by wrapping all the objects presented to the user
 by the SAGA implementation in a Python object.
 We name the object inside the Python object a delegate object.
 Almost all method calls on the Python object are delegated to the delegate
 object.
 An overview of this structure is given in Figure\InsetSpace ~

\begin_inset LatexCommand \ref{fig:JySagaStruct}

\end_inset

.
 In the figure a Python application calls a method in our implementation
 of the SAGA Python language binding, called JySaga.
 The method in JySaga checks the parameters and raises an exception if the
 parameters are not correct.
 If the parameters were correct, the method converts them to parameters
 the SAGA implementation understands, and does a method call on the delegate
 object with the converted parameters.
 The SAGA implementation then acts on this method call and raises an exception
 or returns a return value.
 A raised exception is catched in PySaga, converted to a Python exception
 and re-raised.
 If the SAGA implementation returns a return value or object, they are converted
 to Python values or wrapped in a Python object and then returned to the
 Python application.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Pictures/JySagaOverview.png
	scale 70

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:JySagaStruct}

\end_inset

Overview of JySaga structure
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The converting of the return value is often straight forward.
 Booleans, numbers, voids, chars and strings are often converted by the
 Jython interpreter, so we did not have to help the conversion process.
 This is different for arrays.
 Lists coming from the Python application have to be converted to Java arrays
 and arrays coming from the SAGA Java implementation have to be converted
 to lists.
 If the arrays contain Java objects, these objects have to be wrapped by
 a Python object before the list can be returned to the user.
 This principle of converting is used through-out JySaga.
\end_layout

\begin_layout Standard
The converting of Java exception to Python exceptions is done in the 
\family typewriter
convertException()
\family default
 method that each SAGA Python object inherits from the 
\family typewriter
Object
\family default
 class.
 This method inspects the type of the given exception and creates the Python
 equivalent of that exception.
 The message is then copied, together with an optional SAGA object attached
 to the exception.
 For example, a Java exception like 
\family typewriter
org.ogf.saga.error.DoesNotExistException
\family default
 is converted to a Python 
\family typewriter
DoesNotExist
\family default
 object.
\end_layout

\begin_layout Standard
Tasks object in JySaga can be created by calling the asynchronous version
 of a JySaga method.
 The Java delegate objects are stored in Python Task objects just like with
 other SAGA Python objects.
 The only implementation difficulty is returning the right type when a user
 calls the Task.get_result() method.
 JySaga cannot know beforehand which of the more then 25 different types
 is returned by the delegate object.
 JySaga has to inspect the type and create a new Python object to store
 the returned object in.
\end_layout

\begin_layout Standard
Cloning can be done in each method that inherits the clone() method from
 the Object .
 The cloning of a Python object also implies the cloning of the delegate
 object in the Python object.
 First the delegate object is cloned and then a new Python object is created.
 To prevent that in the process of the Python object creation, the Python
 object gets his own delegate object and not uses the cloned delegate object,
 a parameter is added to the _
\family typewriter
_init__()
\family default
 method.
 The added 
\family typewriter
**impl
\family default
 parameter is a dictionary of all parameters and values given but not declared
 in the method declaration.
 To create a new 
\family typewriter
Session
\family default
 object and add the cloned delegate object at the same time, the call 
\family typewriter
clone
\family default
 
\family typewriter
=
\family default
 
\family typewriter
Session(delegateObject=javaClone)
\family default
 is made.
 The 
\family typewriter
Session.__init__()
\family default
 method recognizes the javaClone as a delegate object and uses it instead
 of calling the underlying SAGA implementation to get a new delegate object.
 
\end_layout

\begin_layout Subsection
Modules in JySaga
\end_layout

\begin_layout Standard
This section gives some specific details about the SAGA packages in addition
 to the details given in the previous section.
 Not every possible detail is described in this thesis, since that would
 be to much information.
 For all the details, we recommend to read the source code.
 The source code is currently available at\InsetSpace ~

\begin_inset LatexCommand \cite{JySagaSourecode}

\end_inset

 and\InsetSpace ~

\begin_inset LatexCommand \cite{apidoc}

\end_inset

.
\end_layout

\begin_layout Description
Error The exceptions in the 
\family typewriter
error
\family default
 package are the only Python objects that have no delegate objects.
 The methods in 
\family typewriter
SagaException
\family default
 do not have difficult implementations as they just get and set variables.
 
\end_layout

\begin_layout Description
Object 
\family typewriter
Object
\family default
 defines the 
\family typewriter
convertException()
\family default
 for the converting of Java exceptions to Python exceptions and the 
\family typewriter
clone() 
\family default
method, both explained in the previous section.
 
\family typewriter
get_type()
\family default
 has a custom implementation in each subclass of 
\family typewriter
Object
\family default
 and does not delegates this call.
 This is because the SAGA Java reference implementation does not have a
 
\family typewriter
getType()
\family default
 method call.
 
\end_layout

\begin_layout Description
URL 
\family typewriter
URL
\family default
 delegates every call without any conversion of parameter.
 Only the returned Java object from 
\family typewriter
translate()
\family default
 is wrapped in a Python 
\family typewriter
URL
\family default
 object.
\end_layout

\begin_layout Description
Buffer 
\family typewriter
Buffer
\family default
 has implemented a conversion for Python (unsigned) chars to (signed) Java
 bytes and back.
 It also makes sure that application managed buffers are updated after each
 change to the internal buffers.
 The internal buffer is a Java array of which a reference is given to the
 SAGA implementation.
\end_layout

\begin_layout Description
Session 
\family typewriter
Session
\family default
 mostly just delegates method calls and only has to convert the 
\family typewriter
Context
\family default
 array to a list.
\end_layout

\begin_layout Description
Context 
\family typewriter
Context
\family default
 just delegates the method calls to the SAGA implementation.
 It uses the methods inherited from the 
\family typewriter
Attributes
\family default
 class to implement the properties (see Section\InsetSpace ~

\begin_inset LatexCommand \ref{Get-and-set}

\end_inset

) defined in the SAGA Python language binding .
\end_layout

\begin_layout Description
Permission 
\family typewriter
Permission
\family default
 is a subclass of the 
\family typewriter
Async
\family default
 and implements the task model.
 Each method of a class that is a 
\family typewriter
Async
\family default
 subclass has four internal options to execute the method, and the option
 is chosen by the 
\family typewriter
tasktype
\family default
 parameter.
 Unfortunately, the Java language has no notion of permissions, so each
 method of the Permission class returns a NotImplemented exception.
\end_layout

\begin_layout Description
Attributes Methods of the 
\family typewriter
Attributes
\family default
 class are used in combination with the properties to set the attributes
 of a class.
 In 
\family typewriter
Attributes
\family default
, conversions from lists to arrays occurs but overall, simply delegating
 the call is enough.
\end_layout

\begin_layout Description
Monitoring In the monitoring package, 
\family typewriter
Callback
\family default
 uses a 
\family typewriter
CallbackProxy
\family default
 class be the link between the Python application and the SAGA implementation.
 
\family typewriter
CallbackProxy
\family default
 is a subclass of 
\family typewriter
org.ogf.saga.monitoring.Callback
\family default
 and is usable for Java 
\family typewriter
addCallback()
\family default
 methods.
 If a programmer adds a 
\family typewriter
Callback
\family default
 through the 
\family typewriter
Monitorable.add_callback()
\family default
 method, the 
\family typewriter
Callback
\family default
 is wrapped in a 
\family typewriter
CallbackProxy
\family default
 and given to the SAGA implementation.
 If the metric related to the 
\family typewriter
Callback
\family default
 changes, the SAGA implementation calls 
\family typewriter
CallBackProxy.cb()
\family default
, which calls 
\family typewriter
Callback.cb()
\family default
.
\newline
The methods in 
\family typewriter
Metric
\family default
, 
\family typewriter
Monitorable
\family default
 and 
\family typewriter
Steerable
\family default
 contain no implementation details not documented in previously mentioned
 classes.
\end_layout

\begin_layout Description
Task Besides the task model mentioned in the previous section, 
\family typewriter
Task
\family default
 has some other specific details.
 If a Python application calls an asynchronous JySaga method with wrong
 parameters, JySaga will return a Task object in a FAILED state.
 Because the wrong parameters are detected by Jython and not by the SAGA
 implementation, no delegate object is returned and non-SAGA 
\family typewriter
TypeError
\family default
 is raised.
 The 
\family typewriter
Task
\family default
 object still functions without the delegate object and behaves like the
 
\family typewriter
Task
\family default
 already failed.
 If the Python application tries to add the failed 
\family typewriter
Task
\family default
 to a 
\family typewriter
TaskContainer
\family default
, the 
\family typewriter
TaskContainer
\family default
 will refuse to add the Task and will raise an exception.
 
\end_layout

\begin_layout Description
Job 
\family typewriter
JobDescription
\family default
 has no methods of its own, but relies on the methods from 
\family typewriter
Attributes
\family default
 and properties for its functionality.
 
\family typewriter
JobService
\family default
 and 
\family typewriter
Job
\family default
 function with just converting objects delegating calls.
 
\family typewriter
JobSelf
\family default
 functions through all its inherited methods.
 
\family typewriter
StdIO
\family default
 is a wrapper around the 
\family typewriter
InputStream
\family default
 and 
\family typewriter
OutputStream
\family default
 from 
\family typewriter
java.io
\family default
.
 It relies on the 
\family typewriter
available()
\family default
 method from the streams to check if there is data available and to check
 if the read on the stream will block or not.
 It designed to work like the standard input and output in Python, although
 Python's description of 
\family typewriter
readlines()
\family default
 does not match with what Python's 
\family typewriter
readlines()
\family default
 does.
\end_layout

\begin_layout Description
Namespace 
\family typewriter
NSEntry
\family default
 and 
\family typewriter
NSDirectory
\family default
 just delegate the calls and converts the parameters and return values.
 
\end_layout

\begin_layout Description
File 
\family typewriter
IOVec
\family default
 uses a similar implementation as 
\family typewriter
Buffer
\family default
.
 
\family typewriter
File
\family default
 and 
\family typewriter
Directory
\family default
 cast the long value from the SAGA implementation's 
\family typewriter
getSize()
\family default
 to an integer if the value is smaller than the maximum value for an integer,
 as specified in PySaga.
 In normal Python use, users will never notice the difference between longs
 and integers because Jython will automatically convert them but because
 JySaga follows the specification of the SAGA Python language binding.
\end_layout

\begin_layout Description
Logicalfile 
\family typewriter
LogicalFile
\family default
 and 
\family typewriter
LogicalDirectory
\family default
 just delegate the calls and converts the parameters and return values.
\end_layout

\begin_layout Description
Stream 
\family typewriter
Stream
\family default
 uses the properties to set the attributes of 
\family typewriter
Stream
\family default
.
 Using the 
\family typewriter
read()
\family default
 call without specifying a buffer is possible for 
\family typewriter
Stream
\family default
.
 The maximum amount of data that can be read is 4096 bytes per call.
 Other than that, 
\family typewriter
Stream
\family default
 and 
\family typewriter
StreamService
\family default
 use the delegation principle.
\end_layout

\begin_layout Description
RPC 
\family typewriter
Parameter
\family default
 from the 
\family typewriter
rpc
\family default
 package is a subclass of 
\family typewriter
Buffer
\family default
, but works different than 
\family typewriter
Buffer
\family default
.
 
\family typewriter
Parameter
\family default
 is extended to also use normal data types like integers and strings.
 To mimic a byte array, it uses a Python array of chars.
 Otherwise it uses lists of data types.
 Booleans are represented in Python as 1 and 0, so it hard to distinguish
 between a list of booleans and a list of integers.
 
\family typewriter
RPC
\family default
 uses a list of the 
\family typewriter
Parameters
\family default
 in the 
\family typewriter
call()
\family default
 method.
\end_layout

\begin_layout Section
Testing
\begin_inset LatexCommand \label{sec:Testing}

\end_inset


\end_layout

\begin_layout Standard
This section describes the testing of the SAGA Python language binding implement
ation.
 We will explain how it was tested and what difficulties we encountered.
 
\end_layout

\begin_layout Subsection
Test Environment
\end_layout

\begin_layout Standard
PySaga was created using the the Eclipse IDE\InsetSpace ~

\begin_inset LatexCommand \cite{eclipse}

\end_inset

 version 3.2 using the the PyDev Python development plug-in\InsetSpace ~

\begin_inset LatexCommand \cite{PyDev}

\end_inset

 to develop the Python files.
 To create the HTML files, Epydoc 3.0beta1 was used.
 To test JySaga, Jython 2.2.1 was used on top of Java 1.5.0_09 which was running
 on Debian Linux.
 The version of the SAGA Java reference implementation was the latest version
 from the svn repository\InsetSpace ~

\begin_inset LatexCommand \cite{JavaSAGATrunk}

\end_inset

, as the released 1.0 version had some bugs which made testing impossible.
 To access the svn repository, users will have to create an account at the
 Gforge website.
\end_layout

\begin_layout Subsection
Unit tests
\end_layout

\begin_layout Standard
The tests used to test the functionality are unit tests.
 These unit tests only test if a JySaga object implements the functionally
 specified in PySaga.
 It does this by checking if a method that is specified in PySaga exist
 and returns the right values and data types.It does not thoroughly test
 the underlying SAGA implementation, such as domain boundaries or specific
 exceptions for specific cases.
 This extensive testing would certainly expose bugs or unwanted features
 in the SAGA implementation, but is outside our scope.
 
\end_layout

\begin_layout Standard
The testing is bound to the underlying SAGA Java reference implementation,
 since JySaga cannot offer functionality that is not implemented in SAGA
 implementation.
 During the testing several bug reports were given to the SAGA Java reference
 implementation maintainer to notify him of missing functionality and bugs,
 which were fixed later on.
\end_layout

\begin_layout Subsection
Performance
\end_layout

\begin_layout Standard
At this point, it is very hard to give a good impression of the overhead
 JySaga has.
 Comparing JySaga to the Python wrapper included with the SAGA C++ reference
 implementation has no meaning since they are two different software application
 written in different programming languages with one running on the Java
 virtual machine.
 The comparison will also use two different interpreters for the Python
 code and is not suitable to use in a test of performance.
\end_layout

\begin_layout Standard
The overhead of JySaga on top of the SAGA Java reference implementation
 consists out of two parts.
 The first part Jython.
 Jython interprets the Python code and has to transform the code to Java
 byte code.
 This part is expected to be a bigger overhead than the delegating of a
 method call, which takes two method call instead of one.
 Overhead is not a big issue if JySaga will be primarily used to steer long-runn
ing computing jobs and all work is done remotely.
 Overhead will be an issue if JySaga is heavily used to read and write data
 using the Buffers, since data is casted from chars to bytes and back again.
 A small test shows that reading a file of 3 Megabytes in a small Java applicati
on takes 12 milliseconds.
 If we add the conversion of bytes to a string, the program takes 220 millisecon
ds.
 The same application takes the same amount of time when converted to Jython.
 The application takes almost a second when using the current version of
 JySaga.
 This means that the JySaga can be optimized when taking full advantage
 of the conversion mechanisms offered in Java.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \label{sec:Discussion}

\end_inset

Integration of SAGA with Python 
\end_layout

\begin_layout Standard
This master project has delivered a Python language binding for SAGA and
 an implementation for the language binding on top of the Java SAGA reference
 implementation.
 Programmers can use the specification of the language binding to use SAGA
 in their Python applications.
 Our opinion is that the specification is user friendly and conforms to
 how Python programmers would like to see the SAGA API.
 The specification consists of standard Python data types and looks like
 an easily understandable API.
 
\end_layout

\begin_layout Standard
The specification of the 
\family typewriter
Buffer
\family default
, 
\family typewriter
IOVec
\family default
 and 
\family typewriter
Parameter
\family default
 classes might look unorthodox but is specified this way because Python
 does not have a byte type.
 The classes were designed in GFD.90 as containers of bytes and therefore
 a translation had to be made.
 Suggestions were made on the mailing list to completely remove the buffer
 classes from the specifications and to use strings as representations of
 the data.
 We decided to have both principles of (application-managed and implementation-m
anaged) buffers and strings.
 Strings are mostly used for simple read and write operations.
 
\end_layout

\begin_layout Standard
The specification includes one additional class that was not directly defined
 in GFD.90.
 The 
\family typewriter
job.StdIO
\family default
 class represents the standard input, standard output and standard error
 of jobs.
 Because there can be multiple jobs, multiple representations of input and
 output streams must be available to the Python application.
 Standard input and output in Python are represented as a special file,
 and therefore the 
\family typewriter
job.StdIO
\family default
 class has many methods that can also be found in the Python file class.
 
\end_layout

\begin_layout Standard
The language binding implementation is programmed to be as Python-like as
 possible, but only if that would not interfere with the principle that
 implementation details of the language binding should be hidden from the
 user.
 An example of this is the explicit checking of parameter types instead
 of using the 'duck typing' principle.
\end_layout

\begin_layout Standard
Without the checking, parameters would be directly passed to the SAGA Java
 implementation through Jython.
 Jython would try to fit the parameters to the available Java methods of
 the SAGA Java implementation.
 If this fails for any reason, 
\family typewriter
TypeError
\family default
 exceptions could be raised by Jython that are not clear to the user and
 could confuse him.
 In addition, TypeError is not an error defined by SAGA and should not be
 raised.
 The explicit type checking gives the user clear information when the wrong
 parameters were given.
 At this point, the parameters are checked in JySaga before the call to
 the SAGA Java implementation is made.
 In the future, this should be changed to first making the call, and checking
 the parameters only if the call has failed.
 Overall the implementation follows the Python programming style.
\end_layout

\begin_layout Standard
Since the SAGA Python language binding implementation is a 'glue layer'
 between Python applications and the Java SAGA reference implementation,
 the SAGA Python language binding implementation should also run on top
 of other SAGA Java implementations.
 A requirement is that other SAGA Java implementations must implement the
 SAGA Java language binding.
 Our Python language binding will not support classes or packages in addition
 to the SAGA Java language binding, but everything defined in the SAGA Java
 language binding should work.
 The SAGA Python language binding itself must be implemented in the 'glue
 layers' between the Python application and SAGA implementations in other
 programming languages.
 This is also shown in Figure\InsetSpace ~

\begin_inset LatexCommand \vref{fig:FinalSituation}

\end_inset

.
 
\end_layout

\begin_layout Standard
Currently, people from the Vrije Universiteit are working to create a wrapper
 around the Python wrapper of the C++ SAGA reference implementation.
 This wrapper will use our Python language binding specification.
 When the project is finished, it will be possible to write Python programs
 using the specification and run them on both the C++ and the Java reference
 implementations.
\end_layout

\begin_layout Standard
The Python wrapper which comes with the C++ reference implementation is
 designed bottom-up while our specification is specified top-down.
 The bottom-up approach lies close to the C++ implementation but is not
 explicitly designed for Python programmers or makes use of the specific
 features such as lists and default values for parameters.
 Our specification is designed without explicitly fitting it to a specific
 SAGA implementation.
 
\end_layout

\begin_layout Section
Future Work
\begin_inset LatexCommand \label{sec:Future-Work}

\end_inset


\end_layout

\begin_layout Standard
After the specification and implementation of the Python language binding
 for SAGA some work still has to be done.
 This sections explains which issues will need attention in the future.
\end_layout

\begin_layout Subsection
Synchronize Specification with the Python Wrapper
\end_layout

\begin_layout Standard
At this point, there are both our specification and the specification which
 comes with the Python wrapper of the C++ reference implementation.
 They both differ at many points, such as naming of methods, variables and
 parameters.
 To reach the goal of creating a Python application which can run on both
 reference implementations these specifications need to be synchronized
 with each other.
 
\end_layout

\begin_layout Standard
This synchronizing has difficulties of its own such as technical and political
 and will probably result in sub-optimal solutions and loss of backward
 compatibility for the few Python applications which already use SAGA.
 At this point work is done to create a wrapper around the existing Python
 wrapper which uses the specification described in the thesis.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \label{sub:Extentions-to-the}

\end_inset

Extensions to the API
\end_layout

\begin_layout Standard
As more grid middleware and other technologies are developed, SAGA will
 probably need to be extended in the future.
 To access these new extension packages the Python language binding will
 have to be updated with the new functionality using the look and feel packages
 of the existing language binding.
\end_layout

\begin_layout Standard
Now that version 3.0 of Python (see Section\InsetSpace ~

\begin_inset LatexCommand \ref{sub:Version-of-Python}

\end_inset

) is released, the specification of language binding will have to be updated
 to reflect the changes and new data types, or a new specification will
 have to be made which is available in addition to a version which uses
 Python 2.x syntax.
 
\end_layout

\begin_layout Standard
There are some changes which effect our language binding.
 Version 3.0 implements a byte data type 
\begin_inset LatexCommand \cite{bytePEP}

\end_inset

,
\begin_inset LatexCommand \cite{PyLibFunctions}

\end_inset

 and a mutable byte buffer
\begin_inset LatexCommand \cite{byteByfferPEP}

\end_inset

 as a byte array.
 These changes will severely simplify the specification and implementation
 of the 
\family typewriter
Buffer
\family default
 class and the 
\family typewriter
Iovec
\family default
 class.
 These classes now work with char arrays to emulate bytes.
 The Parameter class from the rpc package will also be helped with introduction
 of a byte data type because it simplifies the use of method calls which
 require byte arrays or byte buffers.
 These 'Python Enhancement Proposals' or PEPs would solve difficulties that
 were raised in the design of the SAGA Python language binding for the 2.x
 versions of Python.
\end_layout

\begin_layout Standard
New since Python 2.6 are abstract base classes 
\begin_inset LatexCommand \cite{abstractBaseClasses}

\end_inset

.
 These classes can have abstract methods without an implementation, much
 like interfaces in Java.
 These abstract base classes would be suitable to implement the interfaces
 defined in GFD.90.
 
\end_layout

\begin_layout Standard
Now that Python 3.0 is released, it will take some time before it is excepted
 as the mainstream version for Python programmers.
 In addition to that, it will take some time before the other implementations
 like Jython will fully support version 3.0.
 This is because the other implementations are based on the Python reference
 implementation and therefore will always lag behind in functionality.
 This means that even if a SAGA Python language binding is specified for
 Python 3.0, it can only be implemented in JySaga if Jython supports the
 syntax for Python 3.0.
 
\end_layout

\begin_layout Subsection
Special Methods
\end_layout

\begin_layout Standard
Python uses a number of built-in methods to define certain behavior.
 Programmers can define or overload these methods to implement the custom
 behavior.
 An example of this is the 
\family typewriter
__init__()
\family default
 method, defining what is initialized after the object is created.
 In the implementation of the language binding almost every class has a
 custom 
\family typewriter
__init__()
\family default
 method.
 There are many special methods which can be defined like object (value)
 comparisons, operations on class attributes, operations like add and multiply
 or methods related to the representation of the class when printed.
 At this point, only the standard operations are specified and some have
 custom implementation like 
\family typewriter
__init__() and __new__().

\family default
 To improve usability more of these special methods have to be specified
 and implemented.
 These include 
\family typewriter
__len__()
\family default
 to check the length or size, 
\family typewriter
__cmp__()
\family default
 to compare objects or the special attribute methods.
 
\end_layout

\begin_layout Standard
Support for pickling also fall in this category.
 Pickling is what Java programmers may call serialization.
 It is the storing of Python objects to persistent media, such as a harddisk,
 to load them again a later time.
 These stored objects can be sent to other applications or used between
 different runs of the same application.
 The Python language binding implementation does not support this, but could
 be added if users need this functionality.
 Implementors then shall have to deal with storing the Python objects and
 the delegate objects, which is difficult if the underlying application
 does not support the serialization mechanism.
\end_layout

\begin_layout Subsection
Updating Language Binding Implementations.
 
\end_layout

\begin_layout Standard
In addition to the points given in Section 
\begin_inset LatexCommand \ref{sub:Extentions-to-the}

\end_inset

, the implementation of the language binding will also need to be changed
 if the underlying SAGA implementation is changed.
 This can happen if methods which previously threw a 
\family typewriter
NotImplemented
\family default
 exception are now implemented or if bugs are solved or new features are
 implemented.
 Since the SAGA implementation is also bound to its language binding, change
 is not expected to happen often after a reliable working version is released.
 Still, it must be taken into account that change in the SAGA implementation
 means that change in the Python language binding is needed.
\end_layout

\begin_layout Subsection
Consistency
\end_layout

\begin_layout Standard
The designing and implementing of the Python language binding was a learning
 process in which great amounts of experience were gained.
 An effect of this is that within the code of the specification and the
 implementation small things may differ and might not be consistent.
 This also include that not all the rules from the Python style guide are
 reflected within them.
 Making the code and declarations consistent will help the programmers when
 updating or changing the implementation.
 The current implementation also misses some comments about the working
 of the code in addition to the comments given in the document strings.
\end_layout

\begin_layout Section
Conclusion
\begin_inset LatexCommand \label{sec:Conclusion}

\end_inset


\end_layout

\begin_layout Standard
This thesis describes how we specified and implemented a SAGA Python language
 binding to give Python programmers a uniform set of classes and methods
 for programming grid-aware applications using SAGA.
 The complete picture is shown in Figure 
\begin_inset LatexCommand \ref{fig:FinalSituation}

\end_inset

.
 JySaga is a software layer for Python on top of the SAGA Java reference
 implementation.
 It implements the classes and methods described in SAGA Python language
 binding.
 Python programmers can now create applications using SAGA, run them on
 Jython and use the SAGA Java reference implementation.
 When the project PySaga++, described in section 
\begin_inset LatexCommand \ref{sec:Discussion}

\end_inset

, is finished it will be possible to run a Python application on both SAGA
 reference implementations.
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Pictures/PySaga.png
	width 80page%

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:FinalSituation}

\end_inset

The position of PySaga and JySaga in the complete picture
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Section
Acknowledgments
\end_layout

\begin_layout Standard
I thank the following persons as they were essential in the whole process
 of this master thesis: 
\end_layout

\begin_layout Standard
Thilo Kielmann and Mathijs den Burger for their supervision, support and
 invaluable inspiration.
 Ceriel Jacobs, Andre Merzky, Hartmut Kaiser, Steve Fisher and Manuel Franceschi
ni for their technical support.
 Mom, Dad and Milou for their unlimited support.
\end_layout

\begin_layout Section
Installing and Running JySaga
\end_layout

\begin_layout Standard
To run Python application on top of JySaga and the SAGA Java reference implement
ation, some things have to be arranged.
 
\end_layout

\begin_layout Itemize
You have to install the SAGA Java reference implementation and make sure
 it runs.
 To test this, you can try to run 
\family typewriter
/demo/demo2
\family default
 from the installation directory of the SAGA Java reference implementation.
 Currently, it is best to download the trunk version from\InsetSpace ~

\begin_inset LatexCommand \cite{JavaSAGATrunk}

\end_inset

.
 The SAGA Java reference implementation is located in the saga-implementation
 directory.
\end_layout

\begin_layout Itemize
You have to make sure that Jython is installed on your system.
 You can try to install it through the package manager of your operating
 system or download it from\InsetSpace ~

\begin_inset LatexCommand \cite{jython}

\end_inset

.
 After installation, locate the 
\family typewriter
jython.jar
\family default
 file as you need it later.
\end_layout

\begin_layout Itemize
Make sure that you have downloaded JySaga from\InsetSpace ~

\begin_inset LatexCommand \cite{apidoc}

\end_inset

.
 The files are found the 
\family typewriter
/impl/jysaga/trunk
\family default
 folder of the PySaga project.
\end_layout

\begin_layout Itemize
Make sure you have set the '
\family typewriter
$JAVA_SAGA_LOCATION
\family default
' environment variable for the location of the SAGA Java implementation,
 the '
\family typewriter
$JYTHON_JAR
\family default
' for the location of the 
\family typewriter
jython.jar
\family default
 file, and optionally set the '
\family typewriter
$JYSAGA
\family default
' for the location of the JySaga source files and the '
\family typewriter
$JYTHON_HOME
\family default
' for Jython specific files.
\end_layout

\begin_layout Itemize
run the 
\family typewriter
./trunkStartJysagaApp
\family default
 script to get the Jython interpreter running.
 Jython should know how to find the SAGA reference implementation and the
 JySaga files.
\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[bibtotoc,plain]{Thesis}

\end_inset


\end_layout

\end_body
\end_document
