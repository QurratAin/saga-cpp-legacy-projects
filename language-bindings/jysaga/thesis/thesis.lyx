#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\options a4paper,onecolumn
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize 11
\spacing single
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title

\size larger
Specification and Implementation of a Python to SAGA Language Binding
\size normal

\newline
Computer Science Master Thesis
\size larger
 
\end_layout

\begin_layout Author

\size normal
P.F.A.
 van Zoolingen
\newline
1284657, pzn400@few.vu.nl
\end_layout

\begin_layout Section
Abstract
\end_layout

\begin_layout Subsection
Abstract English
\end_layout

\begin_layout Subsection
Abstract Nederlands
\end_layout

\begin_layout Subsection
List of Frequently Used Terms
\end_layout

\begin_layout Itemize
API: Application Programming Interface.
 A set of variables, methods and classes that is offered by an operating
 system or software library to support requests made by computer programs.
\end_layout

\begin_layout Itemize
Grid: A collection of interconnected computers consisting of different hardware,
 placed in different locations and belonging to different organizations.
\end_layout

\begin_layout Itemize
Grid Aware: Applications which are grid aware are designed to run on a grid
 and use the possibilities of the grid, such as distributing workload between
 available nodes in the grid.
\end_layout

\begin_layout Itemize
Reference Implementation: Software which implements the functionality described
 by SAGA.
 New applications can link to this software and call methods described in
 SAGA to use the grid.
\end_layout

\begin_layout Itemize
SAGA: Simple API for Grid Applications
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
SAGA stands for Simple API for Grid Applications and was developed to offer
 users a simple tool to program applications for of heterogeneous grids.
 These grids often consist of different types of hardware, operating systems
 and middleware software and are hard to program.
 This API is developed to be independent of any underlying hardware or software
 and to shield the user from all the details and to let him focus on programming
 grid aware applications.
\end_layout

\begin_layout Standard
To use this API, the functionality described by SAGA has to be implemented
 by another piece of software.
 This is called the Saga reference implementation.
 At this point there are two different reference implementations which are
 programmed in the programming languages Java and C++.
 Which in a general sense means that only Java and C++ applications can
 easily use SAGA to access the grid in an easy way.
 This thesis describes the efforts to add another language to that list,
 namely Python.
 Python is partially supported by the C++ reference implementation, but
 there is no specific Python language binding available which describes
 the SAGA functionality in Python specific way independent of the chosen
 reference implementation.
 During the course of my master project I have specified the Python language
 binding and have implemented the language binding for the Java reference
 implementation.
 
\end_layout

\begin_layout Standard
This thesis is divided into different pieces.
 First I will describe and explain what SAGA is, where it comes from and
 how it is implemented.
 Then I will continue with a description of Python and a special implementation
 of Python called Jython.
 Followed by the specification of the language binding and its implementation.
 After that, the testing, discussion, future work and the conclusion will
 be described.
\end_layout

\begin_layout Section
SAGA
\end_layout

\begin_layout Subsection
SAGA
\end_layout

\begin_layout Subsection
GFD.90
\end_layout

\begin_layout Subsection
Use Cases
\end_layout

\begin_layout Subsection
OMII
\end_layout

\begin_layout Subsection
OGF
\end_layout

\begin_layout Subsection
Previous Work
\end_layout

\begin_layout Subsection
SAGA Reference Implementations
\end_layout

\begin_layout Subsection
Java SAGA Reference Implementation
\end_layout

\begin_layout Subsection
C++ SAGA Reference Implementation
\end_layout

\begin_layout Subsection
Adapters - JavaGAT
\end_layout

\begin_layout Subsection
Adapters
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
pagebreak[0]
\end_layout

\end_inset


\end_layout

\begin_layout Section
Python
\end_layout

\begin_layout Subsection
Explain Python
\end_layout

\begin_layout Subsection
Special Syntax Features
\end_layout

\begin_layout Subsubsection
Named Parameters
\end_layout

\begin_layout Subsubsection
Overloading
\end_layout

\begin_layout Subsubsection
Dynamic Typing
\end_layout

\begin_layout Subsubsection
Extending Python
\end_layout

\begin_layout Subsection
Jython
\end_layout

\begin_layout Subsection
Difference Jython - Python
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
pagebreak[0]
\end_layout

\end_inset


\end_layout

\begin_layout Section
Specification
\end_layout

\begin_layout Subsection
All Modules Specified with Design Decisions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
pagebreak[0]
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
Previous work // Solutions Tested
\end_layout

\begin_layout Subsection
Delegate Object
\end_layout

\begin_layout Subsection
Convert Exception
\end_layout

\begin_layout Subsection
Tasks
\end_layout

\begin_layout Subsection
Inheritance
\end_layout

\begin_layout Subsection
 Get_id()
\end_layout

\begin_layout Subsection
All Modules Specified with Design Decisions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
pagebreak[0]
\end_layout

\end_inset


\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Section
Test Environment
\end_layout

\begin_layout Subsection
scripts
\end_layout

\begin_layout Subsection
Bugs
\end_layout

\begin_layout Subsection
Repository
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
pagebreak[0]
\end_layout

\end_inset


\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Section
Future Work
\end_layout

\begin_layout Subsection
Synchronize specification with LSU
\end_layout

\begin_layout Subsection
Extending the API
\end_layout

\begin_layout Subsection
Special Python operators
\end_layout

\begin_layout Subsection
Updating Implementation with new Reference Implementations
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
pagebreak[0]
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
pagebreak[0]
\end_layout

\end_inset


\end_layout

\begin_layout Section
Bibliography
\end_layout

\begin_layout Section
Acknowledgments
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
pagebreak[0]
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Appendix A: Source Code
\end_layout

\begin_layout Section
Appendix B: Proof of a Higgs-boson
\end_layout

\end_body
\end_document
