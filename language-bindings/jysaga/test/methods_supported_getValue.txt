SHORT LIST

 Task<Directory,Boolean>     isFile(TaskMode mode, URL name)
 Task<Directory,Directory>     openDirectory(TaskMode mode, URL name)
 Task<Directory,FileInputStream>     openFileInputStream(TaskMode mode, URL name)
 Task<Directory,File>     openFile(TaskMode mode, URL name)
 Task<Directory,FileOutputStream>     openFileOutputStream(TaskMode mode, URL name)
 Task<Directory,Long>     getSize(TaskMode mode, URL name)
 Task<File,Integer>     readE(TaskMode mode, String emode, String spec, Buffer buffer)
 Task<File,List<String>>     modesE(TaskMode mode)
 Task<File,Long>     getSize(TaskMode mode)
 Task<File,Void>     readV(TaskMode mode, IOVec[] iovecs)
 Task<Job,InputStream>     getStderr(TaskMode mode)
 Task<Job,JobDescription>     getJobDescription(TaskMode mode)
 Task<Job,OutputStream>     getStdin(TaskMode mode)
 Task<JobService,Job>     createJob(TaskMode mode, JobDescription jd)
 Task<JobService,JobSelf>     getSelf(TaskMode mode)
 Task<JobService,List<String>>     list(TaskMode mode)
 Task<Job,Void>     checkpoint(TaskMode mode)
 Task<LogicalDirectory,List<URL>>     find(TaskMode mode, String namePattern, String[] attrPattern)
 Task<LogicalDirectory,LogicalDirectory>     openLogicalDir(TaskMode mode, URL name, int flags)
 Task<LogicalDirectory,LogicalFile>     openLogicalFile(TaskMode mode, URL name)
 Task<LogicalFile,List<URL>>     listLocations(TaskMode mode)
 Task<LogicalFile,Void>     addLocation(TaskMode mode, URL name)
 Task<NSDirectory,Boolean>     exists(TaskMode mode, URL name)
 Task<NSDirectory,Integer>     getNumEntries(TaskMode mode)
 Task<NSDirectory,List<URL>>     find(TaskMode mode, String pattern)
 Task<NSDirectory,NSDirectory>     openDir(TaskMode mode, URL name)
 Task<NSDirectory,NSEntry>     open(TaskMode mode, URL name, int flags)
 Task<NSDirectory,URL>     getEntry(TaskMode mode, int entry)
 Task<NSDirectory,Void>     changeDir(TaskMode mode, URL dir)
 Task<NSEntry,Boolean>     isLink(TaskMode mode)
 Task<NSEntry,URL>     getCWD(TaskMode mode)
 Task<NSEntry,Void>     close(TaskMode mode)
 Task<RPC,Void>     call(TaskMode mode, Parameter... parameters)
 Task<Stream,Context>     getContext(TaskMode mode)
 Task<Stream,Integer>     read(TaskMode mode, Buffer buffer)
 Task<StreamService,Stream>     serve(TaskMode mode)
 Task<StreamService,URL>     getUrl(TaskMode mode)
 Task<StreamService,Void>     close(TaskMode mode)
 Task<Stream,StreamInputStream>     getInputStream(TaskMode mode)
 Task<Stream,StreamOutputStream>     getOutputStream(TaskMode mode)
 Task<Stream,URL>     getUrl(TaskMode mode)
 Task<Stream,Void>     close(TaskMode mode)
 Task<T,Boolean>     permissionsCheck(TaskMode mode, String id, int permissions)
 Task<T,String>     getGroup(TaskMode mode)
 Task<T,Void>     permissionsAllow(TaskMode mode, String id, int permissions)


Interface Directory

Method Summary
 Task<Directory,Long> 	getSize(TaskMode mode, URL name)
          Creates a task that retrieves the number of bytes in the specified file.
 Task<Directory,Long> 	getSize(TaskMode mode, URL name, int flags)
          Creates a task that retrieves the number of bytes in the specified file.
 long 	getSize(URL name)
          Returns the number of bytes in the specified file.
 long 	getSize(URL name, int flags)
          Returns the number of bytes in the specified file.
 Task<Directory,Boolean> 	isFile(TaskMode mode, URL name)
          Creates a task that tests the name for being a directory entry.
 boolean 	isFile(URL name)
          Tests the name for being a directory entry.
 Task<Directory,Directory> 	openDirectory(TaskMode mode, URL name)
          Creates a task that creates a new Directory instance.
 Task<Directory,Directory> 	openDirectory(TaskMode mode, URL name, int flags)
          Creates a task that creates a new Directory instance.
 Directory 	openDirectory(URL name)
          Creates a new Directory instance.
 Directory 	openDirectory(URL name, int flags)
          Creates a new Directory instance.
 Task<Directory,File> 	openFile(TaskMode mode, URL name)
          Creates a task that creates a new File instance.
 Task<Directory,File> 	openFile(TaskMode mode, URL name, int flags)
          Creates a task that creates a new File instance.
 File 	openFile(URL name)
          Creates a new File instance.
 File 	openFile(URL name, int flags)
          Creates a new File instance.
 Task<Directory,FileInputStream> 	openFileInputStream(TaskMode mode, URL name)
          Creates a task that creates a new FileInputStream instance.
 FileInputStream 	openFileInputStream(URL name)
          Creates a new FileInputStream instance.
 Task<Directory,FileOutputStream> 	openFileOutputStream(TaskMode mode, URL name)
          Creates a task that creates a new FileOutputStream instance.
 Task<Directory,FileOutputStream> 	openFileOutputStream(TaskMode mode, URL name, boolean append)
          Creates a task that creates a new FileOutputStream instance.
 FileOutputStream 	openFileOutputStream(URL name)
          Creates a new FileOutputStream instance.
 FileOutputStream 	openFileOutputStream(URL name, boolean append)
          Creates a new FileOutputStream instance.
  
########################################################################################  
          
org.ogf.saga.file.File

 
Method Summary
 long 	getSize()
          Returns the number of bytes in the file.
 Task<File,Long> 	getSize(TaskMode mode)
          Creates a task that obtains the number of bytes in the file.
 List<String> 	modesE()
          Lists the extended modes available in this implementation and/or on the server side.
 Task<File,List<String>> 	modesE(TaskMode mode)
          Creates a task that lists the extended modes available in this implementation and/or on the server side.
 int 	read(Buffer buffer)
          Reads up to the buffer's size from the file into the buffer.
 int 	read(Buffer buffer, int len)
          Reads up to len bytes from the file into the buffer.
 int 	read(Buffer buffer, int offset, int len)
          Reads up to len bytes from the file into the buffer, at the specified offset.
 Task<File,Integer> 	read(TaskMode mode, Buffer buffer)
          Creates a task that reads up to the buffer's size bytes from the file into the buffer.
 Task<File,Integer> 	read(TaskMode mode, Buffer buffer, int len)
          Creates a task that reads up to len bytes from the file into the buffer.
 Task<File,Integer> 	read(TaskMode mode, Buffer buffer, int offset, int len)
          Creates a task that reads up to len bytes from the file into the buffer at the specified buffer offset.
 int 	readE(String emode, String spec, Buffer buffer)
          Extended read.
 Task<File,Integer> 	readE(TaskMode mode, String emode, String spec, Buffer buffer)
          Creates a task for an extended read.
 int 	readP(String pattern, Buffer buffer)
          Pattern-based read.
 Task<File,Integer> 	readP(TaskMode mode, String pattern, Buffer buffer)
          Creates a task that does a pattern-based read.
 void 	readV(IOVec[] iovecs)
          Gather/scatter read.
 Task<File,Void> 	readV(TaskMode mode, IOVec[] iovecs)
          Creates a task that does a gather/scatter read.
 long 	seek(long offset, SeekMode whence)
          Repositions the current file position as requested.
 Task<File,Long> 	seek(TaskMode mode, long offset, SeekMode whence)
          Creates a task that repositions the current file position as requested.
 int 	sizeE(String emode, String spec)
          Determines the storage size required for an extended I/O operation.
 Task<File,Integer> 	sizeE(TaskMode mode, String emode, String spec)
          Creates a task that determines the storage size required for an extended I/O operation.
 int 	sizeP(String pattern)
          Determines the storage size required for a pattern I/O operation.
 Task<File,Integer> 	sizeP(TaskMode mode, String pattern)
          Creates a task that determines the storage size required for a pattern I/O operation.
 int 	write(Buffer buffer)
          Writes up to the buffer's size bytes from the buffer to the file at the current file position.
 int 	write(Buffer buffer, int len)
          Writes up to len bytes from the buffer to the file at the current file position.
 int 	write(Buffer buffer, int offset, int len)
          Writes up to len bytes from the buffer at the specified buffer offset to the file at the current file position.
 Task<File,Integer> 	write(TaskMode mode, Buffer buffer)
          Creates a task that writes up to the buffer's size bytes from the buffer to the file at the current file position.
 Task<File,Integer> 	write(TaskMode mode, Buffer buffer, int len)
          Creates a task that writes up to len bytes from the buffer to the file at the current file position.
 Task<File,Integer> 	write(TaskMode mode, Buffer buffer, int offset, int len)
          Creates a task that writes up to len bytes from the buffer at the specified buffer offset to the file at the current file position.
 int 	writeE(String emode, String spec, Buffer buffer)
          Extended write.
 Task<File,Integer> 	writeE(TaskMode mode, String emode, String spec, Buffer buffer)
          Creates a task for an extended write.
 int 	writeP(String pattern, Buffer buffer)
          Pattern-based write.
 Task<File,Integer> 	writeP(TaskMode mode, String pattern, Buffer buffer)
          Creates a task that does a pattern-based write.
 void 	writeV(IOVec[] iovecs)
          Gather/scatter write.
 Task<File,Void> 	writeV(TaskMode mode, IOVec[] iovecs)
          Creates a task that does a gather/scatter write.
          
  
########################################################################################  

 org.ogf.saga.job.Job

 
Method Summary
 void 	checkpoint()
          Asks the resource manager to initiate a checkpoint operation on a running job.
 Task<Job,Void> 	checkpoint(TaskMode mode)
          Creates a task that asks the resource manager to initiate a checkpoint operation on a running job.
 JobDescription 	getJobDescription()
          Retrieves the job description that was used to submit this job instance.
 Task<Job,JobDescription> 	getJobDescription(TaskMode mode)
          Creates a task that retrieves the job description that was used to submit this job instance.
 InputStream 	getStderr()
          Returns the error stream of this job (which can be read).
 Task<Job,InputStream> 	getStderr(TaskMode mode)
          Creates a task that obtains the error stream of this job (which can be read).
 OutputStream 	getStdin()
          Returns the input stream of this job (to which can be written).
 Task<Job,OutputStream> 	getStdin(TaskMode mode)
          Creates a task that obtains the input stream of this job (to which can be written).
 InputStream 	getStdout()
          Returns the output stream of this job (which can be read).
 Task<Job,InputStream> 	getStdout(TaskMode mode)
          Creates a task that obtains the output stream of this job (which can be read).
 void 	migrate(JobDescription jd)
          Asks the resource manager to migrate a job.
 Task<Job,Void> 	migrate(TaskMode mode, JobDescription jd)
          Creates a task that asks the resource manager to migrate a job.
 void 	resume()
          Asks the resource manager to perform a resume operation on a suspended job.
 Task<Job,Void> 	resume(TaskMode mode)
          Creates a task that asks the resource manager to perform a resume operation on a suspended job.
 void 	signal(int signum)
          Asks the resource manager to deliver an arbitrary signal to a dispatched job.
 Task<Job,Void> 	signal(TaskMode mode, int signum)
          Creates a task that asks the resource manager to deliver an arbitrary signal to a dispatched job.
 void 	suspend()
          Asks the resource manager to perform a suspend operation on a running job.
 Task<Job,Void> 	suspend(TaskMode mode)
          Creates a task that asks the resource manager to perform a suspend operation on a running job.
   
########################################################################################  
 
org.ogf.saga.job.JobService


Method Summary
 Job 	createJob(JobDescription jd)
          Creates a job instance as specified by the job description provided.
 Task<JobService,Job> 	createJob(TaskMode mode, JobDescription jd)
          Creates a task that creates a job instance as specified by the job description provided.
 Job 	getJob(String jobId)
          Returns the job instance associated with the specified job identification.
 Task<JobService,Job> 	getJob(TaskMode mode, String jobId)
          Creates a task that obtains the job instance associated with the specified job identification.
 JobSelf 	getSelf()
          Returns a job instance representing the calling application.
 Task<JobService,JobSelf> 	getSelf(TaskMode mode)
          Creates a task that obtains a job instance representing the calling application.
 List<String> 	list()
          Obtains the list of jobs that are currently known to the resource manager.
 Task<JobService,List<String>> 	list(TaskMode mode)
          Creates a task that obtains the list of jobs that are currently known to the resource manager.
 Job 	runJob(String commandLine)
          Runs the specified command, non-interactively, on a host chosen by the implementation.
 Job 	runJob(String commandLine, boolean interactive)
          Runs the specified command on a host chosen by the implementation.
 Job 	runJob(String commandLine, String host)
          Runs the specified command, non-interactively, on the specified host.
 Job 	runJob(String commandLine, String host, boolean interactive)
          Runs the specified command on the specified host.
 Task<JobService,Job> 	runJob(TaskMode mode, String commandLine)
          Creates a task that runs the specified command, non-interactively, on a host chosen by the implementation.
 Task<JobService,Job> 	runJob(TaskMode mode, String commandLine, boolean interactive)
          Creates a task that runs the specified command on a host chosen by the implementation.
 Task<JobService,Job> 	runJob(TaskMode mode, String commandLine, String host)
          Creates a task that runs the specified command, non-interactively, on the specified host.
 Task<JobService,Job> 	runJob(TaskMode mode, String commandLine, String host, boolean interactive)
          Creates a task that runs the specified command on the specified host.
 
    
########################################################################################  
  
  
org.ogf.saga.logicalfile.LogicalDirectory

Method Summary
 List<URL> 	find(String namePattern, String[] attrPattern)
          Finds entries in the current directory and below, with matching names and matching meta data.
 List<URL> 	find(String namePattern, String[] attrPattern, int flags)
          Finds entries in the current directory and possibly below, with matching names and matching meta data.
 Task<LogicalDirectory,List<URL>> 	find(TaskMode mode, String namePattern, String[] attrPattern)
          Creates a task that finds entries in the current directory and below, with matching names and matching meta data.
 Task<LogicalDirectory,List<URL>> 	find(TaskMode mode, String namePattern, String[] attrPattern, int flags)
          Creates a task that finds entries in the current directory and below, with matching names and matching meta data.
 Task<NSDirectory,Boolean> 	isFile(TaskMode mode, URL name)
          Creates a task that tests the name for being a logical file.
 boolean 	isFile(URL name)
          Tests the name for being a logical file.
 Task<LogicalDirectory,LogicalDirectory> 	openLogicalDir(TaskMode mode, URL name)
          Creates a task that creates a new LogicalDirectory instance.
 Task<LogicalDirectory,LogicalDirectory> 	openLogicalDir(TaskMode mode, URL name, int flags)
          Creates a task that creates a new LogicalDirectory instance.
 LogicalDirectory 	openLogicalDir(URL name)
          Creates a new LogicalDirectory instance with read flag.
 LogicalDirectory 	openLogicalDir(URL name, int flags)
          Creates a new LogicalDirectory instance.
 Task<LogicalDirectory,LogicalFile> 	openLogicalFile(TaskMode mode, URL name)
          Creates a task that creates a new LogicalFile instance.
 Task<LogicalDirectory,LogicalFile> 	openLogicalFile(TaskMode mode, URL name, int flags)
          Creates a task that creates a new LogicalFile instance.
 LogicalFile 	openLogicalFile(URL name)
          Creates a new LogicalFile instance with read flag.
 LogicalFile 	openLogicalFile(URL name, int flags)
          Creates a new LogicalFile instance. 
  
    
########################################################################################  
 
org.ogf.saga.logicalfile.LogicalFile 
  
 Task<LogicalFile,Void> 	addLocation(TaskMode mode, URL name)
          Creates a task that adds a replica location to the replica set.
 void 	addLocation(URL name)
          Adds a replica location to the replica set.
 List<URL> 	listLocations()
          Lists the locations in this location set.
 Task<LogicalFile,List<URL>> 	listLocations(TaskMode mode)
          Creates a task that lists the locations in this location set.
 Task<LogicalFile,Void> 	removeLocation(TaskMode mode, URL name)
          Creates a task that removes a replica location from the replica set.
 void 	removeLocation(URL name)
          Removes a replica location from the replica set.
 Task<LogicalFile,Void> 	replicate(TaskMode mode, URL name)
          Creates a task that replicates a file from any of the known locations to a new location, with default flags NONE.
 Task<LogicalFile,Void> 	replicate(TaskMode mode, URL name, int flags)
          Creates a task that replicates a file from any of the known locations to a new location.
 void 	replicate(URL name)
          Replicates a file from any of the known locations to a new location, with default flags NONE.
 void 	replicate(URL name, int flags)
          Replicates a file from any of the known locations to a new location.
 Task<LogicalFile,Void> 	updateLocation(TaskMode mode, URL nameOld, URL nameNew)
          Creates a task that changes a replica location in the replica set.
 void 	updateLocation(URL nameOld, URL nameNew)
          Changes a replica location in the replica set. 
  
    
########################################################################################  
  
org.ogf.saga.namespace.NSDirectory

 Task<NSDirectory,Void> 	changeDir(TaskMode mode, URL dir)
          Creates a task that changes the working directory.
 void 	changeDir(URL dir)
          Changes the working directory.
 void 	copy(String source, URL target)
          Copies the source entry to another part of the namespace.
 void 	copy(String source, URL target, int flags)
          Copies the source entry to another part of the namespace.
 Task<NSDirectory,Void> 	copy(TaskMode mode, String source, URL target)
          Creates a task that copies the source entry to another part of the namespace.
 Task<NSDirectory,Void> 	copy(TaskMode mode, String source, URL target, int flags)
          Creates a task that copies the source entry to another part of the namespace.
 Task<NSDirectory,Void> 	copy(TaskMode mode, URL source, URL target)
          Creates a task that copies source the entry to another part of the namespace.
 Task<NSDirectory,Void> 	copy(TaskMode mode, URL source, URL target, int flags)
          Creates a task that copies source the entry to another part of the namespace.
 void 	copy(URL source, URL target)
          Copies the source entry to another part of the namespace.
 void 	copy(URL source, URL target, int flags)
          Copies the source entry to another part of the namespace.
 Task<NSDirectory,Boolean> 	exists(TaskMode mode, URL name)
          Creates a task that queries for the existence of an entry.
 boolean 	exists(URL name)
          Queries for the existence of an entry.
 List<URL> 	find(String pattern)
          Finds entries in the directory and below that match the specified pattern.
 List<URL> 	find(String pattern, int flags)
          Finds entries in the directory and below that match the specified pattern.
 Task<NSDirectory,List<URL>> 	find(TaskMode mode, String pattern)
          Creates a task that finds entries in the directory and below that match the specified pattern.
 Task<NSDirectory,List<URL>> 	find(TaskMode mode, String pattern, int flags)
          Creates a task that finds entries in the directory and below that match the specified pattern.
 URL 	getEntry(int entry)
          Gives the name of an entry in the directory based upon the enumeration defined by getNumEntries().
 Task<NSDirectory,URL> 	getEntry(TaskMode mode, int entry)
          Creates a task that gives the name of an entry in the directory based upon the enumeration defined by getNumEntries().
 int 	getNumEntries()
          Obtains the number of entries in this directory.
 Task<NSDirectory,Integer> 	getNumEntries(TaskMode mode)
          Creates a task that obtains the number of entries in this directory.
 Task<NSDirectory,Boolean> 	isDir(TaskMode mode, URL name)
          Creates a task that tests the name for being a directory.
 boolean 	isDir(URL name)
          Tests the name for being a directory.
 Task<NSDirectory,Boolean> 	isEntry(TaskMode mode, URL name)
          Creates a task that tests the name for being a namespace entry.
 boolean 	isEntry(URL name)
          Tests the name for being a namespace entry.
 Task<NSDirectory,Boolean> 	isLink(TaskMode mode, URL name)
          Creates a task that tests the name for being a link.
 boolean 	isLink(URL name)
          Tests the name for being a link.
 void 	link(String source, URL target)
          Creates a symbolic link from the specified target to the specified source.
 void 	link(String source, URL target, int flags)
          Creates a symbolic link from the specified target to the specified source.
 Task<NSDirectory,Void> 	link(TaskMode mode, String source, URL target)
          Creates a task that creates a symbolic link from the specified target to the specified source.
 Task<NSDirectory,Void> 	link(TaskMode mode, String source, URL target, int flags)
          Creates a task that creates a symbolic link from the specified target to the specified source.
 Task<NSDirectory,Void> 	link(TaskMode mode, URL source, URL target)
          Creates a task that creates a symbolic link from the specified target to the specified source.
 Task<NSDirectory,Void> 	link(TaskMode mode, URL source, URL target, int flags)
          Creates a task that creates a symbolic link from the specified target to the specified source.
 void 	link(URL source, URL target)
          Creates a symbolic link from the specified target to the specified source.
 void 	link(URL source, URL target, int flags)
          Creates a symbolic link from the specified target to the specified source.
 List<URL> 	list()
          Lists entries in the directory.
 List<URL> 	list(int flags)
          Lists entries in the directory.
 List<URL> 	list(String pattern)
          Lists entries in the directory that match the specified pattern.
 List<URL> 	list(String pattern, int flags)
          Lists entries in the directory that match the specified pattern.
 Task<NSDirectory,List<URL>> 	list(TaskMode mode)
          Creates a task that lists entries in the directory.
 Task<NSDirectory,List<URL>> 	list(TaskMode mode, int flags)
          Creates a task that lists entries in the directory.
 Task<NSDirectory,List<URL>> 	list(TaskMode mode, String pattern)
          Creates a task that lists entries in the directory that match the specified pattern.
 Task<NSDirectory,List<URL>> 	list(TaskMode mode, String pattern, int flags)
          Creates a task that lists entries in the directory that match the specified pattern.
 Task<NSDirectory,Void> 	makeDir(TaskMode mode, URL target)
          Creates a task that creates a new directory.
 Task<NSDirectory,Void> 	makeDir(TaskMode mode, URL target, int flags)
          Creates a task that creates a new directory.
 void 	makeDir(URL target)
          Creates a new directory.
 void 	makeDir(URL target, int flags)
          Creates a new directory.
 void 	move(String source, URL target)
          Renames the specified source to the specified target, or move the specified source to the specified target if the target is a directory.
 void 	move(String source, URL target, int flags)
          Renames the specified source to the specified target, or move the specified source to the specified target if the target is a directory.
 Task<NSDirectory,Void> 	move(TaskMode mode, String source, URL target)
          Creates a task that renames the specified source to the specified target, or move the specified source to the specified target if the target is a directory.
 Task<NSDirectory,Void> 	move(TaskMode mode, String source, URL target, int flags)
          Creates a task that renames the specified source to the specified target, or move the specified source to the specified target if the target is a directory.
 Task<NSDirectory,Void> 	move(TaskMode mode, URL source, URL target)
          Creates a task that renames the specified source to the specified target, or move the specified source to the specified target if the target is a directory.
 Task<NSDirectory,Void> 	move(TaskMode mode, URL source, URL target, int flags)
          Creates a task that renames the specified source to the specified target, or move the specified source to the specified target if the target is a directory.
 void 	move(URL source, URL target)
          Renames the specified source to the specified target, or move the specified source to the specified target if the target is a directory.
 void 	move(URL source, URL target, int flags)
          Renames the specified source to the specified target, or move the specified source to the specified target if the target is a directory.
 Task<NSDirectory,NSEntry> 	open(TaskMode mode, URL name)
          Creates a task that creates a new NamespaceEntry instance.
 Task<NSDirectory,NSEntry> 	open(TaskMode mode, URL name, int flags)
          Creates a task that creates a new NamespaceEntry instance.
 NSEntry 	open(URL name)
          Creates a new NamespaceEntry instance.
 NSEntry 	open(URL name, int flags)
          Creates a new NamespaceEntry instance.
 Task<NSDirectory,NSDirectory> 	openDir(TaskMode mode, URL name)
          Creates a task that creates a new NamespaceDirectory instance.
 Task<NSDirectory,NSDirectory> 	openDir(TaskMode mode, URL name, int flags)
          Creates a task that creates a new NamespaceDirectory instance.
 NSDirectory 	openDir(URL name)
          Creates a new NamespaceDirectory instance.
 NSDirectory 	openDir(URL name, int flags)
          Creates a new NamespaceDirectory instance.
 void 	permissionsAllow(String target, String id, int permissions)
          Allows the specified permissions for the specified id.
 void 	permissionsAllow(String target, String id, int permissions, int flags)
          Allows the specified permissions for the specified id.
 Task<NSDirectory,Void> 	permissionsAllow(TaskMode mode, String target, String id, int permissions)
          Creates a task that enables the specified permissions for the specified id.
 Task<NSDirectory,Void> 	permissionsAllow(TaskMode mode, String target, String id, int permissions, int flags)
          Creates a task that enables the specified permissions for the specified id.
 Task<NSDirectory,Void> 	permissionsAllow(TaskMode mode, URL target, String id, int permissions)
          Creates a task that enables the specified permissions for the specified id.
 Task<NSDirectory,Void> 	permissionsAllow(TaskMode mode, URL target, String id, int permissions, int flags)
          Creates a task that enables the specified permissions for the specified id.
 void 	permissionsAllow(URL target, String id, int permissions)
          Allows the specified permissions for the specified id.
 void 	permissionsAllow(URL target, String id, int permissions, int flags)
          Allows the specified permissions for the specified id.
 void 	permissionsDeny(String target, String id, int permissions)
          Denies the specified permissions for the specified id.
 void 	permissionsDeny(String target, String id, int permissions, int flags)
          Denies the specified permissions for the specified id.
 Task<NSDirectory,Void> 	permissionsDeny(TaskMode mode, String target, String id, int permissions)
          Creates a task that disables the specified permissions for the specified id.
 Task<NSDirectory,Void> 	permissionsDeny(TaskMode mode, String target, String id, int permissions, int flags)
          Creates a task that disables the specified permissions for the specified id.
 Task<NSDirectory,Void> 	permissionsDeny(TaskMode mode, URL target, String id, int permissions)
          Creates a task that disables the specified permissions for the specified id.
 Task<NSDirectory,Void> 	permissionsDeny(TaskMode mode, URL target, String id, int permissions, int flags)
          Creates a task that disables the specified permissions for the specified id.
 void 	permissionsDeny(URL target, String id, int permissions)
          Denies the specified permissions for the specified id.
 void 	permissionsDeny(URL target, String id, int permissions, int flags)
          Denies the specified permissions for the specified id.
 Task<NSDirectory,URL> 	readLink(TaskMode mode, URL name)
          Creates a task that returns the URL representing the link target.
 URL 	readLink(URL name)
          Returns the URL representing the link target.
 void 	remove(String target)
          Removes the specified entry.
 void 	remove(String target, int flags)
          Removes the specified entry.
 Task<NSDirectory,Void> 	remove(TaskMode mode, String target)
          Creates a task that removes the specified entry.
 Task<NSDirectory,Void> 	remove(TaskMode mode, String target, int flags)
          Creates a task that removes the specified entry.
 Task<NSDirectory,Void> 	remove(TaskMode mode, URL target)
          Creates a task that removes the specified entry.
 Task<NSDirectory,Void> 	remove(TaskMode mode, URL target, int flags)
          Creates a task that removes the specified entry.
 void 	remove(URL target)
          Removes the specified entry.
 void 	remove(URL target, int flags)
          Removes the specified entry. 
  
    
########################################################################################  
  
 org.ogf.saga.namespace.NSEntry 
  
 close()
          Closes this entry.
 void 	close(float timeoutInSeconds)
          Closes this entry.
 Task<NSEntry,Void> 	close(TaskMode mode)
          Creates a task that closes this entry.
 Task<NSEntry,Void> 	close(TaskMode mode, float timeoutInSeconds)
          Creates a task that closes this entry.
 Task<NSEntry,Void> 	copy(TaskMode mode, URL target)
          Creates a task that copies this entry to another part of the namespace.
 Task<NSEntry,Void> 	copy(TaskMode mode, URL target, int flags)
          Creates a task that copies this entry to another part of the namespace.
 void 	copy(URL target)
          Copies this entry to another part of the namespace.
 void 	copy(URL target, int flags)
          Copies this entry to another part of the namespace.
 URL 	getCWD()
          Obtains the current working directory for the entry.
 Task<NSEntry,URL> 	getCWD(TaskMode mode)
          Creates a task that obtains a String representing the current working directory for the entry.
 URL 	getName()
          Obtains the name part of the URL of this entry.
 Task<NSEntry,URL> 	getName(TaskMode mode)
          Creates a task that obtains the name part of the URL of this entry.
 URL 	getURL()
          Obtains the complete URL refering to the entry.
 Task<NSEntry,URL> 	getURL(TaskMode mode)
          Creates a task that obtains the complete URL pointing to the entry.
 boolean 	isDir()
          Tests this entry for being a directory.
 Task<NSEntry,Boolean> 	isDir(TaskMode mode)
          Creates a task that tests this entry for being a directory.
 boolean 	isEntry()
          Tests this entry for being a namespace entry.
 Task<NSEntry,Boolean> 	isEntry(TaskMode mode)
          Creates a task that tests this entry for being a namespace entry.
 boolean 	isLink()
          Tests this entry for being a link.
 Task<NSEntry,Boolean> 	isLink(TaskMode mode)
          Creates a task that tests this entry for being a link.
 Task<NSEntry,Void> 	link(TaskMode mode, URL target)
          Creates a task that creates a symbolic link from the target to this entry.
 Task<NSEntry,Void> 	link(TaskMode mode, URL target, int flags)
          Creates a task that creates a symbolic link from the target to this entry.
 void 	link(URL target)
          Creates a symbolic link from the target to this entry.
 void 	link(URL target, int flags)
          Creates a symbolic link from the target to this entry.
 Task<NSEntry,Void> 	move(TaskMode mode, URL target)
          Creates a task that renames this entry to the target, or moves this entry to the target if it is a directory.
 Task<NSEntry,Void> 	move(TaskMode mode, URL target, int flags)
          Creates a task that renames this entry to the target, or moves this entry to the target if it is a directory.
 void 	move(URL target)
          Renames this entry to the target, or moves this entry to the target if it is a directory.
 void 	move(URL target, int flags)
          Renames this entry to the target, or moves this entry to the target if it is a directory.
 void 	permissionsAllow(String id, int permissions, int flags)
          Allows the specified permissions for the specified id.
 Task<NSEntry,Void> 	permissionsAllow(TaskMode mode, String id, int permissions, int flags)
          Creates a task that enables the specified permissions for the specified id.
 void 	permissionsDeny(String id, int permissions, int flags)
          Denies the specified permissions for the specified id.
 Task<NSEntry,Void> 	permissionsDeny(TaskMode mode, String id, int permissions, int flags)
          Creates a task that disables the specified permissions for the specified id.
 URL 	readLink()
          Returns the URL representing the link target.
 Task<NSEntry,URL> 	readLink(TaskMode mode)
          Creates a task that returns the URL representing the link target.
 void 	remove()
          Removes this entry and closes it.
 void 	remove(int flags)
          Removes this entry and closes it.
 Task<NSEntry,Void> 	remove(TaskMode mode)
          Creates a task that removes this entry and closes it.
 Task<NSEntry,Void> 	remove(TaskMode mode, int flags)
          Creates a task that removes this entry and closes it.
  
########################################################################################  

org.ogf.saga.permissions.Permissions
 String 	getGroup()
          Gets the group id of the entity.
 Task<T,String> 	getGroup(TaskMode mode)
          Creates a task that obtains the group id of the entity.
 String 	getOwner()
          Gets the owner id of the entity.
 Task<T,String> 	getOwner(TaskMode mode)
          Creates a task that obtains the owner id of the entity.
 void 	permissionsAllow(String id, int permissions)
          Allows the specified permissions for the specified id.
 Task<T,Void> 	permissionsAllow(TaskMode mode, String id, int permissions)
          Creates a task that enables the specified permissions for the specified id.
 boolean 	permissionsCheck(String id, int permissions)
          Determines if the specified permissions are enabled for the specified id.
 Task<T,Boolean> 	permissionsCheck(TaskMode mode, String id, int permissions)
          Creates a task that determines if the specified permissions are enabled for the specified id.
 void 	permissionsDeny(String id, int permissions)
          Denies the specified permissions for the specified id.
 Task<T,Void> 	permissionsDeny(TaskMode mode, String id, int permissions)
          Creates a task that disables the specified permissions for the specified id.
          
          
 
          
########################################################################################  


org.ogf.saga.rpc.RPC


Method Summary
 void 	call(Parameter... parameters)
          Calls the remote procedure.
 Task<RPC,Void> 	call(TaskMode mode, Parameter... parameters)
          Creates a task for calling the remote procedure.
 void 	close()
          Non-blocking close of the RPC handle instance.
 void 	close(float timeoutInSeconds)
          Closes the RPC handle instance.
 Task<RPC,Void> 	close(TaskMode mode)
          Creates a task for closing the RPC handle instance.
 Task<RPC,Void> 	close(TaskMode mode, float timeoutInSeconds)
          Creates a task for closing the RPC handle instance.
          
########################################################################################  

org.ogf.saga.stream.Stream

 void 	close()
          Closes an active connection.
 void 	close(float timeoutInSeconds)
          Closes an active connection.
 Task<Stream,Void> 	close(TaskMode mode)
          Returns a task that closes an active connection.
 Task<Stream,Void> 	close(TaskMode mode, float timeoutInSeconds)
          Returns a task that closes an active connection.
 void 	connect()
          Establishes a connection to the target defined during the construction of the stream.
 Task<Stream,Void> 	connect(TaskMode mode)
          Returns a task that establishes a connection to the target defined during the construction of the stream.
 Context 	getContext()
          Returns the remote authorization info.
 Task<Stream,Context> 	getContext(TaskMode mode)
          Creates a task that obtains the remote authorization info.
 StreamInputStream 	getInputStream()
          Obtains an InputStream from the stream.
 Task<Stream,StreamInputStream> 	getInputStream(TaskMode mode)
          Creates a task that obtains an OutputStream from the stream.
 StreamOutputStream 	getOutputStream()
          Obtains an OutputStream from the stream.
 Task<Stream,StreamOutputStream> 	getOutputStream(TaskMode mode)
          Creates a task that obtains an OutputStream from the stream.
 URL 	getUrl()
          Obtains the URL that was used to create the stream.
 Task<Stream,URL> 	getUrl(TaskMode mode)
          Creates a task that obtains the URL that was used to create the stream.
 int 	read(Buffer buffer)
          Reads a raw buffer from the stream.
 int 	read(Buffer buffer, int len)
          Reads a raw buffer from the stream.
 Task<Stream,Integer> 	read(TaskMode mode, Buffer buffer)
          Creates a task that reads a raw buffer from the stream.
 Task<Stream,Integer> 	read(TaskMode mode, Buffer buffer, int len)
          Creates a task that reads a raw buffer from the stream.
 int 	waitFor(int what)
          Checks if the stream is ready for I/O, or if it has entered the ERROR state.
 int 	waitFor(int what, float timeoutInSeconds)
          Checks if the stream is ready for I/O, or if it has entered the ERROR state.
 Task<Stream,Integer> 	waitFor(TaskMode mode, int what)
          Returns a task that checks if the stream is ready for I/O, or if it has entered the ERROR state.
 Task<Stream,Integer> 	waitFor(TaskMode mode, int what, float timeoutInSeconds)
          Returns a task that checks if the stream is ready for I/O, or if it has entered the ERROR state.
 int 	write(Buffer buffer)
          Writes a raw buffer to the stream.
 int 	write(Buffer buffer, int len)
          Writes a raw buffer to the stream.
 Task<Stream,Integer> 	write(TaskMode mode, Buffer buffer)
          Creates a task that writes a raw buffer to the stream.
 Task<Stream,Integer> 	write(TaskMode mode, Buffer buffer, int len)
          Creates a task that writes a raw buffer to the stream.          
########################################################################################  

org.ogf.saga.stream.StreamService

Method Summary
 void 	close()
          Closes a stream service.
 void 	close(float timeoutInSeconds)
          Closes a stream service.
 Task<StreamService,Void> 	close(TaskMode mode)
          Obtains a task that closes a stream service.
 Task<StreamService,Void> 	close(TaskMode mode, float timeoutInSeconds)
          Obtains a task that closes a stream service.
 URL 	getUrl()
          Obtains the URL to be used to connect to this server.
 Task<StreamService,URL> 	getUrl(TaskMode mode)
          Obtains a task to obtain the URL to be used to connect to this server.
 Stream 	serve()
          Waits for incoming client connections (like an accept of a serversocket).
 Stream 	serve(float timeoutInSeconds)
          Waits for incoming client connections (like an accept of a serversocket).
 Task<StreamService,Stream> 	serve(TaskMode mode)
          Obtains a task that waits for incoming client connections (like an accept of a serversocket).
 Task<StreamService,Stream> 	serve(TaskMode mode, float timeoutInSeconds)
          Obtains a task that waits for incoming client connections (like an accept of a serversocket).

########################################################################################  
                                    
                  
           


                   