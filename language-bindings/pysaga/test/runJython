#!/usr/bin/perl -w
#
# Used to start the Jython interpreter.
#
# Copyright (C) 2004-2005, Ben Burton <bab@debian.org>
# Released under the GPL.
#
# Edited to include the Saga jar files
use strict;
use Text::ParseWords;

# Debian constants.
#
my $jythonHome = '/usr/share/jython';
my $debianJNIDir = '/usr/lib/jni';
my $defaultRuntime = '/usr/bin/java';

# Establish the user's home directory.
#
my $home = $ENV{HOME} || $ENV{LOGDIR};
$home or bail("I cannot determine your home directory.",
	"Please set \$HOME and try again.");

# Decide upon the Java runtime.
#
my $javaRuntime = undef;
if ($ENV{JAVA}) {
	$javaRuntime = $ENV{JAVA};
} elsif (-x $defaultRuntime) {
	$javaRuntime = $defaultRuntime;
} else {
	&warn("The default Java runtime ($defaultRuntime) cannot be executed.",
		"Since every Java runtime in Debian must supply an alternative",
		"for $defaultRuntime, your system is almost certainly misconfigured.");
	if ($ENV{JAVA_HOME}) {
		&warn("Using \$JAVA_HOME/bin/java instead.");
		$javaRuntime = "$ENV{JAVA_HOME}/bin/java";
	} else {
		bail("I cannot find an appropriate Java runtime to use instead.",
			"Please set \$JAVA to the appropriate binary and try again.");
	}
}

# Decide upon and export the classpath.
# Add in $CLASSPATH as well as other useful libraries if they exist.
#
my $classpath = '/usr/share/java/jython.jar';
appendClasspath($ENV{CLASSPATH});
appendJar('/usr/share/java/servlet-api-2.4.jar');
appendJar('/usr/share/java/libreadline-java.jar');
appendJar('/usr/share/java/mysql.jar');
appendJar('/usr/share/java/postgresql.jar');
$ENV{CLASSPATH} = $classpath;

# Decide upon the python path.
my $jythonPath = "/usr/lib/site-python:../src";

# Set up the cache directory.
#
my $cacheDir = "$home/.jython-cache";
if (-e $cacheDir and ! -d $cacheDir) {
	# The expected cache directory exists but is not a directory.
	# Use a temporary directory instead.
	$cacheDir = `mktemp -dt jython-cache.XXXXXX` or
		bail("Could not create temporary cache directory.");
	chomp $cacheDir;
}
if (! -e $cacheDir) {
	# Create a new cache directory.
	mkdir $cacheDir or bail("Could not create cache directory $cacheDir.");
}

# We will build up a JNI library path from various places.
#
my $jniPath = '';

# Run through $JAVA_OPTIONS and extract the java arguments.
# Any JNI library path arguments will be removed and put into $jniPath
# instead.
#
my @javaArgs = ();

if ($ENV{JAVA_OPTIONS}) {
	foreach my $arg (shellwords($ENV{JAVA_OPTIONS})) {
		if ($arg =~ /^-Djava\.library\.path=(.+)$/) {
			$jniPath = $jniPath ? "$jniPath:$1" : "$1";
		} else {
			push @javaArgs, $arg;
		}
	}
}

# Run through the command-line options and extract the jython arguments.
# Any -Djava... arguments will be reassigned as java arguments instead
# (unless it's for the JNI library path, in which case it will go to
# $jniPath).
#
my @jythonArgs = ();

foreach my $arg (@ARGV) {
	if ($arg =~ /^-Djava\.library\.path=(.+)$/) {
		$jniPath = $jniPath ? "$jniPath:$1" : "$1";
	} elsif ($arg =~ /^-Djava/) {
		push @javaArgs, $arg;
	} else {
		push @jythonArgs, $arg;
	}
}

# Finish by adding the debian JNI directory to $jniPath if it's not
# already present, since some popular non-free JVMs still don't support
# it (grumble).
#
if ($jniPath !~ /(^|:)$debianJNIDir($|:)/) {
	$jniPath = $jniPath ? "$jniPath:$debianJNIDir" : $debianJNIDir;
}

# Invoke jython!
#
my @fullCommandLine = ( $javaRuntime );
push @fullCommandLine, @javaArgs;
push @fullCommandLine, "-Djava.library.path=$jniPath";
push @fullCommandLine, "-Dpython.home=$jythonHome";
push @fullCommandLine, "-Dpython.path=$jythonPath";
push @fullCommandLine, "-Dpython.cachedir=$cacheDir";
push @fullCommandLine, "-Dpython.console=org.python.util.ReadlineConsole";
push @fullCommandLine, "-Dpython.console.readlinelib=Editline";
$ENV{CALLED_FROM_JYTHONC} and
	push @fullCommandLine, "-Dpython.jythonc.compiler=$ENV{JAVAC}";
push @fullCommandLine, 'org.python.util.jython';
push @fullCommandLine, @jythonArgs;
$ENV{JYTHON_WRAPPER_DEBUG} and print "$ENV{CLASSPATH}\n\n@fullCommandLine\n\n";
exec @fullCommandLine or exit(1);

# All done.
#
exit 0;

# Helper routines:

# Print the given warning messages to stderr, one per line.
# The messages should not contain trailing newlines.
#
sub warn {
	foreach (@_) {
		print STDERR "WARNING: $_\n";
	}
}

# Print the given error messages to stderr, one per line, and exit.
# The messages should not contain trailing newlines.
#
sub bail {
	foreach (@_) {
		print STDERR "ERROR: $_\n";
	}
	exit 1;
}

# Append the given string to the classpath if it's non-empty.
#
sub appendClasspath {
	my $string = shift;
	$string and $classpath = "$classpath:$string";
}

# Append the given jar to the classpath if it exists.
#
sub appendJar {
	my $jar = shift;
	-e $jar and $classpath = "$classpath:$jar";
}

# Append the given directory to the python path if it exists.
#
sub appendPythonDir {
	my $dir = shift;
	-d $dir and $jythonPath = "$jythonPath:$dir";
}

