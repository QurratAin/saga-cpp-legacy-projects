SAGA on FutureGrid
==================

Activity:
---------

The Simple API for Grid Applications (SAGA) is an OGF standard
(http://www.ogf.org), and defines a high level, application driven API for
developing first principle distributed applications, and for distributed
application frameworks and tools. Our SAGA project (see
http://www.saga-project.org/) provides SAGA API implementations in C++
and Python, which interface to a variety of middleware backends, as well
as higher level application frameworks, such as Master-Worker, MapReduce,
AllPairs, BigJobs.  For all those components, we intent to use futuregrid
and the different software environments available on FG for extensive
portability and interoperability testing, but also for scale-up and
scale-out experiments. These activities allow to harden the SAGA
components described above.


Achievement:
------------

FG has provided a persistent, production-grade experimental
infrastructure with the ability to perform controlled experiments, without
violating production policies and disrupting production infrastructure
priorities.Â  These attributes coupled with excellent technical support --
the bedrock upon which all these capabilities depend, have resulted in the
following specific advances in the short period of under a year:

[[With all due respect, the FG support is friendly, understanding,
supportive, but not quick.  We understand the reasons for that, as
far as we are privy of them, but I personally would be hard-pressed
to call the support excellent, despite being very appreciative of it]]


1.Use of FG for Standards based development and interoperability tests:

We have in particular been able to prepare SAGA for future deployments
on XSEDE, by testing the SAGA-BES adaptor in a variety of configurations,
against Unicore and Genesis-II backends, with UserPass and Certificate
based authentication, with POSIX and HPC application types, with and
without file staging support.  While those tests are still ongoing, it
allows us to be confident toward the expected XSEDE middleware evolution.

Further, we are continuously using FG based job submission endpoints for
GIN driven interoperation tests with a variety of other production Grid
infrastructures, including DEISA, PRACE, Teragrid and EGI (see
http://forge.gridforum.org/sf/projects/gin/ and
http://www.saga-project.org/interop-demos/ .

In order to simplify the deployment and to improve end user support for
SAGA, we have been using FG hosts to develop, test and harden our deployment
procedures, by mimicking the CSA approach we currently use on TeraGrid and
XSEDE.  At the same time, that deployment testing makes SAGA and SAGA based
components available and maintained on all FG endpoints.


2. Use of FG for Analysing & Comparing Programming Models and Run-time tools
for Computation and Data-Intensive Science.

[[Shantenu]]


3. Use of FG for Developing Hybrid Cloud-Grid Scientific Applications and
Tools (Autonomic Schedulers) [Work in Conjunction with Manish Parashar's
group]

[[Yaakoub]]
So you want the SAGA/Eucalyptus stuff that Andre worked on or the EnKF+Comet
stuff? Please advise.

Saga has also produced the following papers:
... 


FuturePlans:
------------

We will be continuing to use FG as a resource for SAGA development.
Amongst others, we intent: to move the testing infrastructure to other
SAGA based components, like our PilotJob and PilotData frameworks;
to widen the set of middlewares used for testing (with again having
XSEDE and other PGIs in mind); to enhancing the scope and scale of our
scalability testing.

