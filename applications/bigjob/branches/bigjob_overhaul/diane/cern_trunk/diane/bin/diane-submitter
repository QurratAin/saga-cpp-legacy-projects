#!/usr/bin/env python
# -*- python -*-

#  ==========================================
#  DIANE - Distributed Analysis Environment 
#  http://cern.ch/diane
#  ------------------------------------------                                          
#  This program is under GPL licence.
#  See README file for details.
#  ==========================================

#$Id: diane-ls,v 1.2 2008/08/21 15:28:32 shsiung Exp $

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Perform setup of the environment.
# This is a Copy/Paste logic which must stay in THIS file
def standardSetup():
   import sys, os.path
   # insert the path to DIANE itself
   exeDir = os.path.abspath(os.path.normpath(os.path.dirname(sys.argv[0])))
   pythonDir = os.path.join(os.path.dirname(exeDir), 'python' )
   sys.path.insert(0, pythonDir)
   # setup environment
   import diane.PACKAGE
   diane.PACKAGE.standardSetup()

standardSetup()
del standardSetup
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

import sys

from diane.util.ExtendedOptionParser import ExtendedOptionParser, OptionParser

from diane.logger import getLogger,logging
logger = getLogger('diane-submitter')

from optparse import OptionParser

parser = OptionParser(usage="%prog [opts] submitter [submitter_opts]",
                      description="""Submit worker agents using the submitter scripts written with the Ganga interface. %prog X --help shows the list of options for submitter X.""")

parser.disable_interspersed_args()

parser.add_option("-l", "--list-all", dest="list_all", action="store_true", default=False, help="list all available submitters")

parser.add_option("-i", "--interactive", dest="interactive", action="store_true", default=False, help="enter Ganga interactive prompt")

parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,help="print more verbose information and run Ganga with standard verbosity")

parser.add_option("--debug", dest="debug", action="store_true", default=False,help="print lots of debug information")

(options, args) = parser.parse_args()

if options.verbose:
   logger.setLevel(logging.INFO)

if options.debug:
   logger.setLevel(logging.DEBUG)

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# initialize DIANE runtime subsystems (config etc)
import diane.PACKAGE
diane.PACKAGE.initializeRuntime()
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#import subprocess, glob, diane.workspace

import os,glob,subprocess
import diane.workspace

def list_all():
   logger.user('Available submitters:')

   # this was supposed to import the submitters and extract brief info, but was not enabled due to prinout side effects
   def brief_info(submitter):
      return ''

   def list_submitters(p):
      for fn in glob.glob(os.path.join(p,'*Submitter.py')):
         submitter = os.path.basename(fn)[0:-len('Submitter.py')]
         logger.user("%20s %s (located at %s)"%(submitter,brief_info(submitter),fn))

   list_submitters(diane.workspace.getPath('submitters'))
   list_submitters(os.path.join(os.path.dirname(diane.__file__),'submitters'))


if not args and not options.interactive and not options.list_all:
   parser.print_help()
   sys.exit(0)

if options.list_all:
   list_all()

def which(program):
    import os
    def is_exe(fpath):
        return os.path.exists(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None

if args or options.interactive==True:
   ganga = which('ganga')
   if not ganga:
      logger.error('ganga executable not found in the PATH (%s)'%os.environ["PATH"])
   else:
      if args:
         submitter = args[0]+'Submitter.py'
         args = [submitter]+args[1:]
      logger.user('calling: %s '%ganga+' '.join(args))
      try:
         output_flag = '--quiet'
         if options.verbose:
            output_flag = ''
         if options.debug:
            output_flag = '--debug'
         retcode = subprocess.call([ganga,output_flag]+args)
         if retcode < 0:
            logger.error("ganga was terminated by signal %d", -retcode)
         else:
            if retcode:
               logger.error("ganga returned a non-zero exit code %d",retcode)
      except OSError, e:
         logger.error("ganga execution failed: %s",e)

