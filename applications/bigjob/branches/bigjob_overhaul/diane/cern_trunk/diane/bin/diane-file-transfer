#!/usr/bin/env python
# -*- python -*-

#  ==========================================
#  DIANE - Distributed Analysis Environment 
#  http://cern.ch/diane
#  ------------------------------------------                                          
#  This program is under GPL licence.
#  See README file for details.
#  ==========================================

#$Id: diane-file-transfer,v 1.3 2008/05/28 17:35:14 moscicki Exp $

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Perform setup of the environment.
# This is a Copy/Paste logic which must stay in THIS file
def standardSetup():
   import sys, os.path
   # insert the path to DIANE itself
   exeDir = os.path.abspath(os.path.normpath(os.path.dirname(sys.argv[0])))
   pythonDir = os.path.join(os.path.dirname(exeDir), 'python' )
   sys.path.insert(0, pythonDir)
   # setup environment
   import diane.PACKAGE
   diane.PACKAGE.standardSetup()

standardSetup()
del standardSetup
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

import os,sys
from optparse import OptionParser

parser = OptionParser(usage="%prog [opts] [--client client_opts files]",
                      description="Run a file server. This program may be used as a client if --upload or --download options are specified.")

parser.add_option("--debug", dest="loglevel", action="store_const", const='DEBUG',help="print lots of debug information")
parser.add_option("-f","--ior-file", dest="ior_filename", default="FileTransferServerOID",
                  help="use FILE to store/retrieve server identifier", metavar="FILE")
parser.add_option("-o","--option",dest="transfer_options",action="append",help="client transfer options : md5_lazy, overwrite")
parser.add_option("-u","--upload",dest="mode",action="store_const",const="upload",help="client transfer mode: put files to server")
parser.add_option("-d","--download",dest="mode",action="store_const",const="download",help="client transfer mode: get files from server")
parser.set_defaults(mode="server",transfer_options=[])

(options, args) = parser.parse_args()

import diane.logger

if options.loglevel:
   diane.logger.setLevel(options.loglevel)

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# initialize DIANE runtime subsystems (config etc)
import diane.PACKAGE
diane.PACKAGE.initializeRuntime()
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


logger=diane.logger.getLogger('diane-file-transfer')

if options.mode=='server':
   logger.info("Running file transfer server (use --help to run as a client)")
   if args:
      logger.warning("extra arguments ignored: %s",args)
   import diane.FileTransfer.Server
   diane.FileTransfer.Server.main(options.ior_filename)
else:
   if not args:
      logger.error("No files specified for %s (use --help to see syntax)",options.mode)
      sys.exit(2)
   logger.info("This is file transfer client.")

   from diane.FileTransfer import FileTransferClient, FileTransferOptions
   opts = FileTransferOptions(md5_lazy=True)
   
   for spec in options.transfer_options:
      try:
         attr,val = spec.split('=')
      except ValueError:
         logger.error('Malformed transfer option: %s',spec)
         sys.exit(2)
      if not hasattr(opts,attr):
         logger.error('Unknown transfer option: %s',attr)
         sys.exit(2)
      try:
         val = eval(val)
      except Exception,x:
         logger.error('Problem with %s: %s',spec,str(x))
      setattr(opts,attr,val)
      
   from diane.CORBAProgram import CORBAProgram
   program = CORBAProgram() #config_file=omniorb_config_filename,enable_GSI=enable_GSI)
   file_server=program.orb.string_to_object(file(options.ior_filename).read())
   import DIANE_CORBA, CORBA
   file_server=file_server._narrow(DIANE_CORBA.FileTransferServer)

   c = FileTransferClient(file_server)
   transfer = getattr(c,options.mode)

   for fn in args:
      try:
         transfer(fn,opts=opts)
      except DIANE_CORBA.XFileTransferError,x:
         logger.warning(x.message)
      except CORBA.TRANSIENT:
         logger.error('unable to connect to file server')
      

## uri = 'IOR:010000001e00000049444c3a4449414e455f434f5242412f52756e4d61737465723a312e3000000001000000000000007000000001010200100000003133372e3133382e3139302e32313500985e000017000000ff52756e4d6173746572504f410052756e4d6173746572000200000000000000080000000100000000545441010000001c00000001000000010001000100000001000105090101000100000009010100'

## #uri="corbaloc::myhost:22000/MyObjectKey"
## uri="corbaloc::137.138.190.215:24216/.RunMasterPOA.RunMaster"
## #uri="corbaloc::137.138.190.215:24216/RunMaster"
## uri="corbaloc::137.138.190.215:2674/RunMaster"

## import omniORB.PortableServer
## print dir(omniORB.PortableServer)

## print omniORB.__file__

## master = program.orb.string_to_object(uri)
## print 1,master
## import DIANE_CORBA
## master = master._narrow(DIANE_CORBA.RunMaster)
## print 2,master
## print 'ping:',master.ping("","")
## print 3


