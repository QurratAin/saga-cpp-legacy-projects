#!/usr/bin/env python
# -*- python -*-

#  ==========================================
#  DIANE - Distributed Analysis Environment 
#  http://cern.ch/diane
#  ------------------------------------------                                          
#  This program is under GPL licence.
#  See README file for details.
#  ==========================================

#$Id: diane-env,v 1.4 2008/08/25 17:45:17 moscicki Exp $

import sys,os

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Perform setup of the environment.
# This is a Copy/Paste logic which must stay in THIS file
def standardSetup():
   import sys, os.path
   # insert the path to DIANE itself
   exeDir = os.path.abspath(os.path.normpath(os.path.dirname(sys.argv[0])))
   pythonDir = os.path.join(os.path.dirname(exeDir), 'python' )
   sys.path.insert(0, pythonDir)
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PROG = os.path.basename(sys.argv[0])

help = """syntax: %PROG% [-h|--help] [-d|--devel [program [args]]]

Determine the minimal user environment and print commands which would set
the DIANE environment if sourced into the bash shell.

Full development environment may be specified with --devel or -d options.
If specified, run the program within this environment.

Typical use cases:
   $(%PROG%)   : source DIANE environment into current bash shell
   `%PROG%`    : the same
   %PROG% --devel make : run make within DIANE environment

Advanced examples:

   %PROG% -d env | grep LD_LIBRARY_PATH
   %PROG% -d env LD_LIBRARY_PATH='' | grep LD_LIBRARY_PATH
   %PROG% -d bash -c '(cd ../..; make)'
   %PROG% -d python -c 'import diane.PACKAGE; print diane.PACKAGE.getReleaseDir()'

""".replace('%PROG%',PROG)

standardSetup()

cmd = sys.argv[1:]

if len(cmd) == 1 and cmd[0] in ['-h','--help']:
   print >>sys.stderr, help
   sys.exit(0)

devel = False
if len(cmd) > 0 and cmd[0] in ['-d','--devel']:
   devel = True
   cmd = sys.argv[2:]
   
# setup environment
import diane.PACKAGE

# print minimal user environment
if not devel:
   diane.PACKAGE.minimalSetup(print_env=True)
   print #add new line to flush stdout
   sys.exit(0)
   
# handle full development environment

if not cmd:
   diane.PACKAGE.standardSetup(print_env=True)
else:
   diane.PACKAGE.standardSetup()
   import subprocess
   try:
      sys.exit(subprocess.call(cmd))
   except OSError,x:
      print >>sys.stderr, "%s : %s"%(' '.join(cmd),x)
      sys.exit(-9999)
