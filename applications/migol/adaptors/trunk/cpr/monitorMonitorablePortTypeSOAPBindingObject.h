/* monitorMonitorablePortTypeSOAPBindingObject.h
   Generated by gSOAP 2.7.9l from Monitorable_service.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef monitorMonitorablePortTypeSOAPBindingObject_H
#define monitorMonitorablePortTypeSOAPBindingObject_H
#include "monitorH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

extern SOAP_NMAC struct Namespace monitor_namespaces[];
class MonitorablePortTypeSOAPBindingService : public soap
{    public:
	MonitorablePortTypeSOAPBindingService()
	{ this->namespaces = monitor_namespaces; };
	virtual ~MonitorablePortTypeSOAPBindingService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return monitor_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __migol__checkService(struct soap*, char *migoldef__checkService, bool &migoldef__checkServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 __migol__checkPoint(struct soap*, char *migoldef__checkPoint, bool &migoldef__checkPointResponse);

SOAP_FMAC5 int SOAP_FMAC6 __migol__Destroy(struct soap*, _lifetime__Destroy *lifetime__Destroy, _lifetime__DestroyResponse *lifetime__DestroyResponse);

#endif
