/* monitorStub.h
   Generated by gSOAP 2.7.9l from Monitorable_service.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef monitorStub_H
#define monitorStub_H
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_xsd__RelationshipTypeValues
#define SOAP_TYPE_xsd__RelationshipTypeValues (40)
/* xsd:RelationshipTypeValues */
enum xsd__RelationshipTypeValues {xsd__RelationshipTypeValues__xsd__Reply = 0};
#endif

#ifndef SOAP_TYPE_xsd__FaultSubcodeValues
#define SOAP_TYPE_xsd__FaultSubcodeValues (42)
/* xsd:FaultSubcodeValues */
enum xsd__FaultSubcodeValues {xsd__FaultSubcodeValues__xsd__InvalidMessageInformationHeader = 0, xsd__FaultSubcodeValues__xsd__MessageInformationHeaderRequired = 1, xsd__FaultSubcodeValues__xsd__DestinationUnreachable = 2, xsd__FaultSubcodeValues__xsd__ActionNotSupported = 3, xsd__FaultSubcodeValues__xsd__EndpointUnavailable = 4};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/




#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (6)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 6; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() : __item(NULL), soap(NULL) { }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__NCName_
#define SOAP_TYPE_xsd__NCName_ (10)
/* Primitive xsd:NCName schema type: */
class SOAP_CMAC xsd__NCName_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_xsd__NCName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__NCName_() : __item(NULL) { }
	virtual ~xsd__NCName_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (11)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_xsd__QName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName() : __item(NULL) { }
	virtual ~xsd__QName() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (13)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_() : __item(NULL) { }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (14)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() : __item((bool)0) { }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (16)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() : __item(0) { }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_
#define SOAP_TYPE_xsd__nonNegativeInteger_ (19)
/* Primitive xsd:nonNegativeInteger schema type: */
class SOAP_CMAC xsd__nonNegativeInteger_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_xsd__nonNegativeInteger_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__nonNegativeInteger_() : __item(NULL) { }
	virtual ~xsd__nonNegativeInteger_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (20)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() : __item(NULL) { }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_xsd__RelationshipTypeValues_
#define SOAP_TYPE_xsd__RelationshipTypeValues_ (41)
/* Primitive xsd:RelationshipTypeValues schema type: */
class SOAP_CMAC xsd__RelationshipTypeValues_ : public xsd__anyType
{
public:
	enum xsd__RelationshipTypeValues __item;
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_xsd__RelationshipTypeValues_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__RelationshipTypeValues_() : __item((enum xsd__RelationshipTypeValues)0) { }
	virtual ~xsd__RelationshipTypeValues_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__FaultSubcodeValues_
#define SOAP_TYPE_xsd__FaultSubcodeValues_ (43)
/* Primitive xsd:FaultSubcodeValues schema type: */
class SOAP_CMAC xsd__FaultSubcodeValues_ : public xsd__anyType
{
public:
	enum xsd__FaultSubcodeValues __item;
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_xsd__FaultSubcodeValues_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__FaultSubcodeValues_() : __item((enum xsd__FaultSubcodeValues)0) { }
	virtual ~xsd__FaultSubcodeValues_() { }
};
#endif

#ifndef SOAP_TYPE__lifetime__ScheduledResourceTerminationRP
#define SOAP_TYPE__lifetime__ScheduledResourceTerminationRP (26)
/* lifetime:ScheduledResourceTerminationRP */
class SOAP_CMAC _lifetime__ScheduledResourceTerminationRP
{
public:
	time_t lifetime__CurrentTime;	/* required element of type xsd:dateTime */
	time_t lifetime__TerminationTime;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__lifetime__ScheduledResourceTerminationRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _lifetime__ScheduledResourceTerminationRP() : lifetime__CurrentTime(0), lifetime__TerminationTime(0), soap(NULL) { }
	virtual ~_lifetime__ScheduledResourceTerminationRP() { }
};
#endif

#ifndef SOAP_TYPE__lifetime__Destroy
#define SOAP_TYPE__lifetime__Destroy (27)
/* lifetime:Destroy */
class SOAP_CMAC _lifetime__Destroy
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__lifetime__Destroy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _lifetime__Destroy() : soap(NULL) { }
	virtual ~_lifetime__Destroy() { }
};
#endif

#ifndef SOAP_TYPE__lifetime__DestroyResponse
#define SOAP_TYPE__lifetime__DestroyResponse (28)
/* lifetime:DestroyResponse */
class SOAP_CMAC _lifetime__DestroyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__lifetime__DestroyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _lifetime__DestroyResponse() : soap(NULL) { }
	virtual ~_lifetime__DestroyResponse() { }
};
#endif

#ifndef SOAP_TYPE__lifetime__SetTerminationTime
#define SOAP_TYPE__lifetime__SetTerminationTime (29)
/* lifetime:SetTerminationTime */
class SOAP_CMAC _lifetime__SetTerminationTime
{
public:
	time_t *RequestedTerminationTime;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__lifetime__SetTerminationTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _lifetime__SetTerminationTime() : RequestedTerminationTime(NULL), soap(NULL) { }
	virtual ~_lifetime__SetTerminationTime() { }
};
#endif

#ifndef SOAP_TYPE__lifetime__SetTerminationTimeResponse
#define SOAP_TYPE__lifetime__SetTerminationTimeResponse (30)
/* lifetime:SetTerminationTimeResponse */
class SOAP_CMAC _lifetime__SetTerminationTimeResponse
{
public:
	time_t *NewTerminationTime;	/* optional element of type xsd:dateTime */
	time_t CurrentTime;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE__lifetime__SetTerminationTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _lifetime__SetTerminationTimeResponse() : NewTerminationTime(NULL), CurrentTime(0), soap(NULL) { }
	virtual ~_lifetime__SetTerminationTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__lifetime__TerminationNotification
#define SOAP_TYPE__lifetime__TerminationNotification (31)
/* lifetime:TerminationNotification */
class SOAP_CMAC _lifetime__TerminationNotification
{
public:
	time_t TerminationTime;	/* required element of type xsd:dateTime */
	xsd__anyType *TerminationReason;	/* optional element of type xsd:anyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE__lifetime__TerminationNotification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _lifetime__TerminationNotification() : TerminationTime(0), TerminationReason(NULL), soap(NULL) { }
	virtual ~_lifetime__TerminationNotification() { }
};
#endif

#ifndef SOAP_TYPE_xsd__EndpointReferenceType
#define SOAP_TYPE_xsd__EndpointReferenceType (32)
/* xsd:EndpointReferenceType */
class SOAP_CMAC xsd__EndpointReferenceType : public xsd__anyType
{
public:
	class xsd__AttributedURI *Address;	/* required element of type xsd:AttributedURI */
	class xsd__ReferencePropertiesType *ReferenceProperties;	/* optional element of type xsd:ReferencePropertiesType */
	class xsd__AttributedQName *PortType;	/* optional element of type xsd:AttributedQName */
	class xsd__ServiceNameType *ServiceName;	/* optional element of type xsd:ServiceNameType */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_xsd__EndpointReferenceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__EndpointReferenceType() : Address(NULL), ReferenceProperties(NULL), PortType(NULL), ServiceName(NULL), __size(0), __any(NULL), __anyAttribute(NULL) { }
	virtual ~xsd__EndpointReferenceType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__ReferencePropertiesType
#define SOAP_TYPE_xsd__ReferencePropertiesType (33)
/* xsd:ReferencePropertiesType */
class SOAP_CMAC xsd__ReferencePropertiesType : public xsd__anyType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_xsd__ReferencePropertiesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ReferencePropertiesType() : __size(0), __any(NULL) { }
	virtual ~xsd__ReferencePropertiesType() { }
};
#endif

#ifndef SOAP_TYPE__basefaults__BaseFaultType_ErrorCode
#define SOAP_TYPE__basefaults__BaseFaultType_ErrorCode (52)
/* basefaults:BaseFaultType-ErrorCode */
class SOAP_CMAC _basefaults__BaseFaultType_ErrorCode
{
public:
	char *dialect;	/* required attribute */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__basefaults__BaseFaultType_ErrorCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _basefaults__BaseFaultType_ErrorCode() : dialect(NULL) { }
	virtual ~_basefaults__BaseFaultType_ErrorCode() { }
};
#endif

#ifndef SOAP_TYPE__basefaults__BaseFaultType_Description
#define SOAP_TYPE__basefaults__BaseFaultType_Description (54)
/* Primitive basefaults:BaseFaultType-Description schema type: */
class SOAP_CMAC _basefaults__BaseFaultType_Description
{
public:
	char *__item;
	char *xml__lang;	/* optional attribute */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__basefaults__BaseFaultType_Description */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _basefaults__BaseFaultType_Description() : __item(NULL), xml__lang(NULL) { }
	virtual ~_basefaults__BaseFaultType_Description() { }
};
#endif

#ifndef SOAP_TYPE_basefaults__BaseFaultType
#define SOAP_TYPE_basefaults__BaseFaultType (39)
/* basefaults:BaseFaultType */
class SOAP_CMAC basefaults__BaseFaultType : public xsd__anyType
{
public:
	time_t Timestamp;	/* required element of type xsd:dateTime */
	xsd__EndpointReferenceType *Originator;	/* optional element of type xsd:EndpointReferenceType */
	_basefaults__BaseFaultType_ErrorCode *ErrorCode;	/* optional element of type basefaults:BaseFaultType-ErrorCode */
	int __sizeDescription;	/* sequence of elements <Description> */
	_basefaults__BaseFaultType_Description *Description;	/* optional element of type basefaults:BaseFaultType-Description */
	int __sizeFaultCause;	/* sequence of elements <FaultCause> */
	basefaults__BaseFaultType **FaultCause;	/* optional element of type basefaults:BaseFaultType */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_basefaults__BaseFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         basefaults__BaseFaultType() : Timestamp(0), Originator(NULL), ErrorCode(NULL), __sizeDescription(0), Description(NULL), __sizeFaultCause(0), FaultCause(NULL) { }
	virtual ~basefaults__BaseFaultType() { }
};
#endif

#ifndef SOAP_TYPE_lifetime__ResourceUnknownFaultType
#define SOAP_TYPE_lifetime__ResourceUnknownFaultType (22)
/* lifetime:ResourceUnknownFaultType */
class SOAP_CMAC lifetime__ResourceUnknownFaultType : public basefaults__BaseFaultType
{
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_lifetime__ResourceUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         lifetime__ResourceUnknownFaultType()  { }
	virtual ~lifetime__ResourceUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_lifetime__ResourceNotDestroyedFaultType
#define SOAP_TYPE_lifetime__ResourceNotDestroyedFaultType (23)
/* lifetime:ResourceNotDestroyedFaultType */
class SOAP_CMAC lifetime__ResourceNotDestroyedFaultType : public basefaults__BaseFaultType
{
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_lifetime__ResourceNotDestroyedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         lifetime__ResourceNotDestroyedFaultType()  { }
	virtual ~lifetime__ResourceNotDestroyedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_lifetime__UnableToSetTerminationTimeFaultType
#define SOAP_TYPE_lifetime__UnableToSetTerminationTimeFaultType (24)
/* lifetime:UnableToSetTerminationTimeFaultType */
class SOAP_CMAC lifetime__UnableToSetTerminationTimeFaultType : public basefaults__BaseFaultType
{
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_lifetime__UnableToSetTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         lifetime__UnableToSetTerminationTimeFaultType()  { }
	virtual ~lifetime__UnableToSetTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_lifetime__TerminationTimeChangeRejectedFaultType
#define SOAP_TYPE_lifetime__TerminationTimeChangeRejectedFaultType (25)
/* lifetime:TerminationTimeChangeRejectedFaultType */
class SOAP_CMAC lifetime__TerminationTimeChangeRejectedFaultType : public basefaults__BaseFaultType
{
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_lifetime__TerminationTimeChangeRejectedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         lifetime__TerminationTimeChangeRejectedFaultType()  { }
	virtual ~lifetime__TerminationTimeChangeRejectedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__ServiceNameType
#define SOAP_TYPE_xsd__ServiceNameType (34)
/* Primitive xsd:ServiceNameType schema type: */
class SOAP_CMAC xsd__ServiceNameType : public xsd__anyType
{
public:
	char *__item;
	char *PortName;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_xsd__ServiceNameType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ServiceNameType() : __item(NULL), PortName(NULL), __anyAttribute(NULL) { }
	virtual ~xsd__ServiceNameType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__Relationship
#define SOAP_TYPE_xsd__Relationship (35)
/* Primitive xsd:Relationship schema type: */
class SOAP_CMAC xsd__Relationship : public xsd__anyType
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_xsd__Relationship */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__Relationship() : __item(NULL), RelationshipType(NULL), __anyAttribute(NULL) { }
	virtual ~xsd__Relationship() { }
};
#endif

#ifndef SOAP_TYPE_xsd__ReplyAfterType
#define SOAP_TYPE_xsd__ReplyAfterType (36)
/* Primitive xsd:ReplyAfterType schema type: */
class SOAP_CMAC xsd__ReplyAfterType : public xsd__anyType
{
public:
	char *__item;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_xsd__ReplyAfterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ReplyAfterType() : __item(NULL), __anyAttribute(NULL) { }
	virtual ~xsd__ReplyAfterType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__AttributedQName
#define SOAP_TYPE_xsd__AttributedQName (37)
/* Primitive xsd:AttributedQName schema type: */
class SOAP_CMAC xsd__AttributedQName : public xsd__anyType
{
public:
	char *__item;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_xsd__AttributedQName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__AttributedQName() : __item(NULL), __anyAttribute(NULL) { }
	virtual ~xsd__AttributedQName() { }
};
#endif

#ifndef SOAP_TYPE_xsd__AttributedURI
#define SOAP_TYPE_xsd__AttributedURI (38)
/* Primitive xsd:AttributedURI schema type: */
class SOAP_CMAC xsd__AttributedURI : public xsd__anyType
{
public:
	char *__item;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_xsd__AttributedURI */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__AttributedURI() : __item(NULL), __anyAttribute(NULL) { }
	virtual ~xsd__AttributedURI() { }
};
#endif

#ifndef SOAP_TYPE___migol__checkServiceResponse
#define SOAP_TYPE___migol__checkServiceResponse (60)
/* Operation wrapper: */
struct __migol__checkServiceResponse
{
public:
	bool migoldef__checkServiceResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE___migol__checkService
#define SOAP_TYPE___migol__checkService (61)
/* Operation wrapper: */
struct __migol__checkService
{
public:
	char *migoldef__checkService;	/* optional element of type xsd:anyType */
};
#endif

#ifndef SOAP_TYPE___migol__checkPointResponse
#define SOAP_TYPE___migol__checkPointResponse (63)
/* Operation wrapper: */
struct __migol__checkPointResponse
{
public:
	bool migoldef__checkPointResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE___migol__checkPoint
#define SOAP_TYPE___migol__checkPoint (64)
/* Operation wrapper: */
struct __migol__checkPoint
{
public:
	char *migoldef__checkPoint;	/* optional element of type xsd:anyType */
};
#endif

#ifndef SOAP_TYPE___migol__Destroy
#define SOAP_TYPE___migol__Destroy (68)
/* Operation wrapper: */
struct __migol__Destroy
{
public:
	_lifetime__Destroy *lifetime__Destroy;	/* optional element of type lifetime:Destroy */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (69)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (70)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (72)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (75)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (76)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (9)
typedef char *xsd__NCName;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (12)
typedef char *xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (18)
typedef char *xsd__nonNegativeInteger;
#endif

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (21)
typedef char *_xml__lang;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __migol__checkService(struct soap*, char *migoldef__checkService, bool &migoldef__checkServiceResponse);

SOAP_FMAC5 int SOAP_FMAC6 __migol__checkPoint(struct soap*, char *migoldef__checkPoint, bool &migoldef__checkPointResponse);

SOAP_FMAC5 int SOAP_FMAC6 __migol__Destroy(struct soap*, _lifetime__Destroy *lifetime__Destroy, _lifetime__DestroyResponse *lifetime__DestroyResponse);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 monitor_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 monitor_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___migol__checkService(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___migol__checkPoint(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___migol__Destroy(struct soap*);

#endif

/* End of monitorStub.h */
