Dear Hartmut Kaiser,

Thank you for your submission to LCSD'06.
We are pleased to inform you that your extended abstract

"The SAGA C++ Reference Implementation"

has been accepted as a short/position paper to be presented at the workshop, and to be included in the workshop proceedings. Papers went through a rigorous reviewing process.  Each paper was reviewed by at least three program committee members. Submissions to the workshop were of very high quality and interest. Of 20 papers, 9 were accepted as full papers,
4 as short papers.

Please consider carefully the enclosed comments by the reviewers when preparing the final version of your paper.
It is incumbent upon you to do so.

To submit your paper, revisit the LCSD 2006 submission site at https://www.osl.iu.edu/conferences/lcsd06, go to step 2, and use the following login name and password to enter your files:

Login: _LOGIN_NAME_
Password: _PASSWORD_

Please remember that the dead-line for submitting the final versions of your paper is October 10th.

Short/position papers are limited to a total of 6 pages.  You will have a time slot of approximately 15 minutes for presentation at the workshop.  Please let us know as soon as possible if you will not be able to attend.

Congratulations on having your paper accepted. We look forward to seeing you in Portland,

Sincerely,
Jaakko Jarvi and Josh Bloch,
On behalf of the LCSD'06 Program Committee

*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=

First reviewer's review:

          >>> Summary of the paper <<<

This paper presents the design of a C++ library which mediates between grid applications (in various languages), and complex and evolving grid middleware. The paper documents the design principles of the library, and ends with an analysis of some of the benefits which arise from the design approach.

The library has some interesting features:

 * Support for synchronous, asynchronous and batched ("bulk") invocation

 * A generic "adaptor" mechanism, that searches a database of applicable methods to find one that succeeds in a given context.

 * Consistent use of an opaque interface whose handles can then be exported to allow use of the library from other languages.

The paper presents no experimental work, nor practical evaluation of the claims.



          >>> Comments <<<

The title is weak - it would be good to identify the message for this audience, and highlight this is the title.

Similarly, the abstract is not an abstract. An abstract should succinctly characterise teh subject area, and briefly summarise the *conclusions* of the *paper*.

re: "we think there are lessons to learn for other API implementation" This is actually true, and it would be really good to bring this out in the later sections of the paper. But it *really* doesn't belong in the abstract. If you could make good on this promise I would really like this paper.

Apostrophes: libraries -> library's templates's -> templates engines -> engine's

The term "look and feel" doesn't seem to me to be very useful; I wonder if there is a better term?



          >>> Points in favour or against <<<

Strengths: 

 * Interesting readable report on experience potentially valuable to others.

Weaknesses:

* The analysis and evaluation does not identify limitations, problems or shortcomings (except commenting that performance issues are unimportant in this distributed context). Perhaps the entire exercise has been totally successful - but but for this workshop, a critical evaluation that explores the limits of the techniques would add to the work's value.

* There are lessons here for other API implementations, but the paper does not succeed, in my view, in telling us what they are.



 =*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=

Second reviewer's review:

          >>> Summary of the paper <<<

This paper describes the design and C++ implementation of SAGA, which is Grid computing middleware.



          >>> Points in favour or against <<<

Pros

. Paper is well written. In particular, the use of italicized requirements in Section 2 was nicely done.

. It's nice to see someone in the Grid community finally trying to design well-structured APIs since most of the APIs in Grid middleware like PVM and MPI are pretty horrible.

. The discussion of using boost and STL to implement SAGA was very interesting.

Cons

. There isn't much in SAGA that appears to be new relative to the vast amount of work on distributed computing middleware over the past several decades. In particular, the authors need to compare the capabilities of SAGA with other advanced middleware technologies, such as CORBA, DDS, etc.

. Ultimately, the acceptance of a new technology for the Grid community seems to be (1) how well it performs and (2) how easy it is for scientists (rather than software engineers) to use. These important issues were not addresssed in this paper.



 =*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=

Third reviewer's review:

          >>> Summary of the paper <<<

The paper describes the implementation of a binding for C++ to SAGA (Grid computing).



          >>> Comments <<<

I would like to see a few more implementation details. In particular, I think you need to show one of the macros and explain (1) what purpose it servers over straight C++ code (e.g. "defines two entities tham must be
consistent") and (2) explain why you eed to use facilities beyond the standard (#pragmas are by definition beyond the scope of the standard).

Please briefly describe alternative design or implementations that you seriously considered to illustrate your actual choices.



 =*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=--=*=
