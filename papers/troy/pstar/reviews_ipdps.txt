3 Reviews

Review 1 (Reviewer B)
None of the scores are visible in your role.

Detailed comments to author(s) (Please justify your recommendation and
suggest improvements in technical content or presentation for the
author(s). Please be as detailed and constructive as you can be.)

    Overall, I thought there were some very nice ideas in this paper.
    The idea of a unified high-level interface for writing
    pilot-job-style applications that can be deployed on top of one or
    many underlying pilot-job substrates is very nice, and TROY seems
    to be a good step towards that goal. Unfortunately, that goal was
    not at all clear from the introduction. It was unclear whether P*
    is intended to be a *general* model of PJ systems (in which case
    it would contain a superset of functionality), perhaps providing a
    common substrate on which programs written with existing PJ
    systems could be deployed; or whether (as turned out to be the
    case), P* is meant to capture the core components of a PJ system
    (in which case it would contain a *subset* of functionality) that
    allowed a common API to be written that would sit on top of
    existing PJ implementations.
    
    This needed to be made clear at the very beginning, with Figures 1
    and 2 lifted to the introduction, rather than left for page 4. 
    
    The introduction also suffered by being written with a lot of
    unexplained jargon. The abbreviations "CI" and "RM" were used
    without definition. Further, the notion of a pilot job system
    itself, the core concept in the paper, was named without
    explaining *what* the PJ abstraction entails. 
    
    While TROY itself is (eventually) clearly motivated, the
    motivation for P* itself is less clear. Just because each existing
    PJ system can be broken down into components that share common
    functionality doesn't really provide any new insight. Is the
    taxonomy in II-B meant to be comprehensive? How does it help to
    know whether a particular PJ system uses master/worker or
    decentralized coordination? Is there some guidance that can be
    drawn from this? Perhaps somehow considering application
    characteristics in light of this taxonomy to choose a well-suited
    PJ system? I was repeatedly struck while reading II-B with the
    question, "why is this useful"?
    
    I was also unclear as to the purpose of section V-B. A case study
    showing that the different possible implementations of BigJob have
    value is useful, but I don't see what the TROY system has to do
    with this. Is the exploration of different configurations somehow
    enabled by TROY?  Why couldn't this case study be done in
    isolation from P* and TROY? 
    
    My overall assessment is that there is a very good set of
    ideas in this paper that are, unfortunately, obscured by poor
    organization and presentation of the key concepts.


Review 2 (Reviewer C)
None of the scores are visible in your role.

Detailed comments to author(s) (Please justify your recommendation and
suggest improvements in technical content or presentation for the
author(s). Please be as detailed and constructive as you can be.)

    This paper presents P* Model, a common framework for describing
    Pilot-abstractions. It presents TROY, an implementation of the P*
    model that provides a common access to the different Pilot Job
    frameworks via an API, created by capturing the commonalities
    between them. Its main contribution is the P* model and TROY as
    well as the mapping of P* elements to known Pilot Jobs frameworks
    such as DIANE and Condor-G. P* Elements constist of:
    Pilot-Manager, Pilot-Job,Work Unit (WU) and Scheduling Unit (SU).

    The paper addresses an interesting problem and forms a Pilot Job
    abstraction that is stated not having being developed before.
    Thus, it would be easier to compare different pilot job
    implementations or use them interoperably. I'm not convinced
    though why would someone implement everything over TROY. Although
    the interoperablility aspectis very important there might be
    performance issues compared to the original implementations. Thus,
    it would be interesting to observe an experiment over various PJ
    implementations with TROY and without it, in order to show the
    overhead imposed by the framework. 
    
    Furthermore, the paper does not provide any new techniques or
    implementations according to the pilot jobs. It only maps the TROY
    framework with already existing ones. In addition, it is not clear
    to me whether TROY implements all the characteristics of various
    Pilot Jobs, or that every different characteristic has to be
    implemented. Moreover, it would make the comparison among existing
    techniques more clear if a resource consuming application would be
    used instead of the /bin/calc. 
    
    Finally it would be interesting to provide an experiment referring
    to the Pilot-Data abstraction that is being presented. There is no
    related work section.


Review 3 (Reviewer A)
None of the scores are visible in your role.

Detailed comments to author(s) (Please justify your recommendation and
suggest improvements in technical content or presentation for the
author(s). Please be as detailed and constructive as you can be.)

    Authors present a new model for pilot jobs, as well as a
    description and evualtion of an implementation of the proposed
    model. First of all, the paper is quite unpleasant to read: the
    paper is full of sentences that do not make much sense. I think
    this is mainly because the authors changed the text many times and
    did not take the time to go through the entire paper to "polish
    it". Also, because this is a scientific paper that targets a
    well-known conference, i really do not think that infornal
    expressions such as "unregulated cottage industry", or "voted with
    their feet" is appropriate and can easily be avoided. Please, make
    sure to also follow the basic rules of English writting in the
    context of scientific publications, e.g., expend all acronyms when
    used for the first time. 
    
    Now, regarding the model, it seems to me that the main interest is
    interoperability and the ultimate capability of comparing
    different implementations. About the interoperability, the
    proposed approach seems to be adequate, especially since
    ultimately, the proposed model prefectly fit the one implemented
    in already existing solutions (but based on a different
    terminology). Regarding the capability of comparing different
    implementation, it is clearly on interesting idea but this could
    be achieved with a more abstract comparison methodology, without
    requiring a new model and its associated implementation on top of
    existing solutions. In other terms, because authors highlight
    mainly these two points, i am still not sure of the interest of
    such a new model. Furthermore, as said before, the model is very
    similar to the one behind the implementation of current solutions;
    so even if this is the first proposed abstract model, i am not
    sure this is a scientific contribution critical enough to be
    published in IPDPS. For instance, I still do not see the real
    interest when compared to SAGA, and even authors seem to have a
    very unclear position about this ("The TROY API itself was
    designed to be similar to SAGA in appearance and philosophy [...] A
    further design consideration of TROY was a minimal but complete
    API).
    
    Finally, the experimentation is based on a very small platform
    that is not really representative of the target systems. Also,
    based on the presented numbers, it seems that the proposed
    solution is yet another software layer that will generate
    execution overhead for a benefit that is really unclear to me. If
    i am missing "the" interest of the proposed solution, authors
    should clear do a better job at explaining it.


Rebuttal

The rebuttal can be edited until November 13, 2011 23:59:00 EST.

