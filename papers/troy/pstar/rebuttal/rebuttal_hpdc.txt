Given that a significant number of small-scale and large-scale science
(ATLAS/CERN, LIGO) projects critically depend upon Pilot-Jobs (PJ),
the lack of a theoretical framework and -- even if partial, to
understand and analyze PJs is a serious issue. All five reviewers
universally acknowledge this issue and confirm the practical relevance
of the P* model and the Pilot-API.

The primary contribution of this paper is the formulation of an
abstract model (P*) of PJ and demonstration that, (i) P* is minimally
complete but extensible along multiple dimensions, e.g., supports the
common treatment of dynamic compute jobs and dynamic data, (ii)
validation of the P* model using the Pilot-API and its use with
different PJ frameworks (with very different compute-job semantics),
(iii) demonstration of concurrent interoperability of multiple PJ
frameworks across different infrastructures.

SJ: I propose we leave out (iii) above.

We acknowledge the reviewer's observation of less than perfect
language and clarity. These will be addressed. As examples of
improvements in clarity -- conceptual and expression, we will: (i)
provide greater context and details of PJ earlier in the paper, and
thus also improve the motivation for the P* model in section II.

SJ:I propose we remove the above paragraph.

SJ: I propose we call out that we are going to clarify some aspects
and respond to potential factually incorrect statements.

In spite of the constructive suggestions and observations of the
reviewers, we strongly believe the following statements are factually
inaccurate in the reviews:

* "It would however be a substantial improvement for the introduction
   to clearly define pilot jobs..."

The term Pilot-Job is casually introduced in section 1. A formal
definition is given in "terms and usage" in section 2.

* "...though the goal of a unified system to integrate all pilot systems
  is a rather elusive problem...""

The aim is not to unify via the Pilot-API, nor to integrate all PJ
systems, but to expose the inherent P* model through the Pilot-API.

* "the Pilot-Data API, which more or less mimics the PilotJob API is
  not very convincing in the sense that the interaction between the
  2 APIs are not discussed at all." 

SJ: Most reviewers agree that extensions to Pilot-Data is one of the
 more interesting features of P*. The aim of this paper was to first
 establish and validate P* along a dimension that is relatively well
 known: jobs. The above in conjunction with space limitations are the
 reasons for limited treatment of Pilot-Data (and its interaction with
 Pilot-Job API).

This is mainly owed to the limited space available. We are currently
preparing a more detailed publication on Pilot-Data.

* "In the end, the paper seems like a pilot job system for pilot job
   systems.""
   
   --> rebut, while we show such a 'system of system', we rather want
   to expose the p* model *inherent* to the different frameworks.


* "While the work seemed sound, I was unconvinced by the paper that
   another layer of indirection and abstraction was the right solution
   for connecting together pilot job systems.""

The paper is not about adding another layer, the aim of the Pilot-API is
to validate the P* model and show that the elements and characteristics of
different PJ frameworks can be exposed via a unified API. We extensively
motivate the Pilot-API in section 4.1.

SJ: Interoperability across PJ is a consequence of the Pilot-API
(which validate P* Model) and not the primary aim. The paper would
have been weaker had we not shown the obvious (ie interoperabiltiy);
however, we reiterate the aim was to provide a *common* model to
reason about PJs not to "connect PJ" at an implementation level.
   
* "Perhaps another element which could strengthen the paper is a
   description, based on the authors analysis of pilot job systems,
   why pilot job systems cannot be unified in other ways."

Various approaches for interoperability exist, e.g. horizontal
vs. vertical interoperability and federation.  We briefly discuss
these approaches in section 4.1. A more detailed discussion has be
left out due to space constraints.

* Performance-related remarks: 
	-  "the authors acknowledge
		that the evaluation should not be considered a performance
   		analysis of their framework, as the performance is based largely
   		on the computing infrastructure ..."

	- "Unfortunately, the experimental results are not very convincing.
	    Firstly, the overhead caused by interoperability (P*) is not
	    provided. And the introduced overheads are critical in
	    understanding if it is a worthwhile approach."
	
	- "More metrics like traffic, slowdown, and job speedup are needed to
	  be measured to be convincing."
	
    - "For the experiments parts, the authors didn't explain very well
	    how they test the interoperability between Pilot-Jobs and
	    infrastructures exist. The results are also hard to follow, why
	    certain experiments are done, and how to interpret the results."

As stated, the aim of the experiments is to demonstrate the validity
of the P* model and not interoperability. While we don't provide any
numbers on the API-layer overhead, the focus of the experiments are
the performance critical parts. While the call stack latency is
typical in the magnitude of nano-seconds, remote latency are in the
magnitude of micro-seconds!  

Experiments focus on the overhead induced by the PJ frameworks and
investigate application characteristics only when necessary (e.g.  to
understand the different application behavior on different
infrastructures). Speedups and slowdowns for the NGS application BFAST
is investigated in several other publications of our group. We
acknowledge the request for additional metrics (e.g. API overhead) and
an extended analysis.

* "Secondly, the demonstration of interoperability is overly
  simplified. For example, so of these pilot job systems were never
  meant to operate decoupled from their computational frameworks"

We believe that this is a major limitation that lead to dozens of
point solutions in the past that lack extensibility and
flexibility. We motivate this in the paper: "Tools and implementations
are often highly dependent on and tuned to a specific execution
environment, further impacting portability, reusability and
extensibility. Semantic and interface incompatibility are certainly
barriers, but so is the lack of a common architecture and conceptual
framework upon which to develop similar tools a barrier."

SJ: The above should also be used in the context of
Swift/Swift-Coaster.

SJ: We acknowledge that the following is not a standard response, but
we believe an interesting and relevant one: As part of the NSF-funded
ExTENCI project there is a proposal from the Swift team to integrate
Swift with an implementation of P*!! We believe this should address
the concern of Reviewer 4!

* If the complex workflow dependency management is taken out of the
   equation, then why bother to talk about the features of these
   workflow systems, such as the data from Table 2?

While some aspects in Table 2 might be interesting from a WF system point of 
view, there is no mention of WF systems in table 2.

* Does not say how to handle the case if the function in the framework
  can not be map to the P* Model. Also, I was expecting that more
  time would be spend on the Pilot-Data model, and how this
  translated to the various pilot-based systems.

Due to space constraints, we were unfortunately not able to discuss
some details. We all add the requested aspects as space permits to the
final version of the paper.
