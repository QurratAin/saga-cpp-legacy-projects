\subsection{Some Musings on adaptive applications, replica exchange,
  Glide-in and all-that-jazz}

There are two levels of adaptivity we are concerned with: 

i.  The ability to utilise expanded and reduced set of resources
    (Effective Resource Utilisation)
ii. Determine the best resource to utilise 
    (Effective Resource Determination)

We are going to show that as the number of resources available (pool)
gets larger, the greater the advantages to point (i) even though point
(ii) becomes harder. A truly scalable agile-execution model requires
both (i) and (ii), for at some stage the inability to do (ii)
effectively will limit the returns on (i). In this paper, we will
focus on point (i) discuss point (ii) later.



The question is: Does Glide-In make it easier to do any of these
directly?  At some level yes, it makes both tasks easier.  Instead of
a single task, we are now looking at a higher-level task -- an
aggregation, and in some ways it reduces the complexity.  In both
cases, the sub-tasks are immune from the fluctuations of the
scheduling system.

[side note: Also, muse about ``heterogenous parameters'' versus
dynamical attributes (I prefer to call it dynamic when the r/s
requirement changes or the availability changes)]

Remember Glide-In maybe at best a necessary but not a sufficient
mechanism to respond to the dynamic nature of an application, ie
Glide-In maybe an important component of any adaptive process.

{\it Four Ways in which dynamic pools are used by replica-exchange style
processes: Glide-In a necessary abstraction}

1. Assume the number of Glide-In jobs can adapt, and everything
       else remains the same
2. Assume the size of a Glide-In job can adapt, and thus 
       either the number of processes per replica has to change or
       the number of replicas per glide-in has to change
3. Assume the number of processes assigned to a replica can adapt, keeping the 
      size of each replia the same
4. Assume the number of replicas assigned to a Glide-in can adapt, keeping the
      number of replicas the same

Motivations to be dynamic

A.  Vary the number of processes assigned to each replica (?)
      -- speed up a job that is slowing down others

B.  Vary the Number of replicas
      --  reassign Temp (refined/adaptive sampling)
      --  add replicas at new (extended T) (enhanced dynamics)

C. Parallel replica dynamics: Just use the additional resources to be
     assigned to speed up the calculation.

Approach (A) in turn could arise, when either changing the number of
replicas or changing the number of processors associated with each
replica.

Resource Determination:

Glide-In: (a) location of glide-in 
          (b) and size of a glide-in
	     
which in turn either influences the number of replicas in a glide-in
or the size of individual replicas.

Contrast this to the MPIg model. MPIg approach has the advantage of
being able to continue without chkpoint/restart after an exchange, but
it is not agile, ie needs co-scheduling of resources.


\begin{verbatim}
Tier 1. Simulations with Many Component (eg replicas)
        -------------------------------

Tier 2. May/Maynot have dynamic resource requirements (eg., in the
number of processes or the queue)
        -------------------------------

Tier 3. Adaptivity is a mechanism to respond to dynamic changes as
opposed to just ignoring the dynamic attributes

\end{verbatim} 
