\subsection{Some Musings on adaptive applications, replica exchange,
  Glide-in and all-that-jazz}

There are two levels of adaptivity we are concerned with: i. The
ability to utilise expanded and reduced set of resources ii. Determine
the best resource to utilise.

The question is: Does Glide-In make it easier to do any of these
directly?  At some level yes, it makes both tasks easier. Instead of a
single task, we are now looking at a higher-level task -- an
aggregation, and in some ways it reduces the complexity.  [side note:
Also, muse about ``heterogenous parameters'' versus dynamical
attributes (I prefer to call it dynamic when the r/s requirement
changes or the availability changes)] Remember Glide-In maybe at best
a necessary but not a sufficient mechanism to respond to the dynamic
nature of an application, ie Glide-In maybe an important component of
any adaptive process.

\begin{verbatim}
Tier 1. Simulations with Many Component (eg replicas)
        -------------------------------
Tier 2. May/Maynot have dynamic resource requirements (eg., in the number of processes or the
queue)
        -------------------------------
Tier 3. Adaptivity is a mechanism to respond to dynamic changes as
opposed to just ignoring the dynamic attributes

\end{verbatim} 

{\it Four Ways in which dynamic pools are used by replica-exchange style
processes: Glide-In a necessary abstraction}

Assume the size of a Glide-In job can be varied to be adaptive.
Assume the number of processes assigned to a replica can change?

i. Vary the number of processes assigned to each replica (?)

ii. Num of replicas in a glide-in job: a) vary T b) add to T

iii. parallel replica dynamics

Glide-In: (a) location of glide-in (b) 
the number of replicas in a glide-in, ie the size of a glide-in

Contrast this to the MPIg model. MPIg approach has the advantage of
being able to continue without chkpoint/restart after an exchange, but
it is not agile, ie needs co-scheduling of resources.
