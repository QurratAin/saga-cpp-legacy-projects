%!PS-Adobe-2.0 EPSF-2.0
%%Title: perf_repex.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Dec 18 18:55:00 2008
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 7.100 def
/userlinewidth gnulinewidth def
/vshift -83 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ifelse } forall
currentdict /CharStrings known {
	CharStrings /Idieresis known {
		/Encoding ISOLatin1Encoding def } if
} if
currentdict end definefont
} def
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
/Helvetica reencodeISO def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 250 scalefont setfont
1.000 UL
LTb
1125 750 M
63 0 V
stroke
975 750 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 0)]
] -83.3 MRshow
1.000 UL
LTb
1125 1275 M
63 0 V
stroke
975 1275 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 5)]
] -83.3 MRshow
1.000 UL
LTb
1125 1800 M
63 0 V
stroke
975 1800 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 10)]
] -83.3 MRshow
1.000 UL
LTb
1125 2325 M
63 0 V
stroke
975 2325 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 15)]
] -83.3 MRshow
1.000 UL
LTb
1125 2850 M
63 0 V
stroke
975 2850 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 20)]
] -83.3 MRshow
1.000 UL
LTb
1125 3375 M
63 0 V
stroke
975 3375 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 25)]
] -83.3 MRshow
1.000 UL
LTb
1125 3900 M
63 0 V
stroke
975 3900 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 30)]
] -83.3 MRshow
1.000 UL
LTb
1125 4425 M
63 0 V
stroke
975 4425 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 35)]
] -83.3 MRshow
1.000 UL
LTb
1610 750 M
0 63 V
0 3927 R
0 -63 V
stroke
1610 500 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 50)]
] -83.3 MCshow
1.000 UL
LTb
2581 750 M
0 63 V
0 3927 R
0 -63 V
stroke
2581 500 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 100)]
] -83.3 MCshow
1.000 UL
LTb
3551 750 M
0 63 V
0 3927 R
0 -63 V
stroke
3551 500 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 150)]
] -83.3 MCshow
1.000 UL
LTb
4522 750 M
0 63 V
0 3927 R
0 -63 V
stroke
4522 500 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 200)]
] -83.3 MCshow
1.000 UL
LTb
5493 750 M
0 63 V
0 3927 R
0 -63 V
stroke
5493 500 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 250)]
] -83.3 MCshow
1.000 UL
LTb
6075 750 M
-63 0 V
stroke
6225 750 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 0)]
] -83.3 MLshow
1.000 UL
LTb
6075 1149 M
-63 0 V
stroke
6225 1149 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 1)]
] -83.3 MLshow
1.000 UL
LTb
6075 1548 M
-63 0 V
stroke
6225 1548 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 2)]
] -83.3 MLshow
1.000 UL
LTb
6075 1947 M
-63 0 V
stroke
6225 1947 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 3)]
] -83.3 MLshow
1.000 UL
LTb
6075 2346 M
-63 0 V
stroke
6225 2346 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 4)]
] -83.3 MLshow
1.000 UL
LTb
6075 2745 M
-63 0 V
stroke
6225 2745 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 5)]
] -83.3 MLshow
1.000 UL
LTb
6075 3144 M
-63 0 V
stroke
6225 3144 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 6)]
] -83.3 MLshow
1.000 UL
LTb
6075 3543 M
-63 0 V
stroke
6225 3543 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 7)]
] -83.3 MLshow
1.000 UL
LTb
6075 3942 M
-63 0 V
stroke
6225 3942 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 8)]
] -83.3 MLshow
1.000 UL
LTb
6075 4341 M
-63 0 V
stroke
6225 4341 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 9)]
] -83.3 MLshow
1.000 UL
LTb
6075 4740 M
-63 0 V
stroke
6225 4740 M
[ [(Helvetica) 250.0 0.0 true true 0 ( 10)]
] -83.3 MLshow
1.000 UL
LTb
1.000 UL
LTb
1125 750 M
4950 0 V
0 3990 V
-4950 0 V
0 -3990 V
LTb
250 2745 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 250.0 0.0 true true 0 (Time per Generation \(in min\))]
] -83.3 MCshow
grestore
LTb
6949 2745 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 250.0 0.0 true true 0 (Number of Active Glide-Ins)]
] -83.3 MCshow
grestore
LTb
3600 125 M
[ [(Helvetica) 250.0 0.0 true true 0 (Time \(in min\))]
] -83.3 MCshow
1.000 UP
1.000 UP
4.000 UL
LT0
LTb
4962 4552 M
[ [(Helvetica) 250.0 0.0 true true 0 (Time per Generation)]
] -83.3 MRshow
LT0
5112 4552 M
663 0 V
1179 3669 M
542 21 V
582 200 V
546 -189 V
3029 1737 L
175 -42 V
175 0 V
153 -105 V
177 116 V
194 94 V
202 42 V
178 -115 V
191 42 V
186 -11 V
60 -682 V
58 -11 V
55 -10 V
58 10 V
62 21 V
107 231 V
108 21 V
80 -157 V
66 -74 V
54 -63 V
59 21 V
56 -10 V
58 10 V
56 -10 V
53 -21 V
64 63 V
87 136 V
60 -157 V
59 -11 V
58 0 V
1179 3669 Pls
1721 3690 Pls
2303 3890 Pls
2849 3701 Pls
3029 1737 Pls
3204 1695 Pls
3379 1695 Pls
3532 1590 Pls
3709 1706 Pls
3903 1800 Pls
4105 1842 Pls
4283 1727 Pls
4474 1769 Pls
4660 1758 Pls
4720 1076 Pls
4778 1065 Pls
4833 1055 Pls
4891 1065 Pls
4953 1086 Pls
5060 1317 Pls
5168 1338 Pls
5248 1181 Pls
5314 1107 Pls
5368 1044 Pls
5427 1065 Pls
5483 1055 Pls
5541 1065 Pls
5597 1055 Pls
5650 1034 Pls
5714 1097 Pls
5801 1233 Pls
5861 1076 Pls
5920 1065 Pls
5978 1065 Pls
5443 4552 Pls
1.000 UP
4.000 UL
LT1
LTb
4962 4302 M
[ [(Helvetica) 250.0 0.0 true true 0 (Number Active Glide-Ins)]
] -83.3 MRshow
LT1
5112 4302 M
663 0 V
1179 1149 M
542 0 V
582 0 V
546 0 V
180 399 V
175 0 V
175 0 V
153 0 V
177 0 V
194 0 V
202 399 V
178 0 V
191 0 V
186 0 V
60 399 V
58 0 V
55 0 V
58 0 V
62 0 V
107 0 V
108 0 V
80 0 V
66 1596 V
54 0 V
59 0 V
56 0 V
58 0 V
56 0 V
53 0 V
64 0 V
87 0 V
60 0 V
59 0 V
58 0 V
1179 1149 Crs
1721 1149 Crs
2303 1149 Crs
2849 1149 Crs
3029 1548 Crs
3204 1548 Crs
3379 1548 Crs
3532 1548 Crs
3709 1548 Crs
3903 1548 Crs
4105 1947 Crs
4283 1947 Crs
4474 1947 Crs
4660 1947 Crs
4720 2346 Crs
4778 2346 Crs
4833 2346 Crs
4891 2346 Crs
4953 2346 Crs
5060 2346 Crs
5168 2346 Crs
5248 2346 Crs
5314 3942 Crs
5368 3942 Crs
5427 3942 Crs
5483 3942 Crs
5541 3942 Crs
5597 3942 Crs
5650 3942 Crs
5714 3942 Crs
5801 3942 Crs
5861 3942 Crs
5920 3942 Crs
5978 3942 Crs
5443 4302 Crs
1.000 UL
LTb
1125 750 M
4950 0 V
0 3990 V
-4950 0 V
0 -3990 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
